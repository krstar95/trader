{"version":3,"sources":["components/utils/d3-scale-wrapper.js","components/SimpleTickChart.js","components/ActiveMarketSummary.js","components/Pocket.js","components/FilterChip.js","components/EnhancedTableToolbar.js","components/Orders.js","components/utils/scrollTable.js","components/Fills.js","components/Depth.js","components/Trades.js","components/order/EnhancedForm.js","components/utils/utils.js","components/order/OrderTypeSelector.js","components/order/OrderForm.js","components/Indicator.js","components/QuickBar.js","components/MarketList.js","components/Markets.js","components/utils/TabComponent.js","containers/App.js","containers/Root.prod.js","store/markets.js","store/fills.js","store/filterMenu.js","store/wallets.js","store/rootReducer.js","store/marketprops.js","store/rootEpic.js","store/configureStore.prod.js","store/md.js","serviceWorker.js","index.js","store/audio.js","protobufs.js","store/mqtt.js","containers/Root.js","store/configureStore.js","store/orders.js","store/session.js","utils/utils.js","store/view.js"],"names":["wrap","s","defaultTickCount","ticks","tickFormat","nice","domain","range","paddingInner","paddingOuter","copy","count","specifier","d","r","padding","ValueLabel","props","text","react","dx_react_chart_material_ui_es","Label","Object","assign","SimpleTickChart","_this$props","this","classes","market","trades","min","height","max","data","map","trade","price","Math","pow","time","timestamp","seconds","toArray","Paper_default","a","className","root","chart","showLabels","showTicks","labelComponent","dx_react_chart_es","name","factory","wrapScale","scaleLinear","code","valueField","argumentField","React","compose","withStyles","paddingRight","connect","state","marketprops","view","md","ActiveMarketSummary","markets","nextProps","setState","undefined","react_default","createElement","index_es","base_logo","base_asset","icon","quote_logo","quote_asset","last","mfv","close24","mfpx","open24","high24","low24","volume24","mfsz","change24","sub","abs_change24","abs","close","div","toFixed","open","high","low","volume","change","abs_change","abs_percent_change","up","mvpx","style","container","spacing","item","sm","src","component","variant","symbol","base_symbol","components_SimpleTickChart","numeric","quote_symbol","Component","theme","display","flexDirection","background","textAlign","Root","margin","_ref","restProps","objectWithoutProperties","label","whiteSpace","_ref2","Pocket","wallets","isEmpty","barData","forEach","wallet","asset","available","push","val","flex","title","position","rootComponent","stacks","series","FilterChip","handleDelete","_this","selectItem","id","_this2","menus","selected","Chip_default","key","onDelete","chip","filterMenus","dispatch","type","justifyContent","unit","EnhancedTableToolbar","anchorEl","handleToggle","placement","event","currentTarget","handleClose","handleSelect","target","value","cancelOrders","Toolbar_default","classNames","defineProperty","highlight","length","Typography_default","color","spacer","components_FilterChip","Fragment","actions","inline_container","middle","Button_default","button","onClick","Cancel_default","rightIcon","Tooltip_default","IconButton_default","aria-label","FilterList_default","Popper_default","transition","disablePortal","TransitionProps","Grow_default","transformOrigin","ClickAwayListener_default","onClickAway","MenuList_default","MenuItem_default","ListItemIcon_default","Done_default","palette","secondary","main","backgroundColor","light","primary","zIndex","width","alignSelf","marginLeft","desc","b","orderBy","formatPrice","formatAsset","formatQty","cols","align","o","order","side","Side","BUY","SELL","quantity","OrderType","Name","orderType","EnhancedTableHead","createSortHandler","property","onRequestSort","onSelectAllClick","numSelected","rowCount","TableHead_default","TableRow_default","col","TableCell_default","sortDirection","enterDelay","TableSortLabel_default","active","direction","Checkbox_default","indeterminate","checked","onChange","OrdersTable","_this3","orders","page","rowsPerPage","handleRequestSort","handleSelectAllClick","index","i","status","OrderStatusCode","OS_CANCELED","OS_FILLED","clOrdID","handleClick","selectedIndex","indexOf","newSelected","concat","slice","handleChangePage","handleChangeRowsPerPage","handleCancelOrders","isSelected","getProtoOptionKey","option_name","srch_value","arrOptions","checkToday","orderDay","day","Date","today","getFullYear","getMonth","getDate","addOrderToArray","arr","mData","cancelStatus","_this4","_this$props2","_this$state","emptyRows","Filter","arrOrders","OS_OPEN","components_EnhancedTableToolbar","tableWrapper","Table_default","table","aria-labelledby","Orders_EnhancedTableHead","TableBody_default","array","cmp","stabilizedThis","el","sort","stableSort","getSorting","n","date","buy","sell","total","filledCost","filled","remaining","avgfillprice","decimals","orderStatusCodeLabel","OS_PARTIAL_FILL","cancelStatusCodeLabel","setTime","moment","format","hover","role","aria-checked","tabIndex","scope","colSpan","TablePagination_default","backIconButtonProps","nextIconButtonProps","onChangePage","onChangeRowsPerPage","ORDERS_CANCEL_","minWidth","overflowX","Section","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","keyHack","scrollToTop","bind","assertThisInitialized","rows","getRowData","clickHandler","row","rowData","previous_row","last_color","rowGreen","formated_rows","rowColor","rowWhite","rowDataFormating","unshift","_arguments","arguments","Events","scrollEvent","register","to","element","console","log","scrollSpy","update","remove","scroll","scrollToBottom","scrollTo","scrollMore","row_class","getRowsDisplay","rowSmall","rowBanded","apply","toConsumableArray","column","flexFill","tableLayout","headers","header","modules","overflowY","visibility","&:nth-of-type(odd)","&:nth-of-type(even)","headRow","rowRed","marketColumn","Fills","next_row","fill","size","pb","took","orderID","fills","scrollTable","DepthContainer","formatBid","bid","mvsz","px","formatAsk","ask","formatDid","did","handleCellClick","pick","IOC","VIEW_POPULATE_TICKET_","quote","q","lastQtyCum","askQty","bidQty","dist_es","dist_default","cell","cellHovered","getMicrobook","maxHeight","rowHeight","onCellClick","includeHeaders","columns","cellProps","fontWeight","isCellHovered","colHovered","rowHovered","PureComponent","boxSizing","alignItems","Trades","nanoseconds","toString","Big","taker","previous_price","split","reverse","DP","OrderForm","onFieldChange","handleChange","regex","assetDecimalRegex","match","setFieldValue","initial","limit","stop","values","validateForm","resetForm","dirty","errors","handleSubmit","handleBlur","touched","marketOrder","available_base","available_quote","NE","stop_hide","STOP","hide","available_q","available_b","buy_sell_disabled","times","lt","lte","onSubmit","autoComplete","xs","textField","InputProps","endAdornment","disableUnderline","disabled","fullWidth","error","disabled_sell","disabled_buy","submitForm","formik","mapPropsToValues","validationSchema","Yup","typeError","positive","required","shape","round","ORDERS_NEW_","session","userID","profileID","pocketID","displayName","typography","marginBottom","marginTop","fontSize","buttons","&:disabled","opacity","withFormik","options","GTC","description","AON","FOK","OrderTypeSelector","handleClickListItem","handleMenuItemClick","List_default","ListItem_default","aria-haspopup","aria-controls","noPadding","ListItemText_default","listItemText","MoreVert_default","Menu_default","Boolean","onClose","option","itemText","paper","paddingLeft","blank","OrderFormContainer","handleOrderTypeChange","getIn","group","order_OrderTypeSelector","paddingTop","EnhancedForm","newState","pv2f","qty","sv2f","marginRight","Indicator","handleOpen","fields","Card_default","card","details","CardContent_default","content","field","action","controls","paddingBottom","playIcon","bullish","bearish","withTheme","QuickBar","pxspan","Grid_default","components_Indicator","add","v_","ownProps","MarketList","m","percent","rank","handleMarketClick","VIEW_SET_MARKET_","keys","marketsClass","firstHide","Markets","components_MarketList","WrapperTab","that","newChildren","Children","children","child","cloneElement","SimpleTabs","components","labels","Number","search","tab_labels","Tab_default","AppBar_default","c","Tabs_default","TabComponent_WrapperTab","flexGrow","darkTheme","createMuiTheme","Wrapper","_Component","inherits","createClass","ResponsiveGridLayout","WidthProvider","Responsive","App","fillComponent","components_Fills","tabComponents","Orders","styles","layouts","lg","x","y","w","h","breakpoints","xxs","draggableCancel","App_Wrapper","src_components_ActiveMarketSummary","components_Markets","components_Pocket","Depth","components_Trades","components_QuickBar","order_OrderForm","TabComponent","store","es","src_containers_App","MARKETS_QUOTE_","epics","action$","pipe","ofType","SESSION_FETCHED","filter","isAuthorized","take","mergeMap","ajax","getJSON","response","state$","combineLatest","MQTT_CONNECTED","subject","MQTT_SUBSCRIBE_","MQTT_RX","topic","Summary","decode","message","decodeProtobuf","catchError","of","MARKETS_QUOTE_FETCH_ERROR_","events","FillEventList","initState","zero","pocket","Position","rootReducer","combineReducers","objectSpread","mqtt","ORDERS_RX_FILL","FillEvent","Map","reduce","acc","set","pending","toObject","newStatus","menu","rootEpic","combineEpics","audio","epicMiddleware","createEpicMiddleware","configureStore","preloadedState","createStore","applyMiddleware","thunk","run","MD_SUBSCRIBE_","aggregation","MD_UNSUBSCRIBE_","INITIAL_STATE","dailies","continuumReduce","continuum","segment","List","warn","_continuum$topic$spli","_continuum$topic$spli2","_Volumes_Data_Work_Web_Kirk_hull_connectweb_trader_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","_Volumes_Data_Work_Web_Kirk_hull_connectweb_trader_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_Volumes_Data_Work_Web_Kirk_hull_connectweb_trader_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","md$","webSocketOpen$","Subject","webSocketClosing$","webSocketClose$","PLEX","webSocket","url","mdsHost","mdsPort","binaryType","serializer","request","deserializer","Continuum","Uint8Array","openObserver","closingObserver","closeObserver","plex","multiplex","plexOf","MD_UPDATE_","takeUntil","unsub","delay","wasClean","reason","window","location","hostname","__webpack_require__","__webpack_exports__","initAudioContext","ReactDOM","render","Root_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","context","redux_observable__WEBPACK_IMPORTED_MODULE_0__","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","_orders__WEBPACK_IMPORTED_MODULE_3__","dingBuffer","AudioContext","webkitAudioContext","sndBuf","XMLHttpRequest","responseType","onload","decodeAudioData","buffer","send","loadDingSound","loadAwSound","e","playSound","source","createBufferSource","destination","start","tap","ignoreElements","protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__","$Reader","$protobuf","$Writer","$util","$root","Price","properties","prototype","Long","fromBits","create","encode","writer","hasOwnProperty","uint32","uint64","google","protobuf","Timestamp","fork","ldelim","encodeDelimited","reader","end","len","pos","tag","skipType","decodeDelimited","verify","isInteger","fromObject","object","fromValue","unsigned","parseInt","LongBits","toNumber","TypeError","defaults","long","longs","String","toJSON","constructor","toJSONOptions","BBO","bidPrice","askPrice","lastTradePrice","valuesById","Trade","bidID","askID","buyer","seller","tradePrice","int32","enums","emptyArray","string","Array","isArray","isString","arrays","j","ModifyType","NewOrder","orderIDParent","stopPrice","held","ClientKey","CancelOrder","$oneOfFields","requestID","clientKey","get","oneOfGetter","oneOfSetter","oneofs","CancelStatusCode","CancelStatus","ModifyOrder","modifyType","Action","newOrder","cancelOrder","modifyOrder","msg","Fill","bool","OrderStatusEvent","OrderStatus","Order","history","OrderList","year","month","sint64","sz","closePrior","closePrior24","lastQty","lastPrior","lastTime","volumeCum","bidPrior","askPrior","flags","Wallet","Interval","begin","Segment","AuthInfo","sessionKey","jwt","mqttHost","mqttPort","nanos","int64","MQTT_SEND_","MQTT_INITIAL_STATE","client","isConnected","messagesReceived","messagesSent","_Volumes_Data_Work_Web_Kirk_hull_connectweb_trader_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","subscribe","publish","protocol","username","password","queueQoSZero","keepalive","on","MQTT_CONNECTED_","MQTT_RX_","MQTT_CONNECT_FAILED_","module","exports","require","OS_NEW","OS_PENDING","OS_REJECTED","uuidv4","CLIENT_ID","lastKnown","actionEvent","existing","NEW","TRANSITIONS","PRIORS","is_old_status","INVALID_TRANSITIONS","is_invalid_transition","CS_NEW","action_type","now","switchMap","ORDERS_FETCHED_","finish","cancel","rxAction","_TRANSITIONS","_PRIORS","_INVALID_TRANSITIONS","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_6__","rxjs__WEBPACK_IMPORTED_MODULE_7__","rxjs_ajax__WEBPACK_IMPORTED_MODULE_8__","_utils_utils__WEBPACK_IMPORTED_MODULE_9__","_protobufs__WEBPACK_IMPORTED_MODULE_10__","SESSION_FETCHED_","determine_host","host","determine_port","port","local_default","merge","interval","mapTo","info","base64_arraybuffer__WEBPACK_IMPORTED_MODULE_0__","big_js__WEBPACK_IMPORTED_MODULE_1__","_protobufs__WEBPACK_IMPORTED_MODULE_2__","protobuf_obj","protobuf_base64","u8","truncate","decimals_min","v1","v2","f","CS_PENDING","CS_ACCEPTED","CS_REJECTED","old_market","pluck","distinctUntilChanged","pairwise"],"mappings":"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","file":"static/js/main.0aa14744.chunk.js","sourcesContent":["// wrap d3-scale objects to override the default tick count\n//\nexport default function wrap(s, defaultTickCount) {\n  const { ticks, tickFormat, nice, domain, range, paddingInner, paddingOuter, copy } = s\n\n  s.copy = () => wrap(copy(), defaultTickCount)\n  s.ticks = count => ticks(count ? count : defaultTickCount)\n  s.tickFormat = (count, specifier) => tickFormat(count ? count : defaultTickCount, specifier)\n  s.nice = count => {\n    nice(count ? count : defaultTickCount)\n    return s\n  }\n  s.domain = d => {\n    if (d) {\n      domain(d)\n      return s\n    }\n    else {\n      return domain()\n    } \n  }\n  s.range = r => {\n    if (r) {\n      range(r)\n      return s\n    }\n    else {\n      return range()\n    } \n  }\n  s.paddingInner = padding => {\n    paddingInner(padding)\n    return s\n  }\n  s.paddingOuter = padding => {\n    paddingOuter(padding)\n    return s\n  }\n\n  return s\n}\n","import * as React from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport {\n  Chart,\n  ArgumentAxis,\n  ValueAxis,\n  LineSeries,\n} from '@devexpress/dx-react-chart-material-ui'\nimport { withStyles } from '@material-ui/core/styles'\nimport { ValueScale } from '@devexpress/dx-react-chart'\nimport { connect } from 'react-redux'\nimport compose from 'recompose/compose'\nimport { scaleLinear } from 'd3-scale'\nimport wrapScale from './utils/d3-scale-wrapper'\n\nconst styles = () => ({\n  root: {\n    height: 'auto'\n  },\n  chart: {\n    paddingRight: '20px',\n  },\n})\n\nconst ValueLabel = (props) => {\n  const { text } = props;\n  return (\n    <ValueAxis.Label\n      {...props}\n      text={text}\n    />\n  )\n}\n\nclass SimpleTickChart extends React.Component {\n  render() {\n\n    const { classes, market, trades, height } = this.props\n \n    let min = null\n    let max = 0\n    let data = trades ? trades.map(trade => {\n      let price = trade.price / 10**8\n      if (min === null || price < min) {\n        min = price\n      }\n      if (price > max) {\n        max = price\n      }\n      return {\n        time: trade.timestamp.seconds,\n        price\n      }\n    }).toArray() : []\n\n    return (\n      <Paper className={classes.root}>\n        <Chart\n            data={data}\n            height={90}\n            className={classes.chart} >\n          <ArgumentAxis\n              showLabels={false}\n              showTicks={false} />\n          <ValueAxis\n              max={max}\n              labelComponent={ValueLabel} />\n          <ValueScale\n              name=\"\"\n              factory={() => wrapScale(scaleLinear(), 3)} />\n          <LineSeries\n              name={market.code}\n              valueField=\"price\"\n              argumentField=\"time\" />\n        </Chart>\n      </Paper>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  market: state.marketprops[state.view.market],\n  trades: state.md.trades[state.view.market],\n})\n\nexport default compose(\n\twithStyles(styles, { name: 'SimpleTickChart' }),\n\tconnect(mapStateToProps)\n)(SimpleTickChart)\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport { Grid } from '@material-ui/core'\nimport compose from 'recompose/compose'\nimport { connect } from 'react-redux'\nimport { markets } from '../protobufs'\nimport { sub, div, mfv, mfpx, mfsz, mvpx } from '../utils/utils'\nimport SimpleTickChart from './SimpleTickChart'\n\nimport './ActiveMarketSummary.css'\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    background: \"#1d262c\",\n  },\n  numeric: {\n    textAlign: 'right'\n  }\n});\n\nclass ActiveMarketSummary extends Component {\n  state = {\n    market: markets['LC|LUS']\n  }\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      market: nextProps.markets[nextProps.view.market]\n    })\n  }\n\n  render() {\n    const { classes, height } = this.props\n    const { market } = this.state\n\n    if (market === undefined) {\n      return (\n        <Card>\n        </Card>\n      );\n    }\n\n    let base_logo = market.base_asset.icon;\n    let quote_logo = market.quote_asset.icon;\n\n    let last = mfv(market, 'last')\n\n    // 24 Hour\n    let close24 = mfpx(market, 'closePrior24')\n    let open24 = mfpx(market, 'open24')\n    let high24 = mfpx(market, 'high24')\n    let low24 = mfpx(market, 'low24')\n    let volume24 = mfsz(market, 'volume24')\n    let change24 = sub(last, close24)\n    let abs_change24 = Math.abs(change24)\n    let abs_percent_change24 = (100 * div(abs_change24, close24)).toFixed(2)\n    let up24 = change24 > 0\n\n    // Day Session\n    let close = mfv(market, 'closePrior')\n    let open = mfpx(market, 'open')\n    let high = mfpx(market, 'high')\n    let low = mfpx(market, 'low')\n    let volume = mfsz(market, 'volume')    \n    let change = sub(last, close)\n    let abs_change = Math.abs(change)\n    let abs_percent_change = (100 * div(abs_change, close)).toFixed(2)\n    let up = change > 0\n\n    abs_change24 = mvpx(market, abs_change24)\n    abs_change = mvpx(market, abs_change)\n    last = mvpx(market, last)\n\n    return (\n      <Card\n        style={{ height: height }}\n        className={classes.root}>\n        <CardContent className=\"active-summary\">\n          <Grid container spacing={8}>\n            <Grid item sm={2} className=\"no-drag marketLogo\">\n              <img className=\"market-base-icon\" src={base_logo} />\n              <img className=\"market-quote-icon\"src={quote_logo} />\n              <Typography component=\"h5\" variant=\"h5\">{market.symbol}</Typography>\n            </Grid>\n            <Grid item sm={2} className=\"no-drag\">\n              <Typography component=\"h3\" variant=\"h3\">{ last }</Typography> \n              <Typography component=\"h5\" variant=\"h5\">\n                <span className={ up ? 'increase' : 'decrease' }>\n                  { up ? ' +' : ' -' }{ abs_percent_change }% <i className={ up ? 'fa fa-arrow-up' : 'fa fa-arrow-down'}></i>\n                </span>\n              </Typography>\n              <div><span className=\"values\">{ volume }</span> {market.base_symbol} Traded</div>\n            </Grid>\n            <Grid item sm={4}>\n              <SimpleTickChart />\n            </Grid>\n            <Grid item sm={2} className={classes.numeric}>\n              <div>Session</div>\n              <div>OPEN <span className=\"values\">{ open }</span> {market.quote_symbol}</div>\n              <div>HIGH <span className=\"values\">{ high }</span> {market.quote_symbol}</div>\n              <div>LOW <span className=\"values\">{ low }</span> {market.quote_symbol}</div>\n              <div>VOLUME <span className=\"values\">{ volume }</span> {market.base_symbol}</div>\n            </Grid>\n            <Grid item sm={2} className={classes.numeric}>\n              <div>24 Hour</div>\n              <div>OPEN <span className=\"values\">{ open24 }</span> {market.quote_symbol}</div>\n              <div>HIGH <span className=\"values\">{ high24 }</span> {market.quote_symbol}</div>\n              <div>LOW <span className=\"values\">{ low24 }</span> {market.quote_symbol}</div>\n              <div>VOLUME <span className=\"values\">{ volume24 }</span> {market.base_symbol}</div>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    view: state.view,\n    markets: state.markets\n  }\n}\n\nexport default compose(\n\twithStyles(styles),\n\tconnect(mapStateToProps)\n)(ActiveMarketSummary)\n","\nimport * as React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux'\nimport compose from 'recompose/compose'\nimport { Card, CardHeader } from '@material-ui/core';\nimport {\n  Chart,\n  ArgumentAxis,\n  ValueAxis,\n  BarSeries,\n  Legend,\n} from '@devexpress/dx-react-chart-material-ui';\nimport { Stack } from '@devexpress/dx-react-chart';\nimport { ValueScale } from '@devexpress/dx-react-chart'\nimport { scaleLinear } from 'd3-scale'\nimport wrapScale from './utils/d3-scale-wrapper'\n\nconst legendStyles = () => ({\n  root: {\n    display: 'flex',\n    margin: 'auto',\n    flexDirection: 'row',\n  },\n});\nconst legendRootBase = ({ classes, ...restProps }) => (\n  <Legend.Root {...restProps} className={classes.root} />\n);\nconst Root = withStyles(legendStyles, { name: 'LegendRoot' })(legendRootBase);\nconst legendLabelStyles = () => ({\n  label: {\n    whiteSpace: 'nowrap',\n  },\n});\nconst legendLabelBase = ({ classes, ...restProps }) => (\n  <Legend.Label className={classes.label} {...restProps} />\n);\nconst Label = withStyles(legendLabelStyles, { name: 'LegendLabel' })(legendLabelBase);\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n})\n\nclass Pocket extends React.PureComponent {\n  render() {\n    const { classes, wallets } = this.props\n\n    if (wallets.isEmpty()) {\n      return <div/>\n    }\n\n    let data = []\n    let barData = []\n    let max = 0\n    wallets.forEach((wallet, asset) => {\n      if (wallet.open > max) {\n        max = wallet.open / 10**8\n      }\n      if (wallet.available > max) {\n        max = wallet.available / 10**8\n      }\n      barData.push({\n        asset,\n        available: wallet.available / 10**8,\n        open: wallet.open / 10**8\n      })\n      if (wallet.open > 0) {\n        data.push({\n          name: asset + ' open',\n          val: wallet.open / 10**8\n        })\n      }\n      if (wallet.available > 0) {\n        data.push({\n          name: asset,\n          val: wallet.available / 10**8\n        })\n      }\n    })\n\n    return (\n      \n      <Card style={{height:this.props.height}} className={classes.flex}>\n        <CardHeader title=\"Pocket\" />\n        <Chart\n            height={218}\n            data={barData}>\n          <ArgumentAxis />\n          <ValueAxis\n              max={max}\n          />\n          <ValueScale\n              name=\"\"\n              factory={() => wrapScale(scaleLinear(), 5)} />\n          <BarSeries\n              name=\"Available\"\n              valueField=\"available\"\n              argumentField=\"asset\"\n          />\n          <BarSeries\n              name=\"Open\"\n              valueField=\"open\"\n              argumentField=\"asset\"\n          />\n          <Legend\n              position=\"bottom\"\n              rootComponent={Root}\n              labelComponent={Label} />\n          <Stack\n              stacks={[\n                { series: ['Available', 'Open'] },\n              ]}\n          />\n        </Chart>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  wallets: state.wallets,\n})\n  \nexport default compose(\n  withStyles(styles),\n  connect(mapStateToProps)\n)(Pocket)\n  ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nimport Paper from '@material-ui/core/Paper';\nimport { connect } from 'react-redux';\n\nconst styles = theme => ({\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      padding: theme.spacing.unit / 2,\n    },\n    chip: {\n      margin: theme.spacing.unit / 2,\n    },\n});\n\nclass FilterChip extends React.Component {\n\n    handleDelete = data => () => {\n        \n        this.props.selectItem(data.id);\n    };\n\n    render() {\n        const { classes, menus } = this.props;\n\n        return (\n            <Paper className={classes.root}>\n            {\n                menus.map( (data) => {\n                    \n                    if (data.selected) {\n                        return (\n                            <Chip\n                                key={data.key}          \n                                label={data.title}\n                                onDelete={this.handleDelete(data)}\n                                className={classes.chip}\n                            />\n                        )\n                    }\n                })\n            }\n            </Paper>\n        );\n    }\n}\n  \nFilterChip.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n\n    return {\n      menus: state.filterMenus.menus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      selectItem: (id) => {\n        dispatch({type: 'SELECT_ITEM', id: id})\n      }\n    }\n}\n  \nexport default connect( mapStateToProps, mapDispatchToProps)(withStyles(styles)(FilterChip));\n\n","import React, { Component } from 'react'\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport FilterChip from './FilterChip';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport PropTypes from 'prop-types';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Done from '@material-ui/icons/Done';\nimport { connect } from 'react-redux';\n\nclass EnhancedTableToolbar extends Component {\n\n    state = {\n        open: false,\n        anchorEl: null\n    };\n    \n    handleToggle  = placement =>event => {\n      const { currentTarget } = event;\n      this.setState(state => ({ \n        open: !state.open,\n        anchorEl: currentTarget\n      }));\n      \n    };\n    \n    handleClose = event => {\n      \n      this.setState({ open: false });\n    };\n\n    handleSelect = event => {\n      \n      this.props.selectItem(event.target.value);\n      this.setState({ open: false });\n    };\n\n    render() {\n  \n      const { selected, cancelOrders, classes } = this.props;\n      const { menus } = this.props;\n      const { open } = this.state;\n  \n      return (\n      <Toolbar\n        className={classNames(classes.root, {\n          [classes.highlight]: selected.length > 0,\n        })}\n      >\n        <div className={classes.title}>\n          {selected.length > 0 ? (\n            <Typography color=\"inherit\" variant=\"subtitle1\">\n              {selected.length} selected\n            </Typography>\n          ) : (\"\")}\n        </div>\n        <div className={classes.spacer} />\n        {\n          !selected.length > 0 ? (<div> <FilterChip /> </div>) : (<React.Fragment></React.Fragment>)\n        }\n        <div className={classes.actions}>\n          {selected.length > 0 ? (\n            <div className={classes.inline_container}>\n              <div className={classes.middle}>\n\n              <Button variant=\"contained\" className={classes.button} onClick={cancelOrders}>\n                Cancel {selected.length} {selected.length > 1? 'Orders': 'Order'}\n                <CancelIcon className={classes.rightIcon} />\n              </Button>\n              </div>\n            </div>\n          ) : (\n            <React.Fragment>\n              <Tooltip title=\"Filter list\">\n                <IconButton aria-label=\"Filter list\" onClick={this.handleToggle('bottom-end')}>\n                  <FilterListIcon />\n                </IconButton>\n              </Tooltip>\n\n              <Popper open={open} anchorEl={this.state.anchorEl} transition disablePortal={true} placement=\"bottom-end\">\n              {({ TransitionProps, placement }) => (\n                <Grow\n                  {...TransitionProps}\n                  id=\"menu-list-grow\"\n                  style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n                >\n                  <Paper placement=\"bottom-end\">\n                    <ClickAwayListener onClickAway={this.handleClose}>\n                      <MenuList>\n                        {\n                          menus.map ( (item) => {\n                            return (\n                              <MenuItem key={item.id} onClick={this.handleSelect} value={item.id}>\n                                {item.title}\n                                {item.selected? (<ListItemIcon className={classes.icon}>\n                                  <Done />\n                                </ListItemIcon>) : \"\"}\n                              </MenuItem>\n                            )\n                          })\n                        }\n                      </MenuList>\n                    </ClickAwayListener>\n                  </Paper>\n                </Grow>\n              )}\n            </Popper>\n            </React.Fragment>\n          )}\n        </div>\n      </Toolbar>\n      )\n    }\n}\n\n// TODO: What is the proper definition or import for this function?\nconst lighten = color => color\n\nconst toolbarStyles = theme => ({\n    root: {\n      paddingRight: theme.spacing.unit,\n    },\n    highlight:\n      theme.palette.type === 'light'\n        ? {\n            color: theme.palette.secondary.main,\n            backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n          }\n        : {\n            color: theme.palette.text.primary,\n            backgroundColor: '#FF5722',\n          },\n    spacer: {\n      flex: '1 1 100%',\n    },\n    actions: {\n      zIndex: 100,\n      color: theme.palette.text.secondary,\n    },\n    title: {\n      flex: '0 0 auto',\n    },\n    button: {\n      width: 200,\n      margin: theme.spacing.unit,\n      backgroundColor: '#D81B60',\n      color: 'white',\n    },\n    inline_container: {\n      display: 'inline-flex',\n    },\n    middle: {\n      alignSelf: 'center',\n    },\n    icon: {},\n    rightIcon: {\n      marginLeft: theme.spacing.unit,\n    },\n});\n\nEnhancedTableToolbar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  selected: PropTypes.array.isRequired,\n  cancelOrders: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    menus: state.filterMenus.menus,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    selectItem: (id) => {\n      dispatch({type: 'SELECT_ITEM', id: id})\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps, mapDispatchToProps\n)(withStyles(toolbarStyles)(EnhancedTableToolbar));\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport Paper from '@material-ui/core/Paper'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport { markets } from '../protobufs'\nimport { formatAsset, orderStatusCodeLabel, cancelStatusCodeLabel } from '../utils/utils'\nimport moment from 'moment'\nimport { OS_OPEN, ORDERS_CANCEL_ } from '../store/orders'\nimport EnhancedTableToolbar from './EnhancedTableToolbar'\n\nfunction desc(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction stableSort(array, cmp) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = cmp(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst getSorting = (order, orderBy) =>\n      order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy)\n\nconst formatPrice = (market, val) =>\n      market ? (val ? formatAsset(val, market.quote_asset) : '') : ''\n\nconst formatQty = (market, val) =>\n      market ? (val ? formatAsset(val, market.base_asset) : '') : ''\n\nconst cols = [\n  {\n    id: 'time',\n    align: 'left',\n    label: 'Time',\n    val: o => o.order.timestamp\n  },\n  {\n    id: 'market',\n    align: 'left',\n    label: 'Market',\n    val: o => o.order.market\n  },\n  {\n    id: 'buy',\n    align: 'right',\n    label: 'Buy',\n    val: o => o.order.side == markets.Side.BUY ? o.order.price : null\n  },\n  {\n    id: 'sell',\n    align: 'right',\n    label: 'Sell',\n    val: o => o.order.side == markets.Side.SELL ? o.order.price : null\n  },\n  {\n    id: 'limit',\n    align: 'right',\n    label: 'Limit',\n    val: o => o.order.price\n  },\n  {\n    id: 'filled',\n    align: 'right',\n    label: 'Filled',\n    val: o => 0\n  },\n  {\n    id: 'remaining',\n    align: 'right',\n    label: 'Remaining',\n    val: o => o.order.quantity\n  },\n  {\n    id: 'total',\n    align: 'right',\n    label: 'Total',\n    val: o => o.order.price * o.order.quantity\n  },\n  {\n    id: 'avgfillprice',\n    align: 'right',\n    label: 'Average Price',\n    val: o => null\n  },\n  {\n    id: 'type',\n    align: 'left',\n    label: 'Type',\n    val: o => markets.OrderType.Name(o.order.orderType)\n  },\n  {\n    id: 'status',\n    align: 'left',\n    label: 'Status',\n    val: o => null\n  },\n];\n\nclass EnhancedTableHead extends Component {\n  createSortHandler = property => event => {\n    this.props.onRequestSort(event, property);\n  };\n\n  render() {\n    const { onSelectAllClick, order, orderBy, numSelected, rowCount } = this.props;\n\n    return (\n      <TableHead>\n        <TableRow>\n          {cols.map(col => {\n            return (\n              <TableCell\n                key={col.id}\n                align={col.align}\n                padding=\"dense\"\n                sortDirection={orderBy === col.id ? order : false}\n              >\n                <Tooltip\n                  title=\"Sort\"\n                  placement={col.align == 'right' ? 'bottom-end' : 'bottom-start'}\n                  enterDelay={300}\n                >\n                  <TableSortLabel\n                    active={orderBy === col.id}\n                    direction={order}\n                    onClick={this.createSortHandler(col.id)}\n                  >\n                    {col.label}\n                  </TableSortLabel>\n                </Tooltip>\n              </TableCell>\n            );\n          }, this)}\n          <TableCell padding=\"checkbox\">\n            <Checkbox\n              indeterminate={numSelected > 0 && numSelected < rowCount}\n              checked={numSelected > 0}\n              onChange={onSelectAllClick}\n            />\n          </TableCell>\n        </TableRow>\n      </TableHead>\n    );\n  }\n}\n\nEnhancedTableHead.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.string.isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  table: {\n    minWidth: 800,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n\n});\n\nclass OrdersTable extends Component {\n  state = {\n    order: 'desc',\n    orderBy: 'time',\n    selected: [],\n    data: this.props.orders,\n    page: 0,\n    rowsPerPage: 5,\n  };\n  componentWillReceiveProps(nextProps){\n    if(nextProps.orders !== this.props.orders){\n        this.setState({data:nextProps.orders});\n    }\n  }\n  handleRequestSort = (event, property) => {\n    const orderBy = property;\n    let order = 'desc';\n\n    if (this.state.orderBy === property && this.state.order === 'desc') {\n      order = 'asc';\n    }\n\n    this.setState({ order, orderBy });\n  };\n\n  handleSelectAllClick = event => {\n    if (event.target.checked) {\n      const { data } = this.state;\n      let selected =[], index = 0;\n      for (var i in data) {\n        if (typeof data[i].order !== \"undefined\" ) {\n          if( data[i].order.status != markets.OrderStatusCode.OS_CANCELED && data[i].order.status != markets.OrderStatusCode.OS_FILLED ){\n            selected[index] = data[i].order.clOrdID;\n            index++;\n          }\n        }\n      }\n      this.setState({ selected: selected });\n      return;\n    }\n    this.setState({ selected: [] });\n  };\n\n  handleClick = (event, id) => {\n    const { selected } = this.state;\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    // if order status is filled or canceled\n    if( this.state.data[id].order.status == markets.OrderStatusCode.OS_CANCELED || this.state.data[id].order.status == markets.OrderStatusCode.OS_FILLED )\n      return\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    this.setState({ selected: newSelected });\n  };\n\n  handleChangePage = (event, page) => {\n    this.setState({ page });\n  };\n\n  handleChangeRowsPerPage = event => {\n    this.setState({ rowsPerPage: event.target.value });\n  };\n\n  handleCancelOrders = event => {\n    const { selected } = this.state;\n    const { cancelOrders } = this.props;\n    const { orders } = this.props;\n\n    selected.forEach(clOrdID => {\n      cancelOrders( orders[clOrdID].order );\n    });\n    this.setState({ selected: [] });\n  }\n\n  isSelected = id => this.state.selected.indexOf(id) !== -1;\n\n  getProtoOptionKey = ( option_name, srch_value ) => {\n    let arrOptions = markets[option_name]\n    for (var key in arrOptions ){\n      let value = arrOptions[key];\n      if ( value == srch_value ){\n        return key;\n      }\n    }\n  };\n\n  checkToday = (orderDay) => {\n\n    let day = new Date(orderDay*1000);\n    let today = new Date();\n    return (day.getFullYear() == today.getFullYear() && day.getMonth() == today.getMonth() && day.getDate() == today.getDate()) ? true : false;\n  }\n\n  addOrderToArray = (arr, index, mData) => {\n\n    if (arr[index].timestamp != null) {\n      arr[index].time = mData.timestamp.seconds;\n    }\n    if( typeof mData.cancelStatus !== \"undefined\" ){\n      arr[index].cancelStatus = mData.cancelStatus;\n    }\n  }\n\n  render() {\n    const { classes, marketprops, menus, market } = this.props;\n    const { data, order, orderBy, selected, rowsPerPage, page } = this.state;\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n\n    const Filter = {\n      Open: 0,\n      Active: 1,\n      Today: 2,\n    }\n\n    let index = 0, arrOrders=[];\n    for (var i in data) {\n      if (typeof data[i].order !== \"undefined\") {\n\n        if (menus[Filter.Open].selected == true && menus[Filter.Today].selected == false && menus[Filter.Active].selected == false) {\n\n          if (data[i].order.status && data[i].order.status == OS_OPEN ) {\n            arrOrders[index] = data[i].order;\n            this.addOrderToArray(arrOrders, index, data[i].order)\n            index++;\n          }\n        } else if (menus[Filter.Open].selected == true && menus[Filter.Today].selected == true && menus[Filter.Active].selected == false) {\n          \n          if (data[i].order.status && data[i].order.status == OS_OPEN && data[i].order.timestamp != null && this.checkToday(data[i].order.timestamp.seconds)) {\n            arrOrders[index] = data[i].order;\n            this.addOrderToArray(arrOrders, index, data[i].order)\n            index++;\n          }\n        } else if (menus[Filter.Open].selected == true && menus[Filter.Today].selected == false && menus[Filter.Active].selected == true) {\n\n          if (data[i].order.status && data[i].order.status == OS_OPEN && data[i].order.market && data[i].order.market == market) {\n            arrOrders[index] = data[i].order;\n            this.addOrderToArray(arrOrders, index, data[i].order)\n            index++;\n          }\n        } else if (menus[Filter.Active].selected == true && menus[Filter.Open].selected == false && menus[Filter.Today].selected == false) {\n\n          if (data[i].order.market && data[i].order.market == market ) {\n            arrOrders[index] = data[i].order;\n            this.addOrderToArray(arrOrders, index, data[i].order)\n            index++;\n          }\n        } else if (menus[Filter.Active].selected == true && menus[Filter.Open].selected == false && menus[Filter.Today].selected == true) {\n\n          if (data[i].order.market && data[i].order.market == market && data[i].order.timestamp != null && this.checkToday(data[i].order.timestamp.seconds)) {\n            arrOrders[index] = data[i].order;\n            this.addOrderToArray(arrOrders, index, data[i].order)\n            index++;\n          }\n        } else if (menus[Filter.Active].selected == true && menus[Filter.Open].selected == true && menus[Filter.Today].selected == false) {\n\n          if (data[i].order.market && data[i].order.market == market && data[i].order.status && data[i].order.status == OS_OPEN) {\n            arrOrders[index] = data[i].order;\n            this.addOrderToArray(arrOrders, index, data[i].order)\n            index++;\n          }\n        } else if (menus[Filter.Today].selected == true && menus[Filter.Open].selected == false && menus[Filter.Active].selected == false) {\n\n          if (data[i].order.timestamp != null && this.checkToday(data[i].order.timestamp.seconds) ) {\n            arrOrders[index] = data[i].order;\n            this.addOrderToArray(arrOrders, index, data[i].order)\n            index++;\n          }\n\n        } else if (menus[Filter.Today].selected == true && menus[Filter.Open].selected == false && menus[Filter.Active].selected == true) {\n\n          if (data[i].order.market && data[i].order.market == market && data[i].order.timestamp != null && this.checkToday(data[i].order.timestamp.seconds) ) {\n            arrOrders[index] = data[i].order;\n            this.addOrderToArray(arrOrders, index, data[i].order)\n            index++;\n          }\n        } else if (menus[Filter.Today].selected == true && menus[Filter.Open].selected == true && menus[Filter.Active].selected == true) {\n\n          if (data[i].order.status && data[i].order.status == OS_OPEN && data[i].order.market && data[i].order.market == market && data[i].order.timestamp != null && this.checkToday(data[i].order.timestamp.seconds) ) {\n            arrOrders[index] = data[i].order;\n            this.addOrderToArray(arrOrders, index, data[i].order)\n            index++;\n          }\n        } else {\n          arrOrders[index] = data[i].order;\n          this.addOrderToArray(arrOrders, index, data[i].order)\n          index++;\n        }\n      }\n    }\n\n    return (\n      <Paper className={classes.root}>\n        <EnhancedTableToolbar selected={selected} cancelOrders={this.handleCancelOrders} />\n        <div className={classes.tableWrapper}>\n          <Table className={classes.table} aria-labelledby=\"tableTitle\" padding=\"dense\">\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={this.handleSelectAllClick}\n              onRequestSort={this.handleRequestSort}\n              rowCount={arrOrders.length}\n            />\n            <TableBody>\n              {stableSort(arrOrders, getSorting(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((n, index) => {\n\n                  n.id = n.clOrdID;\n\n                  const isSelected = this.isSelected(n.id);\n\t\t              const market = marketprops[n.market];\n                  const buy = n.side == markets.Side.BUY ? n.quantity : null;\n                  const sell = n.side == markets.Side.SELL ? n.quantity : null;\n                  const total = n.filledCost ? n.filledCost : 0;\n                  const filled = n.filled ? n.filled : 0;\n                  const remaining = n.quantity - n.filled;\n                  const avgfillprice = n.filled == 0 ? 0 : (10** (market? market.base_asset.decimals : 0 ) * n.filledCost / n.filled).toFixed((market? market.base_asset.decimals : 0 ));\n                  const type = this.getProtoOptionKey('OrderType', n.orderType);\n                  let status = n.status ? orderStatusCodeLabel(n.status) : null;\n                  if (n.status == markets.OrderStatusCode.OS_PARTIAL_FILL) {\n                    var percent = (n.filled / n.quantity * 100).toFixed(0);\n                    status = percent + \"%\";\n                  }\n                  if( typeof n.cancelStatus !== \"undefined\" && n.status != markets.OrderStatusCode.OS_CANCELED )\n                  {\n                    let cancelStatus = \" CANCEL \" + cancelStatusCodeLabel( n.cancelStatus.code );\n                    status = status + cancelStatus;\n                  }\n\n                  let date\n                  if(n.timestamp){\n                    date = new Date()\n                    date.setTime(n.timestamp.seconds * 1000)\n                    date = moment(date).format('YYYY-MM-DD HH:mm:ss')\n                  }\n\n                  return (\n                      <TableRow\n                        hover\n                        onClick={event => this.handleClick(event, n.id)}\n                        role=\"checkbox\"\n                        aria-checked={isSelected}\n                        tabIndex={-1}\n                        key={n.id}\n                        selected={isSelected}\n                      >\n                      <TableCell padding=\"dense\">{date}</TableCell>\n                      <TableCell component=\"th\" scope=\"row\" padding=\"dense\">\n                        {n.market}\n                      </TableCell>\n                      <TableCell align=\"right\" padding=\"dense\">{formatQty(market, buy)}</TableCell>\n                      <TableCell align=\"right\" padding=\"dense\">{formatQty(market, sell)}</TableCell>\n                      <TableCell align=\"right\" padding=\"dense\">{formatPrice(market, n.price)}</TableCell>\n                      <TableCell align=\"right\" padding=\"dense\">{formatQty(market, filled)}</TableCell>\n                      <TableCell align=\"right\" padding=\"dense\">{formatQty(market, remaining)}</TableCell>\n                      <TableCell align=\"right\" padding=\"dense\">{formatPrice(market, total)}</TableCell>\n                      <TableCell align=\"right\" padding=\"dense\">{formatPrice(market, avgfillprice)}</TableCell>\n                      <TableCell padding=\"dense\">{type}</TableCell>\n                      <TableCell padding=\"dense\">{status}</TableCell>\n                      <TableCell padding=\"checkbox\">\n                        { n.status == markets.OrderStatusCode.OS_CANCELED || n.status == markets.OrderStatusCode.OS_FILLED || typeof n.cancelStatus !== \"undefined\" ? null :\n                          ( <Checkbox checked={isSelected} /> ) // hide checkbox for hilled and canceled\n                        }\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 49 * emptyRows }} padding=\"dense\">\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </div>\n        <TablePagination\n          component=\"div\"\n          count={arrOrders.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          backIconButtonProps={{\n            'aria-label': 'Previous Page',\n          }}\n          nextIconButtonProps={{\n            'aria-label': 'Next Page',\n          }}\n          onChangePage={this.handleChangePage}\n          onChangeRowsPerPage={this.handleChangeRowsPerPage}\n        />\n      </Paper>\n    );\n  }\n}\n\nOrdersTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n  cancelOrders: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  orders: state.orders,\n  marketprops: state.marketprops,\n  market: state.view.market,\n  menus: state.filterMenus.menus,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  cancelOrders: order => dispatch(ORDERS_CANCEL_(order))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(OrdersTable));\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { Card, CardHeader, Grid } from '@material-ui/core'\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport classNames from 'classnames';\n\n\nimport * as Scroll from 'react-scroll';\nimport { Link, Element , Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll'\n\n\nfunction desc(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction stableSort(array, cmp) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = cmp(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst getSorting = (order, orderBy) =>\n      order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy)\n\nconst formatPrice = (market, val) =>\n      val ? val / Math.pow(10, market.quote_asset.decimals) : ''\n\n\n\nconst styles = theme => ({\n\n  rowSmall: {\n    height: \"auto\",\n  },\n\n  rowBanded:{\n    whiteSpace: 'nowrap',\n    '&:nth-of-type(odd)': {\n    backgroundColor: \"rgb(50,50,50)\",\n     },\n     '&:nth-of-type(even)': {\n     backgroundColor: \"rgb(56,56,56)\",\n      },\n  },\n\n\n  headRow:{\n    backgroundColor: 'rgba(0,0,0,0.6)',\n  },\n\n  rowRed:{\n    color: theme.palette.primary.main,\n  },\n\n  rowGreen:{\n    color: theme.palette.secondary.main,\n  },\n\n\n  rowWhite:{\n    color:\"white\"\n  },\n\n  flex:{\n    display:\"flex\",\n    flexDirection:\"column\"\n  },\n\n  flexFill:{\n    flex:1\n  },\n  tableLayout:{\n    tableLayout:\"fixed\"\n  },\n  marketColumn:{\n    whiteSpace: 'nowrap'\n  },\n\n});\n\n\nclass Section extends Component {\n\n  constructor(props) {\n    super(props);\n    this.scrollToTop = this.scrollToTop.bind(this);\n    this.state = {\n                  order: this.props.order ? this.props.order : 'desc',\n                  orderBy: this.props.orderBy ? this.props.orderBy : 0,\n                }\n    if(this.props.rows)\n      this.state.rows = this.getRowData(this.props.rows)\n    this.clickHandler = () => {}\n    if(this.props.clickHandler)\n      this.clickHandler = this.props.clickHandler\n  }\n\n\n\n  handleRequestSort = (event, property) => {\n    const orderBy = property;\n    let order = \"desc\"\n    if(this.state.orderBy == property && this.state.order == 'desc'){\n      order = 'asc'\n    }\n    this.setState({order, orderBy})\n  }\n\n\n  getRowData(rows){\n    return rows.map((row, index, array) => {\n      return this.props.rowData(row)\n    })\n  }\n\n\n  getRowsDisplay(){\n    let rows\n    rows = stableSort(this.state.rows, getSorting(this.state.order, this.state.orderBy))\n    let last_color = this.props.classes.rowGreen\n\n    let row\n    let previous_row\n    let formated_rows = []\n    let color\n\n    for(var i=rows.length-1;i>=0;i--){\n      row = rows[i]\n      previous_row = i < rows.length - 1  ? rows[i+1] : row\n\n      if(this.props.rowColor){\n        color = this.props.rowColor(row, previous_row, last_color)\n        last_color = color\n      }\n      else\n        color = this.props.classes.rowWhite\n      if(this.props.rowDataFormating)\n        row = this.props.rowDataFormating(row, previous_row)\n      formated_rows.unshift([row, color])\n    }\n\n    return formated_rows\n\n  }\n\n\n\n  componentWillReceiveProps(nextProps){\n\n    //if(this.state.rows.length != nextProps.rows.length){\n      this.setState({rows:this.getRowData(nextProps.rows)})\n    //}\n  }\n\n  componentDidMount(){\n\n    Events.scrollEvent.register('begin', (to, element) => {\n      console.log(\"begin\", arguments)\n    })\n    Events.scrollEvent.register('end', (to, element) => {\n      console.log(\"end\", arguments)\n    })\n\n    scrollSpy.update()\n\n  }\n\n  componentWillUnmount() {\n    Events.scrollEvent.remove('begin')\n    Events.scrollEvent.remove('end')\n  }\n\n  scrollToTop() {\n    scroll.scrollToTop()\n  }\n  scrollToBottom() {\n    scroll.scrollToBottom()\n  }\n  scrollTo() {\n    scroll.scrollTo(100)\n  }\n  scrollMore() {\n    scroll.scrollMore(100)\n  }\n  handleSetActive(to) {\n    console.log(to)\n  }\n\n  keyHack = 0\n\n  render() {\n\n    let rows\n    let row_class\n    let td_class = \"\"\n    rows = this.getRowsDisplay().map((row, index) => {\n\n      row_class = []\n\n      if(this.props.rowSmall)\n        row_class.push(this.props.classes.rowSmall)\n      if(this.props.rowBanded){\n        row_class.push(this.props.classes.rowBanded)\n      }\n\n      this.keyHack += 1\n\n      return (\n        <TableRow key={this.keyHack} hover className={classNames(...row_class)} onClick={event => this.clickHandler(event, row)}>\n        {row[0].map(column => {\n          this.keyHack += 1\n          return <TableCell key={this.keyHack} className={row[1]} style={{padding:\"5px 10px 5px 10px\"}}>{column}</TableCell>\n        })}\n        </TableRow>\n      )\n\n    })\n\n\n    let me = this;\n\n    return (\n      <div className={classNames(\"no-drag\", this.props.classes.flex, this.props.classes.flexFill)} >\n\n      <Table className={this.props.classes.tableLayout}>\n        <TableHead>\n          <TableRow>\n            {this.props.headers.map((header, index) => {\n              return (<TableCell key={header} onClick={(event) => this.handleRequestSort(event, index)} style={{padding:\"5px 10px 5px 10px\"}}>\n\n                      <Tooltip\n                        title=\"Sort\"\n                        enterDelay={300}\n                      >\n                        <TableSortLabel\n                          active={this.state.orderBy === index}\n                          direction={this.state.order}\n                        >\n                          {header}\n                        </TableSortLabel>\n                      </Tooltip>\n              </TableCell>)\n            })}\n          </TableRow>\n        </TableHead>\n\n      </Table>\n\n      <Element name=\"test7\" className={classNames(\"element\", this.props.classes.flexFill)} id=\"containerElement\" style={{\n        position: 'relative',\n        overflowY: 'auto'\n      }}>\n        <Table className={this.props.classes.tableLayout}>\n\n        <TableHead style={{visibility:\"collapse\"}}>\n          <TableRow>\n            {this.props.headers.map(header => {\n              return (<TableCell key={header}>{header}</TableCell>)\n            })}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n\n          {rows}\n\n        </TableBody>\n      </Table>\n      </Element>\n      </div>\n    );\n  }\n}\n\n\nexport default withStyles(styles)(Section)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { Card } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport ScrollTable from './utils/scrollTable'\nimport { formatAsset } from '../utils/utils'\nimport { markets as pb } from '../protobufs'\nimport moment from 'moment'\n\nconst styles = theme => ({\n  rowRed:{\n    color: theme.palette.primary.main,\n  },\n  rowGreen:{\n    color: theme.palette.secondary.main,\n  },\n  flex:{\n    display:\"flex\",\n    flexDirection:\"column\"\n  },\n});\n\nclass Fills extends Component {\n\n  rowColor(row, next_row) {\n    return row[4] == \"SELL\" ? this.classes.rowRed : this.classes.rowGreen\n  }\n\n  rowData(row) {\n    let date = new Date()\n    date.setTime(row.timestamp.seconds * 1000)\n    let market = this.markets[row.market]\n    return [\n      moment(date).format('YYYY-MM-DD HH:mm:ss'),\n      row.market,\n      formatAsset(row.fill.price, market.quote_asset),\n      formatAsset(row.fill.size, market.base_asset),\n      (row.fill.side == pb.Side.BUY ? \"BUY\" : \"SELL\"),\n      row.fill.took ? 'TAKE' : 'PROVIDE',\n      row.orderID\n    ]\n  }\n\n  render() {\n    const { classes, markets, fills } = this.props\n\n    return (\n      <Card style={{height:this.props.height}} className={classes.flex}>\n        <ScrollTable\n          headers={['Time', 'Market', 'Price', 'Size', 'Side', 'Liquidity', 'Order ID']}\n          rows={fills}\n          rowColor={this.rowColor}\n          rowData={this.rowData}\n          rowSmall={true}\n          rowBanded={true}\n          markets={markets}>\n        </ScrollTable>\n      </Card>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  markets: state.marketprops,\n  fills: state.fills,\n})\n\nexport default connect(mapStateToProps)(withStyles(styles)(Fills))\n","import React, { PureComponent } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport compose from 'recompose/compose'\nimport { Card } from '@material-ui/core'\nimport { AutoSizer } from 'react-virtualized'\nimport MuiTable from 'mui-virtualized-table'\nimport { mvpx, mvsz } from '../utils/utils'\nimport { VIEW_POPULATE_TICKET_ } from '../store/view'\nimport { markets } from '../protobufs'\n\nimport 'react-virtualized/styles.css'; // only needs to be imported once\n\nconst styles = theme => ({\n\troot: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n  },\n  cellHovered: {\n    backgroundColor: 'black'\n  },\n  cell: {\n    boxSizing: 'border-box',\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing.unit / 2,\n  }\n})\n\nclass DepthContainer extends PureComponent {\n\n  // returns array of:\n  //   bid: best bid size\n  //   px:  price level\n  //   did: recent trades done at price level\n  //   ask: best offer size\n  //\n  getMicrobook() {\n    if (!this.props.market || !this.props.market.quote || !this.props.market.quote.last) {\n      return []\n    }\n    let q = this.props.market.quote\n    let rows = []\n    if (q.last.val > q.ask.val && q.last.val > q.bid.val) {\n      rows.push({ bid: 0,            px: q.last.val, ask:0,             did: q.lastQtyCum.val })\n    }\n    if (q.ask.val > 0) {\n      rows.push({ bid: 0,            px: q.ask.val,  ask: q.askQty.val, did: q.last.val == q.ask.val ? q.lastQtyCum.val : 0 })\n    }\n    if (q.last.val < q.ask.val && q.last.val > q.bid.val) {\n      rows.push({ bid: 0,            px: q.last.val, ask:0,             did: q.lastQtyCum.val })\n    }\n    if (q.bid.val > 0) {\n      rows.push({ bid: q.bidQty.val, px: q.bid.val,  ask: 0,            did: q.last.val == q.bid.val ? q.lastQtyCum.val : 0 })\n    }\n    if (q.last.val < q.bid.val && q.last.val < q.ask.val) {\n      rows.push({ bid: 0,            px: q.last.val, ask:0,             did: q.lastQtyCum.val })\n    }\n    return rows\n  }\n\n  formatBid = row =>\n    row.bid ? mvsz(this.props.market, row.bid) : ''\n\n  formatPrice = row =>\n    row.px ? mvpx(this.props.market, row.px) : ''\n\n  formatAsk = row =>\n    row.ask ? mvsz(this.props.market, row.ask) : ''\n\n  formatDid = row =>\n    row.did ? mvsz(this.props.market, row.did) : ''\n\n  handleCellClick = (col, row) => {\n    if (!row[col.name]) {\n      // ignore click on empty cells (for now)\n      return\n    }\n    let pick = {\n      market: this.props.market,\n      price: row.px,\n    }\n    if (col.name == 'bid') {\n      // hit the bid leaving no remainng size\n      pick['orderType'] = markets.OrderType.IOC\n      pick['sellQty'] = row.bid\n    }\n    else if (col.name == 'ask') {\n      // lift the ask leaving no remaining size\n      pick['orderType'] = markets.OrderType.IOC\n      pick['buyQty'] = row.ask\n    }\n    this.props.VIEW_POPULATE_TICKET_(pick)\n  }\n\n\trender() {\n\t\tlet { classes } = this.props\n\n\t\treturn (\n      <Card className={classes.root} style={{height:this.props.height}}>\n        <AutoSizer>\n          {({ width, height }) => (\n            <MuiTable\n              classes={{\n                cell: classes.cell,\n                cellHovered: classes.cellHovered\n              }}\n              data={this.getMicrobook()}\n              width={width}\n              maxHeight={height}\n              rowHeight={32}\n              onCellClick={this.handleCellClick}\n              includeHeaders={true}\n              columns={[\n                { name: 'bid', header: 'Bids',   width: 132, cell: this.formatBid },\n                { name: 'px',  header: 'Price', width: 132, cell: this.formatPrice, cellProps: {style:{'fontWeight':'bold', 'textAlign':'center'}} },\n                { name: 'ask', header: 'Asks',   width: 132, cell: this.formatAsk },\n                { name: 'did', header: 'Last',  width: 132, cell: this.formatDid },\n              ]}\n              isCellHovered={\n                (col, row, colHovered, rowHovered) =>\n                  col === colHovered && row === rowHovered && col.name != 'did' && row[col.name]\n              }\n              cellProps={\n                (col, row) =>\n                  ({\n                    style: {'textAlign': 'center'}\n                  })\n              }\n            />\n          )}\n        </AutoSizer>\n      </Card>\n  \t)\n\t}\n}\n\nDepthContainer.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  market: state.markets[state.view.market]\n})\n\nexport default compose(\n\twithStyles(styles),\n\tconnect(mapStateToProps, {\n    VIEW_POPULATE_TICKET_,\n  })\n)(DepthContainer)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Card, CardHeader } from '@material-ui/core'\nimport { withStyles } from '@material-ui/core/styles';\nimport ScrollTable from './utils/scrollTable'\nimport {formatAsset} from '../utils/utils'\nimport moment from 'moment'\nimport Big from 'big.js'\n\nconst styles = theme => ({\n  rowRed:{\n    color: theme.palette.primary.main,\n  },\n  rowGreen:{\n    color: theme.palette.secondary.main,\n  },\n  flex:{\n    display:\"flex\",\n    flexDirection:\"column\"\n  },\n});\n\nclass Trades extends Component {\n  rowData(row){\n    let columns = []\n    let nanoseconds = \"\"\n    if (row.timestamp.nanoseconds) {\n        nanoseconds = \".\" + row.timestamp.nanoseconds.toString()\n    }\n    let seconds = Big(row.timestamp.seconds.toString() + nanoseconds)\n    columns.push(seconds)\n    columns.push(row.price)\n    columns.push(row.size)\n    if (row.taker) { // 0=Side.BUY 1=Side.SELL\n      columns.push('S')\n      // columns.push('@alice') //row.seller)\n      // columns.push('hit')\n      // columns.push('@bob') //row.buyer)\n    }\n    else {\n      columns.push('B')\n      // columns.push('@chuck') //row.buyer)\n      // columns.push('lifted')\n      // columns.push('@dave') //row.seller)\n    }\n    return columns\n  }\n\n  rowColor(row, previous_row, last_color){\n    let price = row[1]\n    let previous_price = previous_row[1]\n    let color\n\n    if(previous_price > price){\n      color = this.classes.rowRed\n    }\n    else if(previous_price < price){\n      color = this.classes.rowGreen\n    }\n    else{\n      color = last_color\n    }\n    return color\n\n  }\n\n  rowDataFormating(row, previous_row){\n    let columns = []\n    let date = new Date()\n    let seconds = row[0]\n    let nanoseconds = seconds.toString().split(\".\")[1]\n    nanoseconds = nanoseconds ? \".\" + nanoseconds : \"\"\n    seconds = seconds.toString().split(\".\")[0]\n\n    date.setTime(seconds)\n    //columns.push(moment(date*1000).format('YYYY-MM-DD HH:mm:ss')+nanoseconds)\n    columns.push(moment(date*1000).format('HH:mm:ss'))\n    columns.push(formatAsset(row[1], this.market.quote_asset))\n    columns.push(formatAsset(row[2], this.market.base_asset))\n    columns.push(row[3])\n    // columns.push(row[4])\n    // columns.push(row[5])\n    // columns.push(row[6])\n    return columns\n  }\n\n  render() {\n    let { classes, market, trades } = this.props\n\n    if (!market) {\n      return <div/>\n    }\n    \n    trades = trades ? trades.toArray().reverse() : []\n\n    return (\n      <Card style={{height:this.props.height}} className={classes.flex}>\n          <CardHeader title=\"Recent Trades\" />\n          <ScrollTable headers={['Time', 'Price', 'Size', 'B/S']/*, 'Taker', '', 'Maker']*/}\n                       rows={trades}\n                       rowColor={this.rowColor}\n                       rowData={this.rowData}\n                       rowSmall={true}\n                       market={market}\n                       rowBanded={true}\n                       rowDataFormating={this.rowDataFormating}/>\n      </Card>\n    )\n  }\n}\n\n// Trades.propTypes = {\n//   market: PropTypes.object.isOptional,\n//   trades: PropTypes.object.isOptional,\n// }\n\nconst mapStateToProps = (state) => ({\n  market: state.marketprops[state.view.market],\n  trades: state.md.trades[state.view.market],\n})\n\nexport default connect(mapStateToProps)(withStyles(styles)(Trades));\n","import React, { Component } from 'react'\nimport { withFormik } from 'formik'\nimport { Button, Grid, InputAdornment, TextField } from '@material-ui/core'\nimport { Typography } from '@material-ui/core'\nimport { withStyles } from '@material-ui/core/styles'\nimport { markets as pb } from '../../protobufs'\nimport classNames from 'classnames';\nimport { ORDERS_NEW_ } from '../../store/orders'\nimport { assetDecimalRegex } from '../utils/utils.js'\nimport * as Yup from 'yup'\nimport { Big } from 'big.js'\nBig.DP = 8\n\nconst styles = theme => ({\n\n  typography:{\n    marginBottom: theme.spacing.unit,\n    marginTop: theme.spacing.unit\n  },\n\n  button:{\n    fontWeight:\" bold\",\n    fontSize:\"16px\",\n    padding:\"10px\"\n  },\n\n  total:{\n    textAlign:\"left\"\n  },\n\n  buttons:{\n    marginTop:\"10px\"\n  },\n\n  hide:{\n    visibility:\"hidden\"\n  },\n\n  disabled_buy:{\n    '&:disabled':{\n        opacity:0.3,\n        backgroundColor:theme.palette.secondary.main,\n        color:theme.palette.secondary.main\n    }\n  },\n\n  disabled_sell:{\n    '&:disabled':{\n        opacity:0.3,\n        backgroundColor:theme.palette.primary.main,\n        color:theme.palette.primary.main\n    }\n  },\n})\n\nclass OrderForm extends Component {\n\n  constructor() {\n    super()\n    this.onFieldChange = this.handleChange.bind(this)\n  }\n\n  handleChange(event, decimals){\n    let regex = assetDecimalRegex(decimals)\n    let value = event.target.value\n\n    if(value[0] == \".\")\n      value = \"0\"+value\n\n    if(value){\n      while(value.length  && !value.match(regex)){\n        value = value.slice(0, -1)\n      }\n\n    }\n    this.props.setFieldValue(event.target.id, value)\n  }\n\n  componentWillReceiveProps(props) {\n    if (this.props.initial.limit != props.initial.limit) {\n      this.props.setFieldValue('limit', props.initial.limit, true)\n    }\n    if (this.props.initial.quantity != props.initial.quantity) {\n      this.props.setFieldValue('quantity', props.initial.quantity, true)\n    }\n    if (this.props.initial.stop != props.initial.stop) {\n      this.props.setFieldValue('stop', props.initial.stop, true)\n    }\n\n    if (this.props.orderType != props.orderType) {\n      if (this.props.values.limit && this.props.values.quantity) {\n        this.props.validateForm()\n      }\n    }\n\n    if (this.props.market != props.market) {\n      this.props.resetForm({\n        limit: '',\n        quantity: '',\n        stop: ''\n      })\n    }\n  }\n\n  render(){\n\n    const {\n      classes,\n      dirty,\n      values,\n      errors,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      setFieldValue,\n      touched,\n      side,\n      market,\n      marketOrder,\n      orderType,\n      available_base,\n      available_quote\n    } = this.props\n\n    Big.NE = -11\n\n    let quote_symbol = market ? market.quote_symbol : \"\"\n    let base_symbol = market ? market.base_symbol : \"\"\n\n    let stop_hide = orderType != pb.OrderType.STOP ? classes.hide  : \"\"\n\n    let available_q = Big(0)\n    let available_b = Big(0)\n    let total = Big(0)\n\n    if(market){\n      available_b = Big(available_base).div(10**market.base_asset.decimals)\n      available_q = Big(available_quote).div(10**market.quote_asset.decimals)\n    }\n\n    let buy_sell_disabled = true\n    if( (!errors.limit && !errors.quantity) && (values.limit && values.quantity)){\n      total = Big(values.limit).times(values.quantity)\n\n       if(pb.Side.BUY == side && total.lt(available_q)){\n         buy_sell_disabled = false\n       }\n       if(pb.Side.SELL == side && Big(values.quantity).lte(available_b)){\n          buy_sell_disabled = false\n       }\n\n    }\n\n    total = total.toString()\n\n    return (\n      <React.Fragment>\n        <form onSubmit={ handleSubmit } autoComplete=\"off\">\n          <Grid container className=\"no-drag\" spacing={8} direction='column' alignItems=\"center\">\n\n            <Grid item xs={12}>\n              <TextField\n                  id=\"available\"\n                  label=\"Available\"\n                  onChange={ handleChange }\n                  value={pb.Side.SELL == side ? available_b.toString() : available_q.toString()}\n                  type=\"text\"\n                  className={ classes.textField }\n                  InputProps={{ endAdornment: <InputAdornment position=\"end\">{ pb.Side.SELL == side ? base_symbol : quote_symbol }</InputAdornment> ,\n                                disableUnderline:true}}\n                  margin=\"dense\"\n                  disabled={true}\n                  fullWidth={true} />\n\n              <TextField\n                  id=\"limit\"\n                  label=\"Limit Price\"\n                  onChange={ (event) => this.onFieldChange(event, market.quote_asset.decimals) }\n                  value={values.limit}\n                  error={ touched.limit && !!errors.limit }\n                  type=\"number\"\n                  className={ classes.textField }\n                  InputProps={{ endAdornment: <InputAdornment position=\"end\">{ quote_symbol }</InputAdornment> }}\n                  margin=\"dense\"\n                  disabled={marketOrder}\n                  fullWidth={true} />\n\n              <TextField\n                  id=\"quantity\"\n                  label=\"Quantity\"\n                  onChange={ (event) => this.onFieldChange(event, market.base_asset.decimals) }\n                  value={values.quantity}\n                  error={ touched.quantity && !!errors.quantity }\n                  type=\"number\"\n                  className={ classes.textField }\n                  InputProps={{ endAdornment: <InputAdornment position=\"end\">{ base_symbol }</InputAdornment> }}\n                  margin=\"dense\"\n                  fullWidth={true} />\n\n              <TextField\n                  id=\"stop\"\n                  label=\"Stop\"\n                  onChange={ (event) => this.onFieldChange(event, market.quote_asset.decimals) }\n                  value={values.stop}\n                  error={ touched.stop && !!errors.stop }\n                  type=\"number\"\n                  className={classNames(classes.textField, stop_hide) }\n                  InputProps={{ endAdornment: <InputAdornment position=\"end\">{ quote_symbol }</InputAdornment> }}\n                  margin=\"dense\"\n                  disabled={orderType != pb.OrderType.STOP}\n                  fullWidth={true}/>\n\n              <TextField\n                  id=\"total\"\n                  label={pb.Side.BUY == side ? \"Total Cost\" : \"Total Recieved\"}\n                  onChange={ handleChange }\n                  value={ total }\n                  type=\"text\"\n                  className={ classes.textField }\n                  InputProps={{ endAdornment: <InputAdornment position=\"end\">{ quote_symbol }</InputAdornment>,\n                                disableUnderline:true }}\n                  margin=\"dense\"\n                  disabled={true}\n                  fullWidth={true} />\n\n              </Grid>\n              </Grid>\n\n              <Grid container className=\"no-drag\" spacing={8} direction='row' alignItems=\"center\">\n\n                <Grid item xs={12}>\n                  <Button\n                      className={pb.Side.SELL == side ? classes.disabled_sell : classes.disabled_buy}\n                      variant=\"contained\"\n                      size=\"large\"\n                      color={pb.Side.SELL == side ? 'primary' : \"secondary\"}\n                      fullWidth={true}\n                      disabled={buy_sell_disabled}\n                      onClick={this.props.submitForm}\n                      id=\"buy\"\n                      >\n                      <Typography className={classNames(classes.textField, classes.button)}>\n                        {pb.Side.SELL == side ? 'SELL' : \"BUY\"}<br/>{base_symbol}\n                      </Typography>\n                  </Button>\n                </Grid>\n\n          </Grid>\n        </form>\n      </React.Fragment>\n    )\n  }\n}\n\nconst formik = {\n  mapPropsToValues: props => props.initial,\n\n  validationSchema: ({market, marketOrder, orderType}) => {\n\n    let limit = Yup.number()\n      .typeError('Enter a number')\n      .positive('Enter a positive number')\n      .min(Big(1)\n      .div(Big(10**market.quote_asset.decimals))\n      .toFixed(market.quote_asset.decimals),\n      'Enter a number greater than ${min}')\n\n    let stop = Yup.number()\n      .typeError('Enter a number')\n      .positive('Enter a positive number')\n      .min(Big(1)\n      .div(Big(10**market.quote_asset.decimals))\n      .toFixed(market.quote_asset.decimals),\n      'Enter a number greater than ${min}')\n\n    if(!marketOrder){\n      limit = limit.required()\n    }\n\n    if(orderType == pb.OrderType.STOP){\n      stop = stop.required()\n    }\n\n    let schema = Yup.object().shape({\n      limit: limit,\n\n      quantity: Yup.number()\n        .required('Field required!')\n        .typeError('Enter a number')\n        .min(Big(1)\n        .div(Big(10**market.base_asset.decimals))\n        .toFixed(market.base_asset.decimals),\n        'Enter a number greater than ${min}'),\n\n      stop: stop,\n    })\n\n    return schema\n  },\n\n  handleSubmit: (values, { resetForm, props }) => {\n    let market = props.market\n    let limit = Math.round(values.limit * 10**market.quote_asset.decimals)\n    let quantity = Math.round(values.quantity * 10**market.base_asset.decimals)\n    let stop = Math.round(values.stop * 10 ** market.quote_asset.decimals)\n    let marketOrder = props.marketOrder\n\n    limit = !marketOrder ? limit : null\n\n    if(props.orderType != pb.OrderType.STOP)\n        stop = null\n\n    props.dispatch(\n      ORDERS_NEW_(\n        props.session.userID,\n        props.session.profileID,\n        props.session.pocketID,\n        props.market.symbol,\n        props.side,\n        props.orderType,\n        limit,\n        quantity,\n        stop\n      )\n    )\n    resetForm({limit:'', quantity:'', stop:''})\n  },\n\n  displayName: 'BasicForm', // helps with React DevTools\n}\n\nexport default withStyles(styles)(withFormik(formik)(OrderForm))\n","\n\n\n\nexport const assetDecimalRegex =  (decimals) => {\n\n  let regex = \"^[0-9]+\\\\.?\"\n\n  for(var i=0; i < decimals; i++){\n    regex = regex + \"[0-9]?\"\n  }\n  regex = regex + \"$\"\n  return regex\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { withStyles } from \"@material-ui/core/styles\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport Menu from \"@material-ui/core/Menu\"\nimport { markets } from '../../protobufs'\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nconst OrderType = markets.OrderType\n\nconst styles = theme => ({\n  root: {\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper,\n  },\n  icon:{\n    fill: \"white\"\n  },\n  listItemText: {\n    padding: 0\n  },\n  noPadding:{\n    paddingLeft: 0,\n    paddingRight: 0\n  }\n})\n\nconst options = [\n  { orderType: markets.OrderType.GTC, code: 'GTC', description: \"Good 'til Canceled\" },\n  { orderType: markets.OrderType.AON, code: 'AON', description: \"All or Nothing\" },\n  { orderType: markets.OrderType.IOC, code: 'IOC', description: \"Immediate or Cancel\" },\n  { orderType: markets.OrderType.FOK, code: 'FOK', description: \"Fill or Kill\" },\n  { orderType: markets.OrderType.STOP, code: 'STOP', description: \"Stop Limit\" },\n]\n\nclass OrderTypeSelector extends React.Component {\n  state = {\n    anchorEl: null,\n    orderType: OrderType.GTC,\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({ orderType: nextProps.orderType })\n  }\n\n  handleClickListItem = event => {\n    this.setState({ anchorEl: event.currentTarget })\n  }\n\n  handleMenuItemClick = (event, orderType) => {\n    this.setState({ orderType: orderType, anchorEl: null })\n    this.props.onChange(orderType)\n  }\n\n  handleClose = () => {\n    this.setState({ anchorEl: null })\n  }\n\n  render() {\n    const { classes } = this.props\n    const { anchorEl, orderType } = this.state\n\n    return (\n      <div className={classes.root}>\n        <List component=\"nav\">\n          <ListItem\n            button\n            aria-haspopup=\"true\"\n            aria-controls=\"lock-menu\"\n            aria-label=\"Order Type\"\n            onClick={this.handleClickListItem}\n            className={classes.noPadding}\n          >\n            <ListItemText\n              className={classes.listItemText}\n              primary={options[orderType].code + \" Order\"}\n              secondary={options[orderType].description}\n            />\n            <MoreVertIcon className={classes.icon}/>\n          </ListItem>\n        </List>\n\n        <Menu\n          id=\"lock-menu\"\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={this.handleClose}\n        >\n          {options.map((option, index) => (\n            <MenuItem\n              key={option}\n              selected={index === orderType}\n              onClick={event => this.handleMenuItemClick(event, index)}\n              className={classes.itemText}\n            >\n              {option.code + ' - ' + option.description}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    )\n  }\n}\n\nOrderTypeSelector.propTypes = {\n  classes: PropTypes.object.isRequired,\n  orderType: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(OrderTypeSelector);\n","import React, { PureComponent } from 'react'\nimport { Card, CardHeader, CardContent } from '@material-ui/core'\nimport { Grid } from '@material-ui/core'\nimport { FormGroup } from '@material-ui/core'\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux'\nimport { markets as pb } from '../../protobufs'\nimport EnhancedOrderForm from './EnhancedForm'\nimport OrderTypeSelector from './OrderTypeSelector'\nimport PropTypes from 'prop-types';\nimport compose from 'recompose/compose'\nimport { pv2f, sv2f } from '../../utils/utils'\n\nconst styles = theme => ({\n  root: {\n    height: '100%',\n  },\n  group:{\n    marginRight: \"24px\",\n    paddingLeft: \"16px\",\n  },\n  noPadding:{\n    paddingLeft:\"0px\"\n  }\n})\n\nconst blank = () => ({\n  limit: '',\n  quantity: '',\n  stop: ''\n})\n\nclass OrderFormContainer extends PureComponent {\n  constructor(props) {\n    super()\n    this.state = {\n      pick: props.pick,\n      orderType: pb.OrderType.GTC,\n      buy: blank(),\n      sell: blank()\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.pick === null || props.pick === state.pick) {\n      return null\n    }\n\n    let newState = {\n      pick: props.pick,\n      orderType: props.pick.orderType,\n      buy: blank(),\n      sell: blank(),\n    }\n\n    if (props.pick.buy) {\n      if (props.pick.buy.px) {\n        newState.buy.limit = pv2f(props.pick.buy.px, props.pick.market)\n      }\n      if (props.pick.buy.qty) {\n        newState.buy.quantity = sv2f(props.pick.buy.qty, props.pick.market)\n      }\n    }\n\n    if (props.pick.sell) {\n      if (props.pick.sell.px) {\n        newState.sell.limit = pv2f(props.pick.sell.px, props.pick.market)\n      }\n      if (props.pick.sell.qty) {\n        newState.sell.quantity = sv2f(props.pick.sell.qty, props.pick.market)\n      }\n    }\n\n    return newState\n  }\n\n  handleOrderTypeChange = (orderType) => {\n    this.setState({ orderType })\n  }\n\n  render() {\n    const { classes, market, wallets } = this.props\n\n    let base_symbol = market ? market.base_symbol : \"\"\n    let quote_symbol = market ? market.quote_symbol : \"\"\n\n    let available_base = wallets.getIn([base_symbol, 'available'], 0)\n    let available_quote = wallets.getIn([quote_symbol, 'available'], 0)\n\n    return (\n      <Card className={classes.root}>\n        <FormGroup className={classes.group}>\n          <Grid container spacing={24} direction=\"row\">\n            <Grid item sm={6}>\n              <CardHeader\n                className={classes.noPadding}\n                title=\"Order Ticket\" />\n            </Grid>\n            <Grid item sm={6} className=\"no-drag\">\n              <OrderTypeSelector\n                orderType={this.state.orderType}\n                onChange={this.handleOrderTypeChange}/>\n            </Grid>\n          </Grid>\n        </FormGroup>\n\n        <CardContent style={{paddingTop: 0}}>\n            <Grid container className=\"no-drag\" direction=\"row\" spacing={24} alignItems=\"center\">\n\n              <Grid item xs={6}>\n                <EnhancedOrderForm\n                  session={this.props.session}\n                  market={market}\n                  dispatch={this.props.dispatch}\n                  initial={this.state.buy}\n                  side={pb.Side.BUY}\n                  orderType={this.state.orderType}\n                  marketOrder={null}\n                  available_base={available_base}\n                  available_quote={available_quote}/>\n              </Grid>\n\n              <Grid item xs={6}>\n                <EnhancedOrderForm\n                  session={this.props.session}\n                  market={market}\n                  dispatch={this.props.dispatch}\n                  initial={this.state.sell}\n                  side={pb.Side.SELL}\n                  orderType={this.state.orderType}\n                  marketOrder={null}\n                  available_base={available_base}\n                  available_quote={available_quote} />\n              </Grid>\n            </Grid>\n\n        </CardContent>\n      </Card>\n    )\n  }\n}\n\nOrderFormContainer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  session: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  session: state.session,\n  market: state.marketprops[state.view.market],\n  wallets: state.wallets,\n  pick: state.view.pick,\n})\n\nexport default compose(\n  withStyles(styles),\n  connect(mapStateToProps)\n)(OrderFormContainer)\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles'\n\nconst styles = theme => ({\n  card: {\n    display: 'flex',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    flex: '1 0 auto',\n  },\n  controls: {\n    display: 'flex',\n    alignItems: 'center',\n    paddingLeft: theme.spacing.unit,\n    paddingBottom: theme.spacing.unit,\n  },\n  playIcon: {\n    height: 38,\n    width: 38,\n  },\n  bullish: {\n    color: theme.palette.secondary.main\n  },\n  bearish: {\n    color: theme.palette.primary.main\n  }\n});\n\nclass Indicator extends PureComponent {\n  state = {\n    open: false\n  }\n\n  handleClick = () => {\n    this.setState(state => ({\n      open: !state.open\n    }))\n  }\n\n  handleClose = () => {\n    this.setState({ open: false })\n  }\n\n  handleOpen = () => {\n    this.setState({ open: true })\n  }\n\n  render() {\n    const { classes, theme, label, fields, actions } = this.props;\n    const { open } = this.state\n\n    return (\n      <Card className={classes.card}>\n        <div className={classes.details}>\n          <CardContent className={classes.content}>\n            <Typography component=\"h3\">{ label }</Typography>\n            {\n              fields.map(field =>\n                <Typography key={field} component=\"h2\">{field()}</Typography>)\n            }\n          </CardContent>\n          <div>\n          {actions.map(action =>\n            <Button className={classes[action.color]}\n              key={action.label}\n              size=\"small\"\n              variant=\"text\"\n              onClick={action.onClick}\n            >\n              {action.label}\n            </Button>\n          )}\n          </div>\n        </div>\n      </Card>\n    )\n  }\n}\n\nIndicator.propTypes = {\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired,\n  market: PropTypes.object.isRequired,\n  label: PropTypes.string.isRequired,\n  fields: PropTypes.array.isRequired,\n  actions: PropTypes.array.isRequired,\n}\n\nexport default withStyles(styles, { withTheme: true })(Indicator)\n","import React, { Component } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport compose from 'recompose/compose'\nimport { v_, add, div, mvpx, mfpx, mfsz } from '../utils/utils'\nimport { VIEW_POPULATE_TICKET_ } from '../store/view'\nimport Indicator from './Indicator'\nimport { markets } from '../protobufs'\n\nconst styles = theme => ({\n\troot: {\n  },\n})\n\nclass QuickBar extends Component {\n  render() {\n    if (this.props.market === null) {\n      return <div/>\n    }\n\n    let { classes, market, VIEW_POPULATE_TICKET_ } = this.props\n\n    let pxspan = px =>\n      px ? (<span><b>{px}</b>&nbsp;{market.quote_asset.code}</span>) : (<span>&nbsp;</span>)\n\n\t\treturn (\n      <Grid container direction=\"row\" spacing={0} className={classes.root}>\n        <Grid item sm={4}>\n          <Indicator\n            market={market}\n            label=\"Bid\"\n            fields={[\n              () => pxspan(mfpx(market, 'bid')),\n              () => mfsz(market, 'bidQty') || '-',\n            ]}\n            actions={[{\n              label: \"Hit\",\n              color: \"bearish\",\n              onClick: () =>\n                VIEW_POPULATE_TICKET_({\n                  market: market,\n                  orderType: markets.OrderType.IOC,\n                  sell: {\n                    px: market.quote.bid.val,\n                    qty: market.quote.bidQty.val,\n                  }\n                })\n            },{\n              label: \"Improve\",\n              color: \"bullish\",\n              onClick: () =>\n                VIEW_POPULATE_TICKET_({\n                  market: market,\n                  orderType: markets.OrderType.GTC,\n                  buy: {\n                    px: market.quote.bid.val + 1,\n                  }\n                })\n            }]}\n          />\n        </Grid>\n\n        <Grid item sm={4}>\n          <Indicator\n            market={market}\n            label=\"Mid\"\n            fields={[\n              () => pxspan(mvpx(market, div(add(v_(market.quote.bid), v_(market.quote.ask)), 2))),\n              () => '-'\n            ]}\n            actions={[{\n              label: \"Buy\",\n              color: \"bullish\",\n              onClick: () =>\n                VIEW_POPULATE_TICKET_({\n                  market: market,\n                  orderType: markets.OrderType.GTC,\n                  buy: {\n                    px: div(add(v_(market.quote.bid), v_(market.quote.ask)), 2).toFixed(0)\n                  },\n                })\n            },{\n              label: \"Sell\",\n              color: \"bearish\",\n              onClick: () =>\n                VIEW_POPULATE_TICKET_({\n                  market: market,\n                  orderType: markets.OrderType.GTC,\n                  sell: {\n                    px: div(add(v_(market.quote.bid), v_(market.quote.ask)), 2).toFixed(0)\n                  }\n                })\n            }]}\n          />\n        </Grid>\n\n        <Grid item sm={4}>\n          <Indicator\n            market={market}\n            label=\"Ask\"\n            fields={[\n              () => pxspan(mfpx(market, 'ask')),\n              () => mfsz(market, 'askQty') || '-',\n            ]}\n            actions={[{\n              label: \"Improve\",\n              color: \"bearish\",\n              onClick: () =>\n                VIEW_POPULATE_TICKET_({\n                  market: market,\n                  orderType: markets.OrderType.GTC,\n                  sell: {\n                    px: market.quote.ask.val - 1,\n                  }\n                })\n            },{\n              label: \"Lift\",\n              color: \"bullish\",\n              onClick: () =>\n                VIEW_POPULATE_TICKET_({\n                  market: market,\n                  orderType: markets.OrderType.IOC,\n                  buy: {\n                    px: market.quote.ask.val,\n                    qty: market.quote.askQty.val,\n                  }\n                })\n            }]}\n          />\n        </Grid>\n      </Grid>\n  \t)\n  \t}\n}\n\nQuickBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  VIEW_POPULATE_TICKET_: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  market: state.markets[state.view.market] || null\n})\n\nexport default compose(\n\twithStyles(styles, { withTheme: true }),\n\tconnect(mapStateToProps, {\n    VIEW_POPULATE_TICKET_,\n  })\n)(QuickBar)\n","import PropTypes from 'prop-types'\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport ScrollTable from './utils/scrollTable'\nimport { VIEW_SET_MARKET_ } from '../store/view'\nimport { sub, div, mfv, mfpx, mfsz } from '../utils/utils'\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  marketColumn:{\n    whiteSpace: 'nowrap',\n  },\n});\n\nclass MarketList extends Component {\n\n  rowData = row => {\n    let columns = []\n    if (this.props.markets) {\n      let m = this.props.markets[row]\n\n      var percent = (100 * div(Math.abs(sub(mfv(m, 'last'), mfv(m, 'closePrior'))), mfv(m, 'closePrior'))).toFixed(2) + \"%\"\n      let up = sub(mfv(m, 'last'), mfv(m, 'closePrior')) > 0\n\n      percent = up ? \"+\" + percent : \"-\" + percent;\n      percent = percent === \"-0.00%\" ? \"\" : percent;\n\n      columns.push(m.base_symbol)\n      columns.push(mfpx(m, 'last'))\n      columns.push(m.quote_symbol)\n      columns.push({ percent, 'rank': up})\n      columns.push(mfsz(m, 'volume'))\n    }\n    return columns\n  }\n\n  handleMarketClick = (event, row) =>{\n    this.props.VIEW_SET_MARKET_(row[0][0] + \"|\" + row[0][2])\n  }\n\n  rowDataFormating = (row, previous_row) => {\n    let columns = [...row]\n    columns[3] = <div style={row[3].rank ? {color:'green'} : {color: 'red'}}> {row[3].percent} {row[3].percent.length > 0? (<i className={row[3].rank ? 'fa fa-arrow-up' : 'fa fa-arrow-down'}></i>) : \"\"} </div>;\n\n    return columns\n  }\n\n  render() {\n    return (\n      <ScrollTable\n        headers={ ['Market', 'Last', 'Vs.' ,'Change', 'Volume' ] }\n        rows={ Object.keys(this.props.markets) }\n        rowData={ this.rowData }\n        marketsClass= { this.props.classes.marketColumn }\n        markets={ this.props.markets }\n        clickHandler={ this.handleMarketClick }\n        dispatch={ this.props.dispatch }\n        rowBanded={true}\n        firstHide={true}\n        rowDataFormating={this.rowDataFormating}>\n      </ScrollTable>\n    )\n  }\n}\n\nMarketList.propTypes = {\n  markets: PropTypes.object.isRequired,\n  VIEW_SET_MARKET_: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  markets: state.markets,\n  view: state.view\n})\n\nexport default connect(mapStateToProps, {\n  VIEW_SET_MARKET_\n})(withStyles(styles)(MarketList))\n","import React, { Component } from 'react'\nimport { Card, CardHeader } from '@material-ui/core'\nimport MarketList from './MarketList'\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  rowRed:{\n    color: theme.palette.primary.main,\n  },\n\n  rowGreen:{\n    color: theme.palette.secondary.main,\n  },\n\n  flex:{\n    display:\"flex\",\n    flexDirection:\"column\"\n  },\n\n});\n\nclass Markets extends Component {\n  render() {\n    return (\n      <Card style={{height:this.props.height}} className={this.props.classes.flex}>\n        <CardHeader title=\"DNX Markets\" />\n\t      <MarketList />\n      </Card>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Markets))\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport {Wrapper} from '../../containers/App'\n\n\n\nclass WrapperTab extends React.Component {\n  render() {\n      var that = this;\n      var style = {}\n      if(this.props.hide){\n        style.display = \"none\"\n      }\n      var newChildren = React.Children.map(this.props.children, function(child) {\n          return React.cloneElement(child, { width: that.props.style.width,\n              height: that.props.style.height})\n      });\n\n      return (\n          <div style={style}>\n              {newChildren}\n          </div>\n      );\n  }\n}\n\nWrapperTab.propTypes = {\n  hide: PropTypes.bool.isRequired,\n  children: PropTypes.object.isRequired,\n}\n\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n}\n\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n\n  },\n  c:{\n    backgroundColor: \"#212a2f\"\n  }\n});\n\nclass SimpleTabs extends React.Component {\n  state = {\n    value: 0,\n  };\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { classes, components, labels, height, width } = this.props;\n    const { value } = this.state;\n\n    const style = {}\n    style.width = width\n    style.height = Number(height.slice(0,height.search(\"px\"))) - 50\n    style.height = style.height + \"px\"\n\n    let tab_labels = labels.map(label => {\n        return <Tab key={label} label={label} />\n    })\n\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\" className={classes.c}>\n          <Tabs value={value} onChange={this.handleChange}>\n            {tab_labels}\n          </Tabs>\n        </AppBar>\n\n\n        {components.map((element, i) => {\n          return (<WrapperTab key={'WrapperTab-' + i} style={style} hide={i!=value}>{element}</WrapperTab>)\n        })}\n\n\n      </div>\n    );\n  }\n}\n\nSimpleTabs.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleTabs);\n","import React, { Component } from 'react'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport { connect } from 'react-redux'\nimport { Responsive, WidthProvider } from 'react-grid-layout'\n\nimport ActiveMarketSummary from '../components/ActiveMarketSummary';\nimport Pocket from '../components/Pocket'\nimport Orders from '../components/Orders'\nimport Fills from '../components/Fills'\nimport Depth from '../components/Depth'\nimport Trades from '../components/Trades'\nimport OrderForm from '../components/order/OrderForm'\nimport QuickBar from '../components/QuickBar'\nimport Markets from '../components/Markets'\nimport TabComponent from '../components/utils/TabComponent'\n\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\nimport './App.css'\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#f34d2f'\n    },\n    secondary: {\n      main: '#4CAF50'\n    },\n    type: 'dark',\n  },\n  // typography: {\n  //   fontSize: 24\n  // }\n})\n\nexport class Wrapper extends Component {\n    render() {\n        var that = this;\n        var newChildren = React.Children.map(this.props.children, function(child) {\n            return React.cloneElement(child, { width: that.props.style.width,\n                height: that.props.style.height})\n        });\n\n        return (\n            <div {...this.props}>\n                {newChildren}\n            </div>\n        );\n    }\n}\n\nconst ResponsiveGridLayout = WidthProvider(Responsive)\n\nclass App extends Component {\n\n  render() {\n    let layout = [ //     x     y     width height\n      {i: 'markets',      x:0,  y:0,  w:7,  h:13 },\n      {i: 'market',       x:7,  y:0,  w:17, h:4  },\n      {i: 'pocket',       x:0,  y:8,  w:7,  h:9  },\n      {i: 'quickbar',     x:7,  y:4,  w:9,  h:4  },\n      {i: 'order-form',   x:7,  y:8,  w:9,  h:14 },\n      {i: 'depth',        x:17, y:4,  w:8,  h:4  },\n      {i: 'trades',       x:17, y:8,  w:8,  h:14 },\n      {i: 'orders-fills', x:0,  y:14, w:24, h:16 },\n    ]\n\n    let fillComponent = <Fills key=\"fills\"/>\n    let orderComponent = <Orders key=\"orders\"/>\n    let tabComponents = [orderComponent, fillComponent]\n\n    return (\n      <MuiThemeProvider theme={darkTheme}>\n        <div className=\"App\">\n          <ResponsiveGridLayout className=\"layout\" layouts={{lg:layout}}\n              breakpoints={{lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0}}\n              rowHeight={24}\n              cols={{lg: 24, md: 20, sm: 12, xs: 8, xxs: 4}}\n              draggableCancel='.no-drag'>\n\n            <Wrapper key=\"market\"><ActiveMarketSummary /></Wrapper>\n            <Wrapper key=\"markets\"><Markets /></Wrapper>\n            <Wrapper key=\"pocket\"><Pocket /></Wrapper>\n            <Wrapper key=\"depth\"><Depth /></Wrapper>\n            <Wrapper key=\"trades\"><Trades /></Wrapper>\n            <Wrapper key=\"quickbar\"><QuickBar /></Wrapper>\n            <div key=\"order-form\"><OrderForm /></div>\n            <Wrapper key=\"orders-fills\"><TabComponent components={tabComponents} labels={[\"Orders\", \"Fills\"]}/></Wrapper>\n          </ResponsiveGridLayout>\n        </div>\n      </MuiThemeProvider>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n})\n\nexport default connect(mapStateToProps, {\n})(App)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Provider } from 'react-redux'\nimport App from './App'\n\nconst Root = ({ store }) => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nRoot.propTypes = {\n  store: PropTypes.object.isRequired,\n}\n\nexport default Root\n","import { ofType } from 'redux-observable'\nimport { catchError, take, combineLatest, map, mergeMap, filter } from 'rxjs/operators'\nimport { of } from 'rxjs'\nimport { ajax } from 'rxjs/ajax'\nimport { MQTT_CONNECTED, MQTT_RX, MQTT_SUBSCRIBE_ } from './mqtt'\nimport { markets as market } from '../protobufs'\nimport { decodeProtobuf } from '../utils/utils'\nimport { SESSION_FETCHED } from './session';\n\n// action types\nexport const MARKETS_FETCH = 'MARKETS:FETCH'\nexport const MARKETS_FETCHED = 'MARKETS:FETCHED'\nexport const MARKETS_QUOTE_FETCH = \"MARKETS:QUOTE_FETCH\"\nexport const MARKETS_QUOTE_FETCH_ERROR = \"MARKETS:QUOTE_FETCH_ERROR\"\nexport const MARKETS_QUOTE = 'MARKETS:QUOTE'\n\n\n// action creators\nexport const marketsFetch = () =>\n  ({ type: MARKETS_FETCH })\nexport const marketsFetched = markets =>\n  ({ type: MARKETS_FETCHED, markets })\nexport const MARKETS_QUOTE_FETCH_ = symbol =>\n  ({ type: MARKETS_QUOTE_FETCH, symbol })\nexport const MARKETS_QUOTE_FETCH_ERROR_ = error =>\n  ({ type: MARKETS_QUOTE_FETCH_ERROR, error })\nexport const MARKETS_QUOTE_ = quote =>\n  ({ type: MARKETS_QUOTE, quote })\n\n\n// reducer\nexport const markets = (state = {}, action) => {\n  switch (action.type) {\n  default:\n    return state\n  case MARKETS_FETCHED:\n    var newState = {}\n    action.markets.map(o =>\n\t\t  newState[o.symbol] = {\n\t\t\t  ...o,\n\t\t\t  quote: {}\n      }\n    )\n    return newState\n  case MARKETS_QUOTE:\n    return {\n      ...state,\n      [action.quote.symbol]: {\n\t      ...state[action.quote.symbol],\n\t      quote: action.quote\n      }\n    }\n  }\n}\n\n// epics\nexport const epics = [\n\n  // fetch markets\n  //\n  action$ => action$.pipe(\n    ofType(SESSION_FETCHED),\n    filter(action => action.session.isAuthorized),\n    take(1),\n    mergeMap(() =>\n\t    ajax.getJSON('/api/markets/').pipe(\n\t      map(response => marketsFetched(response))))),\n\n  // subscribe to market quotes\n  //\n  (action$, state$) => action$.pipe(\n    combineLatest(\n      action$.pipe(\n        ofType(MARKETS_FETCHED),\n\t\t\t  take(1)),\n\t\t  action$.pipe(\n        ofType(MQTT_CONNECTED),\n\t\t\t  take(1))),\n    take(1),\n    mergeMap(() =>\n\t    Object.keys(state$.value.markets).map(subject =>\n\t\t\t\tMQTT_SUBSCRIBE_(`markets/${subject}`)))),\n\n  // handle market quotes\n  //\n  action$ => action$.pipe(\n    ofType(MQTT_RX),\n    filter(action =>\n\t    action.topic[0] == 'markets'),\n    map(action =>\n      MARKETS_QUOTE_(market.Summary.decode(action.message)))),\n\n  // dispatch initial fetch of market quotes\n  //\n  action$ => action$.pipe(\n    ofType(MARKETS_FETCHED),\n    mergeMap(action =>\n\t     action.markets.map(m =>\n\t\t\t\tMARKETS_QUOTE_FETCH_(m.symbol)))),\n\n  // fetch a market quote\n  //\n  action$ => action$.pipe(\n    ofType(MARKETS_QUOTE_FETCH),\n    mergeMap(action =>\n\t     ajax.getJSON(`/api/md/daily?market=${action.symbol}`).pipe(\n\t       map(response =>\n\t\t   MARKETS_QUOTE_(decodeProtobuf(market.Summary, response))),\n\t       catchError(error =>\n\t\t\t  of(MARKETS_QUOTE_FETCH_ERROR_(error)))))),\n\n]\n","import { markets } from '../protobufs'\nimport { ofType } from 'redux-observable'\nimport { map, mergeMap, take, filter } from 'rxjs/operators'\nimport { ajax } from 'rxjs/ajax'\nimport { ORDERS_RX_FILL } from './orders'\nimport { decodeProtobuf } from '../utils/utils'\nimport { SESSION_FETCHED } from './session'\n\n// action types\n//\nexport const FILLS_FETCHED = \"FILLS:FETCHED\"\n\n// action constructors\n//\nexport const FILLS_FETCHED_ = events =>\n  ({type: FILLS_FETCHED, events})\n\nexport const reduce = (state = [], action) => {\n  switch (action.type) {\n  default:\n    return state\n  case ORDERS_RX_FILL:\n    return [\n      new markets.FillEvent({\n        timestamp: action.fill.event.timestamp,\n        market: action.fill.event.market,\n        orderID: action.fill.orderID,\n        clOrdID: action.fill.clOrdID,\n        fill: action.fill.event.fill\n      }),\n      ...state\n    ]\n  case FILLS_FETCHED:\n    // TODO: Do not overwrite new fills received while fetching history.\n    if (state.length) {\n      console.error('new fills arrived while waiting for fills to be fetched')\n    }\n    return action.events.fills\n  }\n}\n\nexport const epics = [\n\n  action$ => action$.pipe(\n    ofType(SESSION_FETCHED),\n    filter(action => action.session.isAuthorized),\n    take(1),\n    mergeMap(() =>\n      ajax.getJSON(\"/api/fills/\").pipe(\n        map(response =>\n          FILLS_FETCHED_(decodeProtobuf(markets.FillEventList, response)))))),\n\n]\n","const initState = {\n  menus: [\n    {id: '1', title: 'Open', selected: false},\n    {id: '2', title: 'Active', selected: false},\n    {id: '3', title: 'Today', selected: false},\n  ]\n}\n\nexport const filterMenus = (state = initState, action) => {\n\n  if (action.type == \"SELECT_ITEM\") {\n    \n    let newStatus = state.menus.map(menu => {\n      \n      if (menu.id == action.id) {\n        menu.selected = !menu.selected;\n      }\n\n      return menu\n    })\n    return Object.assign({menus: newStatus})\n  }\n\n  return state;\n}\n\n","import { markets as pb } from '../protobufs'\nimport { ofType } from 'redux-observable'\nimport { map, mergeMap, filter, take } from 'rxjs/operators'\nimport { MQTT_CONNECTED, MQTT_RX, MQTT_SUBSCRIBE_ } from './mqtt'\nimport { ajax } from 'rxjs/ajax'\nimport {decodeProtobuf} from '../utils/utils'\nimport { SESSION_FETCHED } from './session';\nimport { Map } from 'immutable'\n\n// action types\n//\nexport const WALLETS_FETCHED = 'WALLETS:FETCHED'\nexport const WALLETS_POSITION_CHANGE = \"WALLETS:POSITION_CHANGE\"\n\n// action creators\n//\nexport const WALLETS_FETCHED_ = pocket =>\n  ({ type: WALLETS_FETCHED, pocket })\nexport const WALLETS_POSITION_CHANGE_ = (asset, position) =>\n  ({ type: WALLETS_POSITION_CHANGE, asset, position })\n\n// reducer\n//\n\nconst zero = x => x ? x : 0\nconst bake = position => (\n  { \n    available: zero(position.available), \n    open: zero(position.open), \n    pending: zero(position.pending)\n  }\n)\n\nexport const reduce = (state = Map(), action) => {\n  switch (action.type) {\n  default:\n    return state\n  case WALLETS_FETCHED:\n    return action.pocket.wallets.reduce((acc, w) => acc.set(w.asset, bake(w.position)), state)\n  case WALLETS_POSITION_CHANGE:\n    return state.set(action.asset, {...pb.Position.toObject(action.position)})\n  }\n}\n\n// epics\n//\nexport const epics = [\n\n  // Fetch initial pocket positions.\n  //\n  action$ => action$.pipe(\n    ofType(SESSION_FETCHED),\n    filter(action => action.session.isAuthorized),\n    take(1),\n    mergeMap(action =>\n\t    ajax.getJSON('/api/pockets/').pipe(\n        map(response =>\n          WALLETS_FETCHED_(decodeProtobuf(pb.Pocket, response)))))),\n  \n  // subscribe to position changes\n  //\n  (action$, state$) => action$.pipe(\n    ofType(MQTT_CONNECTED),\n    map(() => MQTT_SUBSCRIBE_(`position/${state$.value.session.pocketID}/+`))),\n\n  // handle position update\n  //\n  action$ => action$.pipe(\n    ofType(MQTT_RX),\n    filter(action =>\n\t   action.topic[0] == 'position'),\n    map(action =>\n\t    WALLETS_POSITION_CHANGE_(action.topic[2], pb.Position.decode(action.message)))),\n\n]\n","import { combineReducers } from 'redux'\nimport { marketprops } from './marketprops'\nimport { markets } from './markets'\nimport { reduce as mqtt } from './mqtt'\nimport { view } from './view'\nimport { orders } from './orders'\nimport { reduce as fills } from './fills'\nimport { filterMenus } from './filterMenu'\nimport { reduce as wallets } from './wallets'\nimport { reduce as md } from './md'\nimport { reduce as session } from './session'\n\nconst rootReducer = combineReducers({\n  marketprops,\n  markets,\n  md,\n  mqtt,\n  view,\n  orders,\n  fills,\n  wallets,\n  filterMenus,\n  session,\n})\n\nexport default rootReducer\n","// rarely updated market props\n\nimport { MARKETS_FETCHED } from './markets'\n\nexport const marketprops = (state = {}, action) => {\n  switch (action.type) {\n  default:\n    return state\n\n  case MARKETS_FETCHED:\n    var newState = {}\n    action.markets.map(market =>\n      newState[market.symbol] = {\n        ...market\n      }\n    )\n    return newState\n  }\n}\n","import { combineEpics } from 'redux-observable'\nimport { epics as mqtt } from './mqtt'\nimport { epics as markets } from './markets'\nimport { epics as orders } from './orders.js'\nimport { epics as wallets } from './wallets'\nimport { epics as fills } from './fills'\nimport { epics as md } from './md'\nimport { epics as view } from './view'\nimport { epics as audio } from './audio'\nimport { epics as session } from './session'\n\nexport const rootEpic = combineEpics(\n  ...view,\n  ...md,\n  ...mqtt,\n  ...markets,\n  ...orders,\n  ...wallets,\n  ...fills,\n  ...audio,\n  ...session,\n)\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './rootReducer'\nimport { rootEpic } from './rootEpic'\nimport { createEpicMiddleware } from 'redux-observable'\n\nconst epicMiddleware = createEpicMiddleware()\n\nconst configureStore = preloadedState => {\n  const store = createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunk, epicMiddleware)\n  )\n\n  epicMiddleware.run(rootEpic)\n\n  return store\n}\n\nexport default configureStore\n","import { webSocket } from 'rxjs/webSocket'\nimport { filter, map, takeUntil, mergeMap, delay } from 'rxjs/operators'\nimport { Subject } from 'rxjs'\nimport { ofType } from 'redux-observable'\nimport { markets as pb } from '../protobufs'\nimport { List } from 'immutable'\n\nexport const MD_SUBSCRIBE = 'MD:SUBSCRIBE'\nexport const MD_UNSUBSCRIBE = 'MD:UNSUBSCRIBE'\nexport const MD_UPDATE = 'MD:UPDATE'\n\nexport const MD_SUBSCRIBE_ = (aggregation, topic) =>\n  ({ type: MD_SUBSCRIBE, aggregation, topic })\nexport const MD_UNSUBSCRIBE_ = (aggregation, topic) =>\n  ({ type: MD_UNSUBSCRIBE, aggregation, topic })\nexport const MD_UPDATE_ = continuum =>\n  ({ type: MD_UPDATE, continuum })\n\nconst INITIAL_STATE = {\n  trades: {},\n  dailies: {},\n}\n\nconst continuumReduce = {\n  trades: (continuum, trades) => {\n    if (continuum.trade) {\n      // TODO: compare timestamp and eliminate duplicates\n      return trades.push(continuum.trade)\n    }\n    else if (continuum.segment) {\n      // TODO: range update/insert\n      return List(continuum.segment.trades.trades)\n    }\n    else {\n      // should never get here\n      console.warn(`ignoring unrecognized continuum for topic ${continuum.topic}`)\n      return trades\n    }\n  },\n  dailies: (continuum, dailies) => {\n    // TODO: pb defs, server support, and this reducer\n    return dailies\n  }\n}\n\nconst update = (continuum, state) => {\n  let [aggregation, market] = continuum.topic.split('/')\n  let markets = state[aggregation]\n  return {\n    ...state,\n    [aggregation]: {\n      ...markets,\n      [market]: continuumReduce[aggregation](continuum, markets[market])\n    }\n  }\n}\n\nexport const reduce = (state=INITIAL_STATE, action) => {\n  switch (action.type) {\n  default:\n    return state\n  case MD_UPDATE:\n    return update(action.continuum, state)\n  }\n}\n\nlet md$ = null\nconst webSocketOpen$ = new Subject()\nconst webSocketClosing$ = new Subject()\nconst webSocketClose$ = new Subject() \nconst PLEX = {}\n\nconst plexOf = (session, topic) => {\n  if (!md$) {\n    md$ = webSocket({\n      url: `ws://${session.mdsHost}:${session.mdsPort}/md`,\n      binaryType: 'arraybuffer',\n      serializer: request => request,\n      deserializer: message => pb.Continuum.decode(new Uint8Array(message.data)),\n      openObserver: webSocketOpen$,\n      closingObserver: webSocketClosing$,\n      closeObserver: webSocketClose$,\n    })\n  }\n  let plex = PLEX[topic]\n  if (plex === undefined) {\n    plex = md$.multiplex(() => `+/${topic}`,\n                         () => `-/${topic}`,\n                         m => m.topic === topic)\n    PLEX[topic] = plex\n  }\n  return plex\n}\n\nexport const epics = [\n\n  // market data sub/unsub lifetime\n  //\n  (action$, state$) => action$.pipe(\n    ofType(MD_SUBSCRIBE),\n    mergeMap(sub =>\n      plexOf(state$.value.session, `${sub.aggregation}/${sub.topic}`).pipe(\n        map(continuum =>\n          MD_UPDATE_(continuum)),\n        takeUntil(action$.pipe(\n          ofType(MD_UNSUBSCRIBE),\n          filter(unsub => unsub.topic === sub.topic),\n          delay(250)))))), // to prevent rapid md$ disconnect/reconnect\n\n  (action$, state$) => webSocketOpen$.pipe(\n    map((event) => ({\n      type: 'SOCKET_OPEN_EVENT'\n    }))),\n\n  (action$, state$) => webSocketClosing$.pipe(\n    map(() => ({\n      type: 'SOCKET_CLOSING_EVENT'\n    }))),\n\n  (action$, state$) => webSocketClose$.pipe(\n    map((event) => ({\n      type: 'SOCKET_CLOSE_EVENT',\n      wasClean: event.wasClean,\n      code: event.code,\n      reason: event.reason\n    }))),\n]\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Root from './containers/Root'\nimport configureStore from './store/configureStore'\nimport * as serviceWorker from './serviceWorker'\nimport { initAudioContext } from './store/audio'\n\nexport const store = configureStore()\ninitAudioContext()\n\nReactDOM.render(<Root store={ store } />, document.getElementById('root'))\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { ofType } from 'redux-observable'\nimport { ignoreElements, tap} from 'rxjs/operators'\nimport { ORDERS_RX_FILL } from './orders'\n\nlet context\nlet dingBuffer = null\nlet awBuffer = null\n\nexport function initAudioContext() {\n    try {\n        window.AudioContext = window.AudioContext || window.webkitAudioContext;\n        context = new AudioContext();\n        loadDingSound('/static/audio/ding.mp3');\n        loadAwSound('/static/audio/aw.mp3');\n    } catch (e) {\n        console.log('Web Audio API is not supported in this browser');\n    }\n}\n\nfunction loadDingSound(url, sndBuf) {\n    var request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n\n    request.onload = function () {\n        context.decodeAudioData(request.response, function (buffer) {\n            dingBuffer = buffer;\n        });\n    }\n    request.send();\n}\n\nfunction loadAwSound(url, sndBuf) {\n    var request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n\n    request.onload = function () {\n        context.decodeAudioData(request.response, function (buffer) {\n            awBuffer = buffer;\n        });\n    }\n    request.send();\n}\n\nfunction playSound(buffer) {\n    var source = context.createBufferSource();\n    source.buffer = buffer;\n    source.connect(context.destination);\n    source.start(0);\n}\n\nfunction playDing() {\n    playSound(dingBuffer);\n}\n\nfunction playAw() {\n    playSound(awBuffer);\n}\n\nexport const epics = [\n  // audio alert for fills\n  //\n  (action$, state$) => action$.pipe(\n    ofType(ORDERS_RX_FILL),\n    tap(action => playDing()),\n    ignoreElements()),\n]\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\nimport * as $protobuf from \"protobufjs/minimal\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const markets = $root.markets = (() => {\n\n    /**\n     * Namespace markets.\n     * @exports markets\n     * @namespace\n     */\n    const markets = {};\n\n    markets.Price = (function() {\n\n        /**\n         * Properties of a Price.\n         * @memberof markets\n         * @interface IPrice\n         * @property {number|Long|null} [price] Price price\n         * @property {number|Long|null} [size] Price size\n         * @property {google.protobuf.ITimestamp|null} [timestamp] Price timestamp\n         */\n\n        /**\n         * Constructs a new Price.\n         * @memberof markets\n         * @classdesc Represents a Price.\n         * @implements IPrice\n         * @constructor\n         * @param {markets.IPrice=} [properties] Properties to set\n         */\n        function Price(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Price price.\n         * @member {number|Long} price\n         * @memberof markets.Price\n         * @instance\n         */\n        Price.prototype.price = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Price size.\n         * @member {number|Long} size\n         * @memberof markets.Price\n         * @instance\n         */\n        Price.prototype.size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Price timestamp.\n         * @member {google.protobuf.ITimestamp|null|undefined} timestamp\n         * @memberof markets.Price\n         * @instance\n         */\n        Price.prototype.timestamp = null;\n\n        /**\n         * Creates a new Price instance using the specified properties.\n         * @function create\n         * @memberof markets.Price\n         * @static\n         * @param {markets.IPrice=} [properties] Properties to set\n         * @returns {markets.Price} Price instance\n         */\n        Price.create = function create(properties) {\n            return new Price(properties);\n        };\n\n        /**\n         * Encodes the specified Price message. Does not implicitly {@link markets.Price.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Price\n         * @static\n         * @param {markets.IPrice} message Price message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Price.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.price);\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.size);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Price message, length delimited. Does not implicitly {@link markets.Price.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Price\n         * @static\n         * @param {markets.IPrice} message Price message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Price.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Price message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Price\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Price} Price\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Price.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Price();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.price = reader.uint64();\n                    break;\n                case 2:\n                    message.size = reader.uint64();\n                    break;\n                case 3:\n                    message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Price message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Price\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Price} Price\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Price.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Price message.\n         * @function verify\n         * @memberof markets.Price\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Price.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (!$util.isInteger(message.price) && !(message.price && $util.isInteger(message.price.low) && $util.isInteger(message.price.high)))\n                    return \"price: integer|Long expected\";\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                    return \"size: integer|Long expected\";\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.timestamp);\n                if (error)\n                    return \"timestamp.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Price message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Price\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Price} Price\n         */\n        Price.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Price)\n                return object;\n            let message = new $root.markets.Price();\n            if (object.price != null)\n                if ($util.Long)\n                    (message.price = $util.Long.fromValue(object.price)).unsigned = true;\n                else if (typeof object.price === \"string\")\n                    message.price = parseInt(object.price, 10);\n                else if (typeof object.price === \"number\")\n                    message.price = object.price;\n                else if (typeof object.price === \"object\")\n                    message.price = new $util.LongBits(object.price.low >>> 0, object.price.high >>> 0).toNumber(true);\n            if (object.size != null)\n                if ($util.Long)\n                    (message.size = $util.Long.fromValue(object.size)).unsigned = true;\n                else if (typeof object.size === \"string\")\n                    message.size = parseInt(object.size, 10);\n                else if (typeof object.size === \"number\")\n                    message.size = object.size;\n                else if (typeof object.size === \"object\")\n                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber(true);\n            if (object.timestamp != null) {\n                if (typeof object.timestamp !== \"object\")\n                    throw TypeError(\".markets.Price.timestamp: object expected\");\n                message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Price message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Price\n         * @static\n         * @param {markets.Price} message Price\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Price.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.price = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.price = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.size = options.longs === String ? \"0\" : 0;\n                object.timestamp = null;\n            }\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (typeof message.price === \"number\")\n                    object.price = options.longs === String ? String(message.price) : message.price;\n                else\n                    object.price = options.longs === String ? $util.Long.prototype.toString.call(message.price) : options.longs === Number ? new $util.LongBits(message.price.low >>> 0, message.price.high >>> 0).toNumber(true) : message.price;\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (typeof message.size === \"number\")\n                    object.size = options.longs === String ? String(message.size) : message.size;\n                else\n                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber(true) : message.size;\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);\n            return object;\n        };\n\n        /**\n         * Converts this Price to JSON.\n         * @function toJSON\n         * @memberof markets.Price\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Price.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Price;\n    })();\n\n    markets.BBO = (function() {\n\n        /**\n         * Properties of a BBO.\n         * @memberof markets\n         * @interface IBBO\n         * @property {markets.IPrice|null} [bidPrice] BBO bidPrice\n         * @property {markets.IPrice|null} [askPrice] BBO askPrice\n         * @property {markets.IPrice|null} [lastTradePrice] BBO lastTradePrice\n         */\n\n        /**\n         * Constructs a new BBO.\n         * @memberof markets\n         * @classdesc Represents a BBO.\n         * @implements IBBO\n         * @constructor\n         * @param {markets.IBBO=} [properties] Properties to set\n         */\n        function BBO(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BBO bidPrice.\n         * @member {markets.IPrice|null|undefined} bidPrice\n         * @memberof markets.BBO\n         * @instance\n         */\n        BBO.prototype.bidPrice = null;\n\n        /**\n         * BBO askPrice.\n         * @member {markets.IPrice|null|undefined} askPrice\n         * @memberof markets.BBO\n         * @instance\n         */\n        BBO.prototype.askPrice = null;\n\n        /**\n         * BBO lastTradePrice.\n         * @member {markets.IPrice|null|undefined} lastTradePrice\n         * @memberof markets.BBO\n         * @instance\n         */\n        BBO.prototype.lastTradePrice = null;\n\n        /**\n         * Creates a new BBO instance using the specified properties.\n         * @function create\n         * @memberof markets.BBO\n         * @static\n         * @param {markets.IBBO=} [properties] Properties to set\n         * @returns {markets.BBO} BBO instance\n         */\n        BBO.create = function create(properties) {\n            return new BBO(properties);\n        };\n\n        /**\n         * Encodes the specified BBO message. Does not implicitly {@link markets.BBO.verify|verify} messages.\n         * @function encode\n         * @memberof markets.BBO\n         * @static\n         * @param {markets.IBBO} message BBO message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BBO.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.bidPrice != null && message.hasOwnProperty(\"bidPrice\"))\n                $root.markets.Price.encode(message.bidPrice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.askPrice != null && message.hasOwnProperty(\"askPrice\"))\n                $root.markets.Price.encode(message.askPrice, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.lastTradePrice != null && message.hasOwnProperty(\"lastTradePrice\"))\n                $root.markets.Price.encode(message.lastTradePrice, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BBO message, length delimited. Does not implicitly {@link markets.BBO.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.BBO\n         * @static\n         * @param {markets.IBBO} message BBO message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BBO.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BBO message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.BBO\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.BBO} BBO\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BBO.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.BBO();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.bidPrice = $root.markets.Price.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.askPrice = $root.markets.Price.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.lastTradePrice = $root.markets.Price.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BBO message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.BBO\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.BBO} BBO\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BBO.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BBO message.\n         * @function verify\n         * @memberof markets.BBO\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BBO.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.bidPrice != null && message.hasOwnProperty(\"bidPrice\")) {\n                let error = $root.markets.Price.verify(message.bidPrice);\n                if (error)\n                    return \"bidPrice.\" + error;\n            }\n            if (message.askPrice != null && message.hasOwnProperty(\"askPrice\")) {\n                let error = $root.markets.Price.verify(message.askPrice);\n                if (error)\n                    return \"askPrice.\" + error;\n            }\n            if (message.lastTradePrice != null && message.hasOwnProperty(\"lastTradePrice\")) {\n                let error = $root.markets.Price.verify(message.lastTradePrice);\n                if (error)\n                    return \"lastTradePrice.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a BBO message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.BBO\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.BBO} BBO\n         */\n        BBO.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.BBO)\n                return object;\n            let message = new $root.markets.BBO();\n            if (object.bidPrice != null) {\n                if (typeof object.bidPrice !== \"object\")\n                    throw TypeError(\".markets.BBO.bidPrice: object expected\");\n                message.bidPrice = $root.markets.Price.fromObject(object.bidPrice);\n            }\n            if (object.askPrice != null) {\n                if (typeof object.askPrice !== \"object\")\n                    throw TypeError(\".markets.BBO.askPrice: object expected\");\n                message.askPrice = $root.markets.Price.fromObject(object.askPrice);\n            }\n            if (object.lastTradePrice != null) {\n                if (typeof object.lastTradePrice !== \"object\")\n                    throw TypeError(\".markets.BBO.lastTradePrice: object expected\");\n                message.lastTradePrice = $root.markets.Price.fromObject(object.lastTradePrice);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BBO message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.BBO\n         * @static\n         * @param {markets.BBO} message BBO\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BBO.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.bidPrice = null;\n                object.askPrice = null;\n                object.lastTradePrice = null;\n            }\n            if (message.bidPrice != null && message.hasOwnProperty(\"bidPrice\"))\n                object.bidPrice = $root.markets.Price.toObject(message.bidPrice, options);\n            if (message.askPrice != null && message.hasOwnProperty(\"askPrice\"))\n                object.askPrice = $root.markets.Price.toObject(message.askPrice, options);\n            if (message.lastTradePrice != null && message.hasOwnProperty(\"lastTradePrice\"))\n                object.lastTradePrice = $root.markets.Price.toObject(message.lastTradePrice, options);\n            return object;\n        };\n\n        /**\n         * Converts this BBO to JSON.\n         * @function toJSON\n         * @memberof markets.BBO\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BBO.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BBO;\n    })();\n\n    /**\n     * Side enum.\n     * @name markets.Side\n     * @enum {string}\n     * @property {number} BUY=0 BUY value\n     * @property {number} SELL=1 SELL value\n     */\n    markets.Side = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"BUY\"] = 0;\n        values[valuesById[1] = \"SELL\"] = 1;\n        return values;\n    })();\n\n    markets.Trade = (function() {\n\n        /**\n         * Properties of a Trade.\n         * @memberof markets\n         * @interface ITrade\n         * @property {google.protobuf.ITimestamp|null} [timestamp] Trade timestamp\n         * @property {number|Long|null} [price] Trade price\n         * @property {number|Long|null} [size] Trade size\n         * @property {markets.Side|null} [taker] Trade taker\n         * @property {number|null} [bidID] Trade bidID\n         * @property {number|null} [askID] Trade askID\n         * @property {number|null} [buyer] Trade buyer\n         * @property {number|null} [seller] Trade seller\n         * @property {markets.IPrice|null} [tradePrice] Trade tradePrice\n         */\n\n        /**\n         * Constructs a new Trade.\n         * @memberof markets\n         * @classdesc Represents a Trade.\n         * @implements ITrade\n         * @constructor\n         * @param {markets.ITrade=} [properties] Properties to set\n         */\n        function Trade(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Trade timestamp.\n         * @member {google.protobuf.ITimestamp|null|undefined} timestamp\n         * @memberof markets.Trade\n         * @instance\n         */\n        Trade.prototype.timestamp = null;\n\n        /**\n         * Trade price.\n         * @member {number|Long} price\n         * @memberof markets.Trade\n         * @instance\n         */\n        Trade.prototype.price = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Trade size.\n         * @member {number|Long} size\n         * @memberof markets.Trade\n         * @instance\n         */\n        Trade.prototype.size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Trade taker.\n         * @member {markets.Side} taker\n         * @memberof markets.Trade\n         * @instance\n         */\n        Trade.prototype.taker = 0;\n\n        /**\n         * Trade bidID.\n         * @member {number} bidID\n         * @memberof markets.Trade\n         * @instance\n         */\n        Trade.prototype.bidID = 0;\n\n        /**\n         * Trade askID.\n         * @member {number} askID\n         * @memberof markets.Trade\n         * @instance\n         */\n        Trade.prototype.askID = 0;\n\n        /**\n         * Trade buyer.\n         * @member {number} buyer\n         * @memberof markets.Trade\n         * @instance\n         */\n        Trade.prototype.buyer = 0;\n\n        /**\n         * Trade seller.\n         * @member {number} seller\n         * @memberof markets.Trade\n         * @instance\n         */\n        Trade.prototype.seller = 0;\n\n        /**\n         * Trade tradePrice.\n         * @member {markets.IPrice|null|undefined} tradePrice\n         * @memberof markets.Trade\n         * @instance\n         */\n        Trade.prototype.tradePrice = null;\n\n        /**\n         * Creates a new Trade instance using the specified properties.\n         * @function create\n         * @memberof markets.Trade\n         * @static\n         * @param {markets.ITrade=} [properties] Properties to set\n         * @returns {markets.Trade} Trade instance\n         */\n        Trade.create = function create(properties) {\n            return new Trade(properties);\n        };\n\n        /**\n         * Encodes the specified Trade message. Does not implicitly {@link markets.Trade.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Trade\n         * @static\n         * @param {markets.ITrade} message Trade message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Trade.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tradePrice != null && message.hasOwnProperty(\"tradePrice\"))\n                $root.markets.Price.encode(message.tradePrice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.taker != null && message.hasOwnProperty(\"taker\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.taker);\n            if (message.bidID != null && message.hasOwnProperty(\"bidID\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.bidID);\n            if (message.askID != null && message.hasOwnProperty(\"askID\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.askID);\n            if (message.buyer != null && message.hasOwnProperty(\"buyer\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.buyer);\n            if (message.seller != null && message.hasOwnProperty(\"seller\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.seller);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.price);\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.size);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Trade message, length delimited. Does not implicitly {@link markets.Trade.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Trade\n         * @static\n         * @param {markets.ITrade} message Trade message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Trade.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Trade message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Trade\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Trade} Trade\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Trade.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Trade();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 7:\n                    message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.price = reader.uint64();\n                    break;\n                case 9:\n                    message.size = reader.uint64();\n                    break;\n                case 2:\n                    message.taker = reader.int32();\n                    break;\n                case 3:\n                    message.bidID = reader.uint32();\n                    break;\n                case 4:\n                    message.askID = reader.uint32();\n                    break;\n                case 5:\n                    message.buyer = reader.uint32();\n                    break;\n                case 6:\n                    message.seller = reader.uint32();\n                    break;\n                case 1:\n                    message.tradePrice = $root.markets.Price.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Trade message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Trade\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Trade} Trade\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Trade.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Trade message.\n         * @function verify\n         * @memberof markets.Trade\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Trade.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.timestamp);\n                if (error)\n                    return \"timestamp.\" + error;\n            }\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (!$util.isInteger(message.price) && !(message.price && $util.isInteger(message.price.low) && $util.isInteger(message.price.high)))\n                    return \"price: integer|Long expected\";\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                    return \"size: integer|Long expected\";\n            if (message.taker != null && message.hasOwnProperty(\"taker\"))\n                switch (message.taker) {\n                default:\n                    return \"taker: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.bidID != null && message.hasOwnProperty(\"bidID\"))\n                if (!$util.isInteger(message.bidID))\n                    return \"bidID: integer expected\";\n            if (message.askID != null && message.hasOwnProperty(\"askID\"))\n                if (!$util.isInteger(message.askID))\n                    return \"askID: integer expected\";\n            if (message.buyer != null && message.hasOwnProperty(\"buyer\"))\n                if (!$util.isInteger(message.buyer))\n                    return \"buyer: integer expected\";\n            if (message.seller != null && message.hasOwnProperty(\"seller\"))\n                if (!$util.isInteger(message.seller))\n                    return \"seller: integer expected\";\n            if (message.tradePrice != null && message.hasOwnProperty(\"tradePrice\")) {\n                let error = $root.markets.Price.verify(message.tradePrice);\n                if (error)\n                    return \"tradePrice.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Trade message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Trade\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Trade} Trade\n         */\n        Trade.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Trade)\n                return object;\n            let message = new $root.markets.Trade();\n            if (object.timestamp != null) {\n                if (typeof object.timestamp !== \"object\")\n                    throw TypeError(\".markets.Trade.timestamp: object expected\");\n                message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);\n            }\n            if (object.price != null)\n                if ($util.Long)\n                    (message.price = $util.Long.fromValue(object.price)).unsigned = true;\n                else if (typeof object.price === \"string\")\n                    message.price = parseInt(object.price, 10);\n                else if (typeof object.price === \"number\")\n                    message.price = object.price;\n                else if (typeof object.price === \"object\")\n                    message.price = new $util.LongBits(object.price.low >>> 0, object.price.high >>> 0).toNumber(true);\n            if (object.size != null)\n                if ($util.Long)\n                    (message.size = $util.Long.fromValue(object.size)).unsigned = true;\n                else if (typeof object.size === \"string\")\n                    message.size = parseInt(object.size, 10);\n                else if (typeof object.size === \"number\")\n                    message.size = object.size;\n                else if (typeof object.size === \"object\")\n                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber(true);\n            switch (object.taker) {\n            case \"BUY\":\n            case 0:\n                message.taker = 0;\n                break;\n            case \"SELL\":\n            case 1:\n                message.taker = 1;\n                break;\n            }\n            if (object.bidID != null)\n                message.bidID = object.bidID >>> 0;\n            if (object.askID != null)\n                message.askID = object.askID >>> 0;\n            if (object.buyer != null)\n                message.buyer = object.buyer >>> 0;\n            if (object.seller != null)\n                message.seller = object.seller >>> 0;\n            if (object.tradePrice != null) {\n                if (typeof object.tradePrice !== \"object\")\n                    throw TypeError(\".markets.Trade.tradePrice: object expected\");\n                message.tradePrice = $root.markets.Price.fromObject(object.tradePrice);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Trade message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Trade\n         * @static\n         * @param {markets.Trade} message Trade\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Trade.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.tradePrice = null;\n                object.taker = options.enums === String ? \"BUY\" : 0;\n                object.bidID = 0;\n                object.askID = 0;\n                object.buyer = 0;\n                object.seller = 0;\n                object.timestamp = null;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.price = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.price = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.size = options.longs === String ? \"0\" : 0;\n            }\n            if (message.tradePrice != null && message.hasOwnProperty(\"tradePrice\"))\n                object.tradePrice = $root.markets.Price.toObject(message.tradePrice, options);\n            if (message.taker != null && message.hasOwnProperty(\"taker\"))\n                object.taker = options.enums === String ? $root.markets.Side[message.taker] : message.taker;\n            if (message.bidID != null && message.hasOwnProperty(\"bidID\"))\n                object.bidID = message.bidID;\n            if (message.askID != null && message.hasOwnProperty(\"askID\"))\n                object.askID = message.askID;\n            if (message.buyer != null && message.hasOwnProperty(\"buyer\"))\n                object.buyer = message.buyer;\n            if (message.seller != null && message.hasOwnProperty(\"seller\"))\n                object.seller = message.seller;\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (typeof message.price === \"number\")\n                    object.price = options.longs === String ? String(message.price) : message.price;\n                else\n                    object.price = options.longs === String ? $util.Long.prototype.toString.call(message.price) : options.longs === Number ? new $util.LongBits(message.price.low >>> 0, message.price.high >>> 0).toNumber(true) : message.price;\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (typeof message.size === \"number\")\n                    object.size = options.longs === String ? String(message.size) : message.size;\n                else\n                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber(true) : message.size;\n            return object;\n        };\n\n        /**\n         * Converts this Trade to JSON.\n         * @function toJSON\n         * @memberof markets.Trade\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Trade.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Trade;\n    })();\n\n    markets.Trades = (function() {\n\n        /**\n         * Properties of a Trades.\n         * @memberof markets\n         * @interface ITrades\n         * @property {Array.<markets.ITrade>|null} [trades] Trades trades\n         * @property {string|null} [market] Trades market\n         */\n\n        /**\n         * Constructs a new Trades.\n         * @memberof markets\n         * @classdesc Represents a Trades.\n         * @implements ITrades\n         * @constructor\n         * @param {markets.ITrades=} [properties] Properties to set\n         */\n        function Trades(properties) {\n            this.trades = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Trades trades.\n         * @member {Array.<markets.ITrade>} trades\n         * @memberof markets.Trades\n         * @instance\n         */\n        Trades.prototype.trades = $util.emptyArray;\n\n        /**\n         * Trades market.\n         * @member {string} market\n         * @memberof markets.Trades\n         * @instance\n         */\n        Trades.prototype.market = \"\";\n\n        /**\n         * Creates a new Trades instance using the specified properties.\n         * @function create\n         * @memberof markets.Trades\n         * @static\n         * @param {markets.ITrades=} [properties] Properties to set\n         * @returns {markets.Trades} Trades instance\n         */\n        Trades.create = function create(properties) {\n            return new Trades(properties);\n        };\n\n        /**\n         * Encodes the specified Trades message. Does not implicitly {@link markets.Trades.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Trades\n         * @static\n         * @param {markets.ITrades} message Trades message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Trades.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.trades != null && message.trades.length)\n                for (let i = 0; i < message.trades.length; ++i)\n                    $root.markets.Trade.encode(message.trades[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.market != null && message.hasOwnProperty(\"market\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.market);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Trades message, length delimited. Does not implicitly {@link markets.Trades.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Trades\n         * @static\n         * @param {markets.ITrades} message Trades message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Trades.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Trades message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Trades\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Trades} Trades\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Trades.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Trades();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.trades && message.trades.length))\n                        message.trades = [];\n                    message.trades.push($root.markets.Trade.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.market = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Trades message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Trades\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Trades} Trades\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Trades.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Trades message.\n         * @function verify\n         * @memberof markets.Trades\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Trades.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.trades != null && message.hasOwnProperty(\"trades\")) {\n                if (!Array.isArray(message.trades))\n                    return \"trades: array expected\";\n                for (let i = 0; i < message.trades.length; ++i) {\n                    let error = $root.markets.Trade.verify(message.trades[i]);\n                    if (error)\n                        return \"trades.\" + error;\n                }\n            }\n            if (message.market != null && message.hasOwnProperty(\"market\"))\n                if (!$util.isString(message.market))\n                    return \"market: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Trades message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Trades\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Trades} Trades\n         */\n        Trades.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Trades)\n                return object;\n            let message = new $root.markets.Trades();\n            if (object.trades) {\n                if (!Array.isArray(object.trades))\n                    throw TypeError(\".markets.Trades.trades: array expected\");\n                message.trades = [];\n                for (let i = 0; i < object.trades.length; ++i) {\n                    if (typeof object.trades[i] !== \"object\")\n                        throw TypeError(\".markets.Trades.trades: object expected\");\n                    message.trades[i] = $root.markets.Trade.fromObject(object.trades[i]);\n                }\n            }\n            if (object.market != null)\n                message.market = String(object.market);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Trades message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Trades\n         * @static\n         * @param {markets.Trades} message Trades\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Trades.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.trades = [];\n            if (options.defaults)\n                object.market = \"\";\n            if (message.trades && message.trades.length) {\n                object.trades = [];\n                for (let j = 0; j < message.trades.length; ++j)\n                    object.trades[j] = $root.markets.Trade.toObject(message.trades[j], options);\n            }\n            if (message.market != null && message.hasOwnProperty(\"market\"))\n                object.market = message.market;\n            return object;\n        };\n\n        /**\n         * Converts this Trades to JSON.\n         * @function toJSON\n         * @memberof markets.Trades\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Trades.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Trades;\n    })();\n\n    /**\n     * OrderType enum.\n     * @name markets.OrderType\n     * @enum {string}\n     * @property {number} GTC=0 GTC value\n     * @property {number} AON=1 AON value\n     * @property {number} IOC=2 IOC value\n     * @property {number} FOK=3 FOK value\n     * @property {number} STOP=4 STOP value\n     */\n    markets.OrderType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"GTC\"] = 0;\n        values[valuesById[1] = \"AON\"] = 1;\n        values[valuesById[2] = \"IOC\"] = 2;\n        values[valuesById[3] = \"FOK\"] = 3;\n        values[valuesById[4] = \"STOP\"] = 4;\n        return values;\n    })();\n\n    /**\n     * ModifyType enum.\n     * @name markets.ModifyType\n     * @enum {string}\n     * @property {number} PRICE=0 PRICE value\n     * @property {number} QUANTITY=1 QUANTITY value\n     * @property {number} PRICE_AND_QUANTITY=2 PRICE_AND_QUANTITY value\n     */\n    markets.ModifyType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"PRICE\"] = 0;\n        values[valuesById[1] = \"QUANTITY\"] = 1;\n        values[valuesById[2] = \"PRICE_AND_QUANTITY\"] = 2;\n        return values;\n    })();\n\n    markets.NewOrder = (function() {\n\n        /**\n         * Properties of a NewOrder.\n         * @memberof markets\n         * @interface INewOrder\n         * @property {string|null} [clOrdID] NewOrder clOrdID\n         * @property {number|null} [orderIDParent] NewOrder orderIDParent\n         * @property {markets.Side|null} [side] NewOrder side\n         * @property {markets.OrderType|null} [orderType] NewOrder orderType\n         * @property {number|Long|null} [price] NewOrder price\n         * @property {number|Long|null} [quantity] NewOrder quantity\n         * @property {number|Long|null} [stopPrice] NewOrder stopPrice\n         * @property {number|null} [orderID] NewOrder orderID\n         * @property {google.protobuf.ITimestamp|null} [timestamp] NewOrder timestamp\n         * @property {number|Long|null} [held] NewOrder held\n         */\n\n        /**\n         * Constructs a new NewOrder.\n         * @memberof markets\n         * @classdesc Represents a NewOrder.\n         * @implements INewOrder\n         * @constructor\n         * @param {markets.INewOrder=} [properties] Properties to set\n         */\n        function NewOrder(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NewOrder clOrdID.\n         * @member {string} clOrdID\n         * @memberof markets.NewOrder\n         * @instance\n         */\n        NewOrder.prototype.clOrdID = \"\";\n\n        /**\n         * NewOrder orderIDParent.\n         * @member {number} orderIDParent\n         * @memberof markets.NewOrder\n         * @instance\n         */\n        NewOrder.prototype.orderIDParent = 0;\n\n        /**\n         * NewOrder side.\n         * @member {markets.Side} side\n         * @memberof markets.NewOrder\n         * @instance\n         */\n        NewOrder.prototype.side = 0;\n\n        /**\n         * NewOrder orderType.\n         * @member {markets.OrderType} orderType\n         * @memberof markets.NewOrder\n         * @instance\n         */\n        NewOrder.prototype.orderType = 0;\n\n        /**\n         * NewOrder price.\n         * @member {number|Long} price\n         * @memberof markets.NewOrder\n         * @instance\n         */\n        NewOrder.prototype.price = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * NewOrder quantity.\n         * @member {number|Long} quantity\n         * @memberof markets.NewOrder\n         * @instance\n         */\n        NewOrder.prototype.quantity = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * NewOrder stopPrice.\n         * @member {number|Long} stopPrice\n         * @memberof markets.NewOrder\n         * @instance\n         */\n        NewOrder.prototype.stopPrice = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * NewOrder orderID.\n         * @member {number} orderID\n         * @memberof markets.NewOrder\n         * @instance\n         */\n        NewOrder.prototype.orderID = 0;\n\n        /**\n         * NewOrder timestamp.\n         * @member {google.protobuf.ITimestamp|null|undefined} timestamp\n         * @memberof markets.NewOrder\n         * @instance\n         */\n        NewOrder.prototype.timestamp = null;\n\n        /**\n         * NewOrder held.\n         * @member {number|Long} held\n         * @memberof markets.NewOrder\n         * @instance\n         */\n        NewOrder.prototype.held = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new NewOrder instance using the specified properties.\n         * @function create\n         * @memberof markets.NewOrder\n         * @static\n         * @param {markets.INewOrder=} [properties] Properties to set\n         * @returns {markets.NewOrder} NewOrder instance\n         */\n        NewOrder.create = function create(properties) {\n            return new NewOrder(properties);\n        };\n\n        /**\n         * Encodes the specified NewOrder message. Does not implicitly {@link markets.NewOrder.verify|verify} messages.\n         * @function encode\n         * @memberof markets.NewOrder\n         * @static\n         * @param {markets.INewOrder} message NewOrder message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NewOrder.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.clOrdID);\n            if (message.orderIDParent != null && message.hasOwnProperty(\"orderIDParent\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.orderIDParent);\n            if (message.side != null && message.hasOwnProperty(\"side\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.side);\n            if (message.orderType != null && message.hasOwnProperty(\"orderType\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.orderType);\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.price);\n            if (message.quantity != null && message.hasOwnProperty(\"quantity\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.quantity);\n            if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.stopPrice);\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.orderID);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.held != null && message.hasOwnProperty(\"held\"))\n                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.held);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NewOrder message, length delimited. Does not implicitly {@link markets.NewOrder.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.NewOrder\n         * @static\n         * @param {markets.INewOrder} message NewOrder message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NewOrder.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NewOrder message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.NewOrder\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.NewOrder} NewOrder\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NewOrder.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.NewOrder();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.clOrdID = reader.string();\n                    break;\n                case 2:\n                    message.orderIDParent = reader.uint32();\n                    break;\n                case 3:\n                    message.side = reader.int32();\n                    break;\n                case 4:\n                    message.orderType = reader.int32();\n                    break;\n                case 5:\n                    message.price = reader.uint64();\n                    break;\n                case 6:\n                    message.quantity = reader.uint64();\n                    break;\n                case 7:\n                    message.stopPrice = reader.uint64();\n                    break;\n                case 8:\n                    message.orderID = reader.uint32();\n                    break;\n                case 9:\n                    message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.held = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NewOrder message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.NewOrder\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.NewOrder} NewOrder\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NewOrder.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NewOrder message.\n         * @function verify\n         * @memberof markets.NewOrder\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NewOrder.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                if (!$util.isString(message.clOrdID))\n                    return \"clOrdID: string expected\";\n            if (message.orderIDParent != null && message.hasOwnProperty(\"orderIDParent\"))\n                if (!$util.isInteger(message.orderIDParent))\n                    return \"orderIDParent: integer expected\";\n            if (message.side != null && message.hasOwnProperty(\"side\"))\n                switch (message.side) {\n                default:\n                    return \"side: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.orderType != null && message.hasOwnProperty(\"orderType\"))\n                switch (message.orderType) {\n                default:\n                    return \"orderType: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                    break;\n                }\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (!$util.isInteger(message.price) && !(message.price && $util.isInteger(message.price.low) && $util.isInteger(message.price.high)))\n                    return \"price: integer|Long expected\";\n            if (message.quantity != null && message.hasOwnProperty(\"quantity\"))\n                if (!$util.isInteger(message.quantity) && !(message.quantity && $util.isInteger(message.quantity.low) && $util.isInteger(message.quantity.high)))\n                    return \"quantity: integer|Long expected\";\n            if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                if (!$util.isInteger(message.stopPrice) && !(message.stopPrice && $util.isInteger(message.stopPrice.low) && $util.isInteger(message.stopPrice.high)))\n                    return \"stopPrice: integer|Long expected\";\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                if (!$util.isInteger(message.orderID))\n                    return \"orderID: integer expected\";\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.timestamp);\n                if (error)\n                    return \"timestamp.\" + error;\n            }\n            if (message.held != null && message.hasOwnProperty(\"held\"))\n                if (!$util.isInteger(message.held) && !(message.held && $util.isInteger(message.held.low) && $util.isInteger(message.held.high)))\n                    return \"held: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NewOrder message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.NewOrder\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.NewOrder} NewOrder\n         */\n        NewOrder.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.NewOrder)\n                return object;\n            let message = new $root.markets.NewOrder();\n            if (object.clOrdID != null)\n                message.clOrdID = String(object.clOrdID);\n            if (object.orderIDParent != null)\n                message.orderIDParent = object.orderIDParent >>> 0;\n            switch (object.side) {\n            case \"BUY\":\n            case 0:\n                message.side = 0;\n                break;\n            case \"SELL\":\n            case 1:\n                message.side = 1;\n                break;\n            }\n            switch (object.orderType) {\n            case \"GTC\":\n            case 0:\n                message.orderType = 0;\n                break;\n            case \"AON\":\n            case 1:\n                message.orderType = 1;\n                break;\n            case \"IOC\":\n            case 2:\n                message.orderType = 2;\n                break;\n            case \"FOK\":\n            case 3:\n                message.orderType = 3;\n                break;\n            case \"STOP\":\n            case 4:\n                message.orderType = 4;\n                break;\n            }\n            if (object.price != null)\n                if ($util.Long)\n                    (message.price = $util.Long.fromValue(object.price)).unsigned = true;\n                else if (typeof object.price === \"string\")\n                    message.price = parseInt(object.price, 10);\n                else if (typeof object.price === \"number\")\n                    message.price = object.price;\n                else if (typeof object.price === \"object\")\n                    message.price = new $util.LongBits(object.price.low >>> 0, object.price.high >>> 0).toNumber(true);\n            if (object.quantity != null)\n                if ($util.Long)\n                    (message.quantity = $util.Long.fromValue(object.quantity)).unsigned = true;\n                else if (typeof object.quantity === \"string\")\n                    message.quantity = parseInt(object.quantity, 10);\n                else if (typeof object.quantity === \"number\")\n                    message.quantity = object.quantity;\n                else if (typeof object.quantity === \"object\")\n                    message.quantity = new $util.LongBits(object.quantity.low >>> 0, object.quantity.high >>> 0).toNumber(true);\n            if (object.stopPrice != null)\n                if ($util.Long)\n                    (message.stopPrice = $util.Long.fromValue(object.stopPrice)).unsigned = true;\n                else if (typeof object.stopPrice === \"string\")\n                    message.stopPrice = parseInt(object.stopPrice, 10);\n                else if (typeof object.stopPrice === \"number\")\n                    message.stopPrice = object.stopPrice;\n                else if (typeof object.stopPrice === \"object\")\n                    message.stopPrice = new $util.LongBits(object.stopPrice.low >>> 0, object.stopPrice.high >>> 0).toNumber(true);\n            if (object.orderID != null)\n                message.orderID = object.orderID >>> 0;\n            if (object.timestamp != null) {\n                if (typeof object.timestamp !== \"object\")\n                    throw TypeError(\".markets.NewOrder.timestamp: object expected\");\n                message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);\n            }\n            if (object.held != null)\n                if ($util.Long)\n                    (message.held = $util.Long.fromValue(object.held)).unsigned = true;\n                else if (typeof object.held === \"string\")\n                    message.held = parseInt(object.held, 10);\n                else if (typeof object.held === \"number\")\n                    message.held = object.held;\n                else if (typeof object.held === \"object\")\n                    message.held = new $util.LongBits(object.held.low >>> 0, object.held.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NewOrder message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.NewOrder\n         * @static\n         * @param {markets.NewOrder} message NewOrder\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NewOrder.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.clOrdID = \"\";\n                object.orderIDParent = 0;\n                object.side = options.enums === String ? \"BUY\" : 0;\n                object.orderType = options.enums === String ? \"GTC\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.price = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.price = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.quantity = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.quantity = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.stopPrice = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.stopPrice = options.longs === String ? \"0\" : 0;\n                object.orderID = 0;\n                object.timestamp = null;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.held = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.held = options.longs === String ? \"0\" : 0;\n            }\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                object.clOrdID = message.clOrdID;\n            if (message.orderIDParent != null && message.hasOwnProperty(\"orderIDParent\"))\n                object.orderIDParent = message.orderIDParent;\n            if (message.side != null && message.hasOwnProperty(\"side\"))\n                object.side = options.enums === String ? $root.markets.Side[message.side] : message.side;\n            if (message.orderType != null && message.hasOwnProperty(\"orderType\"))\n                object.orderType = options.enums === String ? $root.markets.OrderType[message.orderType] : message.orderType;\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (typeof message.price === \"number\")\n                    object.price = options.longs === String ? String(message.price) : message.price;\n                else\n                    object.price = options.longs === String ? $util.Long.prototype.toString.call(message.price) : options.longs === Number ? new $util.LongBits(message.price.low >>> 0, message.price.high >>> 0).toNumber(true) : message.price;\n            if (message.quantity != null && message.hasOwnProperty(\"quantity\"))\n                if (typeof message.quantity === \"number\")\n                    object.quantity = options.longs === String ? String(message.quantity) : message.quantity;\n                else\n                    object.quantity = options.longs === String ? $util.Long.prototype.toString.call(message.quantity) : options.longs === Number ? new $util.LongBits(message.quantity.low >>> 0, message.quantity.high >>> 0).toNumber(true) : message.quantity;\n            if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                if (typeof message.stopPrice === \"number\")\n                    object.stopPrice = options.longs === String ? String(message.stopPrice) : message.stopPrice;\n                else\n                    object.stopPrice = options.longs === String ? $util.Long.prototype.toString.call(message.stopPrice) : options.longs === Number ? new $util.LongBits(message.stopPrice.low >>> 0, message.stopPrice.high >>> 0).toNumber(true) : message.stopPrice;\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                object.orderID = message.orderID;\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);\n            if (message.held != null && message.hasOwnProperty(\"held\"))\n                if (typeof message.held === \"number\")\n                    object.held = options.longs === String ? String(message.held) : message.held;\n                else\n                    object.held = options.longs === String ? $util.Long.prototype.toString.call(message.held) : options.longs === Number ? new $util.LongBits(message.held.low >>> 0, message.held.high >>> 0).toNumber(true) : message.held;\n            return object;\n        };\n\n        /**\n         * Converts this NewOrder to JSON.\n         * @function toJSON\n         * @memberof markets.NewOrder\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NewOrder.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NewOrder;\n    })();\n\n    markets.ClientKey = (function() {\n\n        /**\n         * Properties of a ClientKey.\n         * @memberof markets\n         * @interface IClientKey\n         * @property {number|null} [pocketID] ClientKey pocketID\n         * @property {string|null} [clOrdID] ClientKey clOrdID\n         */\n\n        /**\n         * Constructs a new ClientKey.\n         * @memberof markets\n         * @classdesc Represents a ClientKey.\n         * @implements IClientKey\n         * @constructor\n         * @param {markets.IClientKey=} [properties] Properties to set\n         */\n        function ClientKey(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientKey pocketID.\n         * @member {number} pocketID\n         * @memberof markets.ClientKey\n         * @instance\n         */\n        ClientKey.prototype.pocketID = 0;\n\n        /**\n         * ClientKey clOrdID.\n         * @member {string} clOrdID\n         * @memberof markets.ClientKey\n         * @instance\n         */\n        ClientKey.prototype.clOrdID = \"\";\n\n        /**\n         * Creates a new ClientKey instance using the specified properties.\n         * @function create\n         * @memberof markets.ClientKey\n         * @static\n         * @param {markets.IClientKey=} [properties] Properties to set\n         * @returns {markets.ClientKey} ClientKey instance\n         */\n        ClientKey.create = function create(properties) {\n            return new ClientKey(properties);\n        };\n\n        /**\n         * Encodes the specified ClientKey message. Does not implicitly {@link markets.ClientKey.verify|verify} messages.\n         * @function encode\n         * @memberof markets.ClientKey\n         * @static\n         * @param {markets.IClientKey} message ClientKey message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientKey.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.pocketID != null && message.hasOwnProperty(\"pocketID\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.pocketID);\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.clOrdID);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientKey message, length delimited. Does not implicitly {@link markets.ClientKey.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.ClientKey\n         * @static\n         * @param {markets.IClientKey} message ClientKey message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientKey.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientKey message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.ClientKey\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.ClientKey} ClientKey\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientKey.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.ClientKey();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.pocketID = reader.uint32();\n                    break;\n                case 2:\n                    message.clOrdID = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientKey message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.ClientKey\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.ClientKey} ClientKey\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientKey.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientKey message.\n         * @function verify\n         * @memberof markets.ClientKey\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientKey.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.pocketID != null && message.hasOwnProperty(\"pocketID\"))\n                if (!$util.isInteger(message.pocketID))\n                    return \"pocketID: integer expected\";\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                if (!$util.isString(message.clOrdID))\n                    return \"clOrdID: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientKey message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.ClientKey\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.ClientKey} ClientKey\n         */\n        ClientKey.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.ClientKey)\n                return object;\n            let message = new $root.markets.ClientKey();\n            if (object.pocketID != null)\n                message.pocketID = object.pocketID >>> 0;\n            if (object.clOrdID != null)\n                message.clOrdID = String(object.clOrdID);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientKey message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.ClientKey\n         * @static\n         * @param {markets.ClientKey} message ClientKey\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientKey.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.pocketID = 0;\n                object.clOrdID = \"\";\n            }\n            if (message.pocketID != null && message.hasOwnProperty(\"pocketID\"))\n                object.pocketID = message.pocketID;\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                object.clOrdID = message.clOrdID;\n            return object;\n        };\n\n        /**\n         * Converts this ClientKey to JSON.\n         * @function toJSON\n         * @memberof markets.ClientKey\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientKey.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ClientKey;\n    })();\n\n    markets.CancelOrder = (function() {\n\n        /**\n         * Properties of a CancelOrder.\n         * @memberof markets\n         * @interface ICancelOrder\n         * @property {string|null} [requestID] CancelOrder requestID\n         * @property {google.protobuf.ITimestamp|null} [timestamp] CancelOrder timestamp\n         * @property {number|null} [orderID] CancelOrder orderID\n         * @property {markets.IClientKey|null} [clientKey] CancelOrder clientKey\n         */\n\n        /**\n         * Constructs a new CancelOrder.\n         * @memberof markets\n         * @classdesc Represents a CancelOrder.\n         * @implements ICancelOrder\n         * @constructor\n         * @param {markets.ICancelOrder=} [properties] Properties to set\n         */\n        function CancelOrder(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CancelOrder requestID.\n         * @member {string} requestID\n         * @memberof markets.CancelOrder\n         * @instance\n         */\n        CancelOrder.prototype.requestID = \"\";\n\n        /**\n         * CancelOrder timestamp.\n         * @member {google.protobuf.ITimestamp|null|undefined} timestamp\n         * @memberof markets.CancelOrder\n         * @instance\n         */\n        CancelOrder.prototype.timestamp = null;\n\n        /**\n         * CancelOrder orderID.\n         * @member {number} orderID\n         * @memberof markets.CancelOrder\n         * @instance\n         */\n        CancelOrder.prototype.orderID = 0;\n\n        /**\n         * CancelOrder clientKey.\n         * @member {markets.IClientKey|null|undefined} clientKey\n         * @memberof markets.CancelOrder\n         * @instance\n         */\n        CancelOrder.prototype.clientKey = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * CancelOrder key.\n         * @member {\"orderID\"|\"clientKey\"|undefined} key\n         * @memberof markets.CancelOrder\n         * @instance\n         */\n        Object.defineProperty(CancelOrder.prototype, \"key\", {\n            get: $util.oneOfGetter($oneOfFields = [\"orderID\", \"clientKey\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new CancelOrder instance using the specified properties.\n         * @function create\n         * @memberof markets.CancelOrder\n         * @static\n         * @param {markets.ICancelOrder=} [properties] Properties to set\n         * @returns {markets.CancelOrder} CancelOrder instance\n         */\n        CancelOrder.create = function create(properties) {\n            return new CancelOrder(properties);\n        };\n\n        /**\n         * Encodes the specified CancelOrder message. Does not implicitly {@link markets.CancelOrder.verify|verify} messages.\n         * @function encode\n         * @memberof markets.CancelOrder\n         * @static\n         * @param {markets.ICancelOrder} message CancelOrder message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CancelOrder.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.requestID != null && message.hasOwnProperty(\"requestID\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.requestID);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.orderID);\n            if (message.clientKey != null && message.hasOwnProperty(\"clientKey\"))\n                $root.markets.ClientKey.encode(message.clientKey, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CancelOrder message, length delimited. Does not implicitly {@link markets.CancelOrder.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.CancelOrder\n         * @static\n         * @param {markets.ICancelOrder} message CancelOrder message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CancelOrder.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CancelOrder message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.CancelOrder\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.CancelOrder} CancelOrder\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CancelOrder.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.CancelOrder();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.requestID = reader.string();\n                    break;\n                case 2:\n                    message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.orderID = reader.uint32();\n                    break;\n                case 4:\n                    message.clientKey = $root.markets.ClientKey.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CancelOrder message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.CancelOrder\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.CancelOrder} CancelOrder\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CancelOrder.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CancelOrder message.\n         * @function verify\n         * @memberof markets.CancelOrder\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CancelOrder.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.requestID != null && message.hasOwnProperty(\"requestID\"))\n                if (!$util.isString(message.requestID))\n                    return \"requestID: string expected\";\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.timestamp);\n                if (error)\n                    return \"timestamp.\" + error;\n            }\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\")) {\n                properties.key = 1;\n                if (!$util.isInteger(message.orderID))\n                    return \"orderID: integer expected\";\n            }\n            if (message.clientKey != null && message.hasOwnProperty(\"clientKey\")) {\n                if (properties.key === 1)\n                    return \"key: multiple values\";\n                properties.key = 1;\n                {\n                    let error = $root.markets.ClientKey.verify(message.clientKey);\n                    if (error)\n                        return \"clientKey.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CancelOrder message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.CancelOrder\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.CancelOrder} CancelOrder\n         */\n        CancelOrder.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.CancelOrder)\n                return object;\n            let message = new $root.markets.CancelOrder();\n            if (object.requestID != null)\n                message.requestID = String(object.requestID);\n            if (object.timestamp != null) {\n                if (typeof object.timestamp !== \"object\")\n                    throw TypeError(\".markets.CancelOrder.timestamp: object expected\");\n                message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);\n            }\n            if (object.orderID != null)\n                message.orderID = object.orderID >>> 0;\n            if (object.clientKey != null) {\n                if (typeof object.clientKey !== \"object\")\n                    throw TypeError(\".markets.CancelOrder.clientKey: object expected\");\n                message.clientKey = $root.markets.ClientKey.fromObject(object.clientKey);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CancelOrder message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.CancelOrder\n         * @static\n         * @param {markets.CancelOrder} message CancelOrder\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CancelOrder.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.requestID = \"\";\n                object.timestamp = null;\n            }\n            if (message.requestID != null && message.hasOwnProperty(\"requestID\"))\n                object.requestID = message.requestID;\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\")) {\n                object.orderID = message.orderID;\n                if (options.oneofs)\n                    object.key = \"orderID\";\n            }\n            if (message.clientKey != null && message.hasOwnProperty(\"clientKey\")) {\n                object.clientKey = $root.markets.ClientKey.toObject(message.clientKey, options);\n                if (options.oneofs)\n                    object.key = \"clientKey\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CancelOrder to JSON.\n         * @function toJSON\n         * @memberof markets.CancelOrder\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CancelOrder.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CancelOrder;\n    })();\n\n    /**\n     * CancelStatusCode enum.\n     * @name markets.CancelStatusCode\n     * @enum {string}\n     * @property {number} CS_NEW=0 CS_NEW value\n     * @property {number} CS_PENDING=1 CS_PENDING value\n     * @property {number} CS_ACCEPTED=2 CS_ACCEPTED value\n     * @property {number} CS_REJECTED=3 CS_REJECTED value\n     */\n    markets.CancelStatusCode = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"CS_NEW\"] = 0;\n        values[valuesById[1] = \"CS_PENDING\"] = 1;\n        values[valuesById[2] = \"CS_ACCEPTED\"] = 2;\n        values[valuesById[3] = \"CS_REJECTED\"] = 3;\n        return values;\n    })();\n\n    markets.CancelStatus = (function() {\n\n        /**\n         * Properties of a CancelStatus.\n         * @memberof markets\n         * @interface ICancelStatus\n         * @property {string|null} [requestID] CancelStatus requestID\n         * @property {number|null} [orderID] CancelStatus orderID\n         * @property {google.protobuf.ITimestamp|null} [timestamp] CancelStatus timestamp\n         * @property {markets.CancelStatusCode|null} [code] CancelStatus code\n         * @property {string|null} [reason] CancelStatus reason\n         */\n\n        /**\n         * Constructs a new CancelStatus.\n         * @memberof markets\n         * @classdesc Represents a CancelStatus.\n         * @implements ICancelStatus\n         * @constructor\n         * @param {markets.ICancelStatus=} [properties] Properties to set\n         */\n        function CancelStatus(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CancelStatus requestID.\n         * @member {string} requestID\n         * @memberof markets.CancelStatus\n         * @instance\n         */\n        CancelStatus.prototype.requestID = \"\";\n\n        /**\n         * CancelStatus orderID.\n         * @member {number} orderID\n         * @memberof markets.CancelStatus\n         * @instance\n         */\n        CancelStatus.prototype.orderID = 0;\n\n        /**\n         * CancelStatus timestamp.\n         * @member {google.protobuf.ITimestamp|null|undefined} timestamp\n         * @memberof markets.CancelStatus\n         * @instance\n         */\n        CancelStatus.prototype.timestamp = null;\n\n        /**\n         * CancelStatus code.\n         * @member {markets.CancelStatusCode} code\n         * @memberof markets.CancelStatus\n         * @instance\n         */\n        CancelStatus.prototype.code = 0;\n\n        /**\n         * CancelStatus reason.\n         * @member {string} reason\n         * @memberof markets.CancelStatus\n         * @instance\n         */\n        CancelStatus.prototype.reason = \"\";\n\n        /**\n         * Creates a new CancelStatus instance using the specified properties.\n         * @function create\n         * @memberof markets.CancelStatus\n         * @static\n         * @param {markets.ICancelStatus=} [properties] Properties to set\n         * @returns {markets.CancelStatus} CancelStatus instance\n         */\n        CancelStatus.create = function create(properties) {\n            return new CancelStatus(properties);\n        };\n\n        /**\n         * Encodes the specified CancelStatus message. Does not implicitly {@link markets.CancelStatus.verify|verify} messages.\n         * @function encode\n         * @memberof markets.CancelStatus\n         * @static\n         * @param {markets.ICancelStatus} message CancelStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CancelStatus.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.requestID != null && message.hasOwnProperty(\"requestID\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.requestID);\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.orderID);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.code);\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.reason);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CancelStatus message, length delimited. Does not implicitly {@link markets.CancelStatus.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.CancelStatus\n         * @static\n         * @param {markets.ICancelStatus} message CancelStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CancelStatus.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CancelStatus message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.CancelStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.CancelStatus} CancelStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CancelStatus.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.CancelStatus();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.requestID = reader.string();\n                    break;\n                case 2:\n                    message.orderID = reader.uint32();\n                    break;\n                case 3:\n                    message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.code = reader.int32();\n                    break;\n                case 5:\n                    message.reason = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CancelStatus message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.CancelStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.CancelStatus} CancelStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CancelStatus.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CancelStatus message.\n         * @function verify\n         * @memberof markets.CancelStatus\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CancelStatus.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.requestID != null && message.hasOwnProperty(\"requestID\"))\n                if (!$util.isString(message.requestID))\n                    return \"requestID: string expected\";\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                if (!$util.isInteger(message.orderID))\n                    return \"orderID: integer expected\";\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.timestamp);\n                if (error)\n                    return \"timestamp.\" + error;\n            }\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                switch (message.code) {\n                default:\n                    return \"code: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                    break;\n                }\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                if (!$util.isString(message.reason))\n                    return \"reason: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CancelStatus message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.CancelStatus\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.CancelStatus} CancelStatus\n         */\n        CancelStatus.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.CancelStatus)\n                return object;\n            let message = new $root.markets.CancelStatus();\n            if (object.requestID != null)\n                message.requestID = String(object.requestID);\n            if (object.orderID != null)\n                message.orderID = object.orderID >>> 0;\n            if (object.timestamp != null) {\n                if (typeof object.timestamp !== \"object\")\n                    throw TypeError(\".markets.CancelStatus.timestamp: object expected\");\n                message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);\n            }\n            switch (object.code) {\n            case \"CS_NEW\":\n            case 0:\n                message.code = 0;\n                break;\n            case \"CS_PENDING\":\n            case 1:\n                message.code = 1;\n                break;\n            case \"CS_ACCEPTED\":\n            case 2:\n                message.code = 2;\n                break;\n            case \"CS_REJECTED\":\n            case 3:\n                message.code = 3;\n                break;\n            }\n            if (object.reason != null)\n                message.reason = String(object.reason);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CancelStatus message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.CancelStatus\n         * @static\n         * @param {markets.CancelStatus} message CancelStatus\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CancelStatus.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.requestID = \"\";\n                object.orderID = 0;\n                object.timestamp = null;\n                object.code = options.enums === String ? \"CS_NEW\" : 0;\n                object.reason = \"\";\n            }\n            if (message.requestID != null && message.hasOwnProperty(\"requestID\"))\n                object.requestID = message.requestID;\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                object.orderID = message.orderID;\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                object.code = options.enums === String ? $root.markets.CancelStatusCode[message.code] : message.code;\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                object.reason = message.reason;\n            return object;\n        };\n\n        /**\n         * Converts this CancelStatus to JSON.\n         * @function toJSON\n         * @memberof markets.CancelStatus\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CancelStatus.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CancelStatus;\n    })();\n\n    markets.ModifyOrder = (function() {\n\n        /**\n         * Properties of a ModifyOrder.\n         * @memberof markets\n         * @interface IModifyOrder\n         * @property {number|null} [userID] ModifyOrder userID\n         * @property {number|null} [profileID] ModifyOrder profileID\n         * @property {number|null} [pocketID] ModifyOrder pocketID\n         * @property {number|null} [orderID] ModifyOrder orderID\n         * @property {markets.ModifyType|null} [modifyType] ModifyOrder modifyType\n         * @property {number|Long|null} [price] ModifyOrder price\n         * @property {number|Long|null} [quantity] ModifyOrder quantity\n         */\n\n        /**\n         * Constructs a new ModifyOrder.\n         * @memberof markets\n         * @classdesc Represents a ModifyOrder.\n         * @implements IModifyOrder\n         * @constructor\n         * @param {markets.IModifyOrder=} [properties] Properties to set\n         */\n        function ModifyOrder(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModifyOrder userID.\n         * @member {number} userID\n         * @memberof markets.ModifyOrder\n         * @instance\n         */\n        ModifyOrder.prototype.userID = 0;\n\n        /**\n         * ModifyOrder profileID.\n         * @member {number} profileID\n         * @memberof markets.ModifyOrder\n         * @instance\n         */\n        ModifyOrder.prototype.profileID = 0;\n\n        /**\n         * ModifyOrder pocketID.\n         * @member {number} pocketID\n         * @memberof markets.ModifyOrder\n         * @instance\n         */\n        ModifyOrder.prototype.pocketID = 0;\n\n        /**\n         * ModifyOrder orderID.\n         * @member {number} orderID\n         * @memberof markets.ModifyOrder\n         * @instance\n         */\n        ModifyOrder.prototype.orderID = 0;\n\n        /**\n         * ModifyOrder modifyType.\n         * @member {markets.ModifyType} modifyType\n         * @memberof markets.ModifyOrder\n         * @instance\n         */\n        ModifyOrder.prototype.modifyType = 0;\n\n        /**\n         * ModifyOrder price.\n         * @member {number|Long} price\n         * @memberof markets.ModifyOrder\n         * @instance\n         */\n        ModifyOrder.prototype.price = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * ModifyOrder quantity.\n         * @member {number|Long} quantity\n         * @memberof markets.ModifyOrder\n         * @instance\n         */\n        ModifyOrder.prototype.quantity = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new ModifyOrder instance using the specified properties.\n         * @function create\n         * @memberof markets.ModifyOrder\n         * @static\n         * @param {markets.IModifyOrder=} [properties] Properties to set\n         * @returns {markets.ModifyOrder} ModifyOrder instance\n         */\n        ModifyOrder.create = function create(properties) {\n            return new ModifyOrder(properties);\n        };\n\n        /**\n         * Encodes the specified ModifyOrder message. Does not implicitly {@link markets.ModifyOrder.verify|verify} messages.\n         * @function encode\n         * @memberof markets.ModifyOrder\n         * @static\n         * @param {markets.IModifyOrder} message ModifyOrder message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModifyOrder.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userID != null && message.hasOwnProperty(\"userID\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userID);\n            if (message.profileID != null && message.hasOwnProperty(\"profileID\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.profileID);\n            if (message.pocketID != null && message.hasOwnProperty(\"pocketID\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.pocketID);\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.orderID);\n            if (message.modifyType != null && message.hasOwnProperty(\"modifyType\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.modifyType);\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.price);\n            if (message.quantity != null && message.hasOwnProperty(\"quantity\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.quantity);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModifyOrder message, length delimited. Does not implicitly {@link markets.ModifyOrder.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.ModifyOrder\n         * @static\n         * @param {markets.IModifyOrder} message ModifyOrder message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModifyOrder.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModifyOrder message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.ModifyOrder\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.ModifyOrder} ModifyOrder\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModifyOrder.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.ModifyOrder();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.userID = reader.uint32();\n                    break;\n                case 2:\n                    message.profileID = reader.uint32();\n                    break;\n                case 3:\n                    message.pocketID = reader.uint32();\n                    break;\n                case 4:\n                    message.orderID = reader.uint32();\n                    break;\n                case 5:\n                    message.modifyType = reader.int32();\n                    break;\n                case 6:\n                    message.price = reader.uint64();\n                    break;\n                case 7:\n                    message.quantity = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModifyOrder message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.ModifyOrder\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.ModifyOrder} ModifyOrder\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModifyOrder.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModifyOrder message.\n         * @function verify\n         * @memberof markets.ModifyOrder\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModifyOrder.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userID != null && message.hasOwnProperty(\"userID\"))\n                if (!$util.isInteger(message.userID))\n                    return \"userID: integer expected\";\n            if (message.profileID != null && message.hasOwnProperty(\"profileID\"))\n                if (!$util.isInteger(message.profileID))\n                    return \"profileID: integer expected\";\n            if (message.pocketID != null && message.hasOwnProperty(\"pocketID\"))\n                if (!$util.isInteger(message.pocketID))\n                    return \"pocketID: integer expected\";\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                if (!$util.isInteger(message.orderID))\n                    return \"orderID: integer expected\";\n            if (message.modifyType != null && message.hasOwnProperty(\"modifyType\"))\n                switch (message.modifyType) {\n                default:\n                    return \"modifyType: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (!$util.isInteger(message.price) && !(message.price && $util.isInteger(message.price.low) && $util.isInteger(message.price.high)))\n                    return \"price: integer|Long expected\";\n            if (message.quantity != null && message.hasOwnProperty(\"quantity\"))\n                if (!$util.isInteger(message.quantity) && !(message.quantity && $util.isInteger(message.quantity.low) && $util.isInteger(message.quantity.high)))\n                    return \"quantity: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ModifyOrder message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.ModifyOrder\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.ModifyOrder} ModifyOrder\n         */\n        ModifyOrder.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.ModifyOrder)\n                return object;\n            let message = new $root.markets.ModifyOrder();\n            if (object.userID != null)\n                message.userID = object.userID >>> 0;\n            if (object.profileID != null)\n                message.profileID = object.profileID >>> 0;\n            if (object.pocketID != null)\n                message.pocketID = object.pocketID >>> 0;\n            if (object.orderID != null)\n                message.orderID = object.orderID >>> 0;\n            switch (object.modifyType) {\n            case \"PRICE\":\n            case 0:\n                message.modifyType = 0;\n                break;\n            case \"QUANTITY\":\n            case 1:\n                message.modifyType = 1;\n                break;\n            case \"PRICE_AND_QUANTITY\":\n            case 2:\n                message.modifyType = 2;\n                break;\n            }\n            if (object.price != null)\n                if ($util.Long)\n                    (message.price = $util.Long.fromValue(object.price)).unsigned = true;\n                else if (typeof object.price === \"string\")\n                    message.price = parseInt(object.price, 10);\n                else if (typeof object.price === \"number\")\n                    message.price = object.price;\n                else if (typeof object.price === \"object\")\n                    message.price = new $util.LongBits(object.price.low >>> 0, object.price.high >>> 0).toNumber(true);\n            if (object.quantity != null)\n                if ($util.Long)\n                    (message.quantity = $util.Long.fromValue(object.quantity)).unsigned = true;\n                else if (typeof object.quantity === \"string\")\n                    message.quantity = parseInt(object.quantity, 10);\n                else if (typeof object.quantity === \"number\")\n                    message.quantity = object.quantity;\n                else if (typeof object.quantity === \"object\")\n                    message.quantity = new $util.LongBits(object.quantity.low >>> 0, object.quantity.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModifyOrder message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.ModifyOrder\n         * @static\n         * @param {markets.ModifyOrder} message ModifyOrder\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModifyOrder.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userID = 0;\n                object.profileID = 0;\n                object.pocketID = 0;\n                object.orderID = 0;\n                object.modifyType = options.enums === String ? \"PRICE\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.price = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.price = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.quantity = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.quantity = options.longs === String ? \"0\" : 0;\n            }\n            if (message.userID != null && message.hasOwnProperty(\"userID\"))\n                object.userID = message.userID;\n            if (message.profileID != null && message.hasOwnProperty(\"profileID\"))\n                object.profileID = message.profileID;\n            if (message.pocketID != null && message.hasOwnProperty(\"pocketID\"))\n                object.pocketID = message.pocketID;\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                object.orderID = message.orderID;\n            if (message.modifyType != null && message.hasOwnProperty(\"modifyType\"))\n                object.modifyType = options.enums === String ? $root.markets.ModifyType[message.modifyType] : message.modifyType;\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (typeof message.price === \"number\")\n                    object.price = options.longs === String ? String(message.price) : message.price;\n                else\n                    object.price = options.longs === String ? $util.Long.prototype.toString.call(message.price) : options.longs === Number ? new $util.LongBits(message.price.low >>> 0, message.price.high >>> 0).toNumber(true) : message.price;\n            if (message.quantity != null && message.hasOwnProperty(\"quantity\"))\n                if (typeof message.quantity === \"number\")\n                    object.quantity = options.longs === String ? String(message.quantity) : message.quantity;\n                else\n                    object.quantity = options.longs === String ? $util.Long.prototype.toString.call(message.quantity) : options.longs === Number ? new $util.LongBits(message.quantity.low >>> 0, message.quantity.high >>> 0).toNumber(true) : message.quantity;\n            return object;\n        };\n\n        /**\n         * Converts this ModifyOrder to JSON.\n         * @function toJSON\n         * @memberof markets.ModifyOrder\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModifyOrder.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModifyOrder;\n    })();\n\n    markets.Action = (function() {\n\n        /**\n         * Properties of an Action.\n         * @memberof markets\n         * @interface IAction\n         * @property {google.protobuf.ITimestamp|null} [timestamp] Action timestamp\n         * @property {markets.INewOrder|null} [newOrder] Action newOrder\n         * @property {markets.ICancelOrder|null} [cancelOrder] Action cancelOrder\n         * @property {markets.IModifyOrder|null} [modifyOrder] Action modifyOrder\n         */\n\n        /**\n         * Constructs a new Action.\n         * @memberof markets\n         * @classdesc Represents an Action.\n         * @implements IAction\n         * @constructor\n         * @param {markets.IAction=} [properties] Properties to set\n         */\n        function Action(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Action timestamp.\n         * @member {google.protobuf.ITimestamp|null|undefined} timestamp\n         * @memberof markets.Action\n         * @instance\n         */\n        Action.prototype.timestamp = null;\n\n        /**\n         * Action newOrder.\n         * @member {markets.INewOrder|null|undefined} newOrder\n         * @memberof markets.Action\n         * @instance\n         */\n        Action.prototype.newOrder = null;\n\n        /**\n         * Action cancelOrder.\n         * @member {markets.ICancelOrder|null|undefined} cancelOrder\n         * @memberof markets.Action\n         * @instance\n         */\n        Action.prototype.cancelOrder = null;\n\n        /**\n         * Action modifyOrder.\n         * @member {markets.IModifyOrder|null|undefined} modifyOrder\n         * @memberof markets.Action\n         * @instance\n         */\n        Action.prototype.modifyOrder = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Action msg.\n         * @member {\"newOrder\"|\"cancelOrder\"|\"modifyOrder\"|undefined} msg\n         * @memberof markets.Action\n         * @instance\n         */\n        Object.defineProperty(Action.prototype, \"msg\", {\n            get: $util.oneOfGetter($oneOfFields = [\"newOrder\", \"cancelOrder\", \"modifyOrder\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Action instance using the specified properties.\n         * @function create\n         * @memberof markets.Action\n         * @static\n         * @param {markets.IAction=} [properties] Properties to set\n         * @returns {markets.Action} Action instance\n         */\n        Action.create = function create(properties) {\n            return new Action(properties);\n        };\n\n        /**\n         * Encodes the specified Action message. Does not implicitly {@link markets.Action.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Action\n         * @static\n         * @param {markets.IAction} message Action message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Action.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.newOrder != null && message.hasOwnProperty(\"newOrder\"))\n                $root.markets.NewOrder.encode(message.newOrder, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.cancelOrder != null && message.hasOwnProperty(\"cancelOrder\"))\n                $root.markets.CancelOrder.encode(message.cancelOrder, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.modifyOrder != null && message.hasOwnProperty(\"modifyOrder\"))\n                $root.markets.ModifyOrder.encode(message.modifyOrder, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Action message, length delimited. Does not implicitly {@link markets.Action.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Action\n         * @static\n         * @param {markets.IAction} message Action message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Action.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Action message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Action\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Action} Action\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Action.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Action();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 4:\n                    message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 1:\n                    message.newOrder = $root.markets.NewOrder.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.cancelOrder = $root.markets.CancelOrder.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.modifyOrder = $root.markets.ModifyOrder.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Action message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Action\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Action} Action\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Action.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Action message.\n         * @function verify\n         * @memberof markets.Action\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Action.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.timestamp);\n                if (error)\n                    return \"timestamp.\" + error;\n            }\n            if (message.newOrder != null && message.hasOwnProperty(\"newOrder\")) {\n                properties.msg = 1;\n                {\n                    let error = $root.markets.NewOrder.verify(message.newOrder);\n                    if (error)\n                        return \"newOrder.\" + error;\n                }\n            }\n            if (message.cancelOrder != null && message.hasOwnProperty(\"cancelOrder\")) {\n                if (properties.msg === 1)\n                    return \"msg: multiple values\";\n                properties.msg = 1;\n                {\n                    let error = $root.markets.CancelOrder.verify(message.cancelOrder);\n                    if (error)\n                        return \"cancelOrder.\" + error;\n                }\n            }\n            if (message.modifyOrder != null && message.hasOwnProperty(\"modifyOrder\")) {\n                if (properties.msg === 1)\n                    return \"msg: multiple values\";\n                properties.msg = 1;\n                {\n                    let error = $root.markets.ModifyOrder.verify(message.modifyOrder);\n                    if (error)\n                        return \"modifyOrder.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an Action message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Action\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Action} Action\n         */\n        Action.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Action)\n                return object;\n            let message = new $root.markets.Action();\n            if (object.timestamp != null) {\n                if (typeof object.timestamp !== \"object\")\n                    throw TypeError(\".markets.Action.timestamp: object expected\");\n                message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);\n            }\n            if (object.newOrder != null) {\n                if (typeof object.newOrder !== \"object\")\n                    throw TypeError(\".markets.Action.newOrder: object expected\");\n                message.newOrder = $root.markets.NewOrder.fromObject(object.newOrder);\n            }\n            if (object.cancelOrder != null) {\n                if (typeof object.cancelOrder !== \"object\")\n                    throw TypeError(\".markets.Action.cancelOrder: object expected\");\n                message.cancelOrder = $root.markets.CancelOrder.fromObject(object.cancelOrder);\n            }\n            if (object.modifyOrder != null) {\n                if (typeof object.modifyOrder !== \"object\")\n                    throw TypeError(\".markets.Action.modifyOrder: object expected\");\n                message.modifyOrder = $root.markets.ModifyOrder.fromObject(object.modifyOrder);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Action message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Action\n         * @static\n         * @param {markets.Action} message Action\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Action.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.timestamp = null;\n            if (message.newOrder != null && message.hasOwnProperty(\"newOrder\")) {\n                object.newOrder = $root.markets.NewOrder.toObject(message.newOrder, options);\n                if (options.oneofs)\n                    object.msg = \"newOrder\";\n            }\n            if (message.cancelOrder != null && message.hasOwnProperty(\"cancelOrder\")) {\n                object.cancelOrder = $root.markets.CancelOrder.toObject(message.cancelOrder, options);\n                if (options.oneofs)\n                    object.msg = \"cancelOrder\";\n            }\n            if (message.modifyOrder != null && message.hasOwnProperty(\"modifyOrder\")) {\n                object.modifyOrder = $root.markets.ModifyOrder.toObject(message.modifyOrder, options);\n                if (options.oneofs)\n                    object.msg = \"modifyOrder\";\n            }\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);\n            return object;\n        };\n\n        /**\n         * Converts this Action to JSON.\n         * @function toJSON\n         * @memberof markets.Action\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Action.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Action;\n    })();\n\n    /**\n     * OrderStatusCode enum.\n     * @name markets.OrderStatusCode\n     * @enum {string}\n     * @property {number} OS_NEW=0 OS_NEW value\n     * @property {number} OS_PENDING=1 OS_PENDING value\n     * @property {number} OS_REJECTED=2 OS_REJECTED value\n     * @property {number} OS_OPEN=3 OS_OPEN value\n     * @property {number} OS_CANCELED=4 OS_CANCELED value\n     * @property {number} OS_PARTIAL_FILL=5 OS_PARTIAL_FILL value\n     * @property {number} OS_FILLED=6 OS_FILLED value\n     */\n    markets.OrderStatusCode = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"OS_NEW\"] = 0;\n        values[valuesById[1] = \"OS_PENDING\"] = 1;\n        values[valuesById[2] = \"OS_REJECTED\"] = 2;\n        values[valuesById[3] = \"OS_OPEN\"] = 3;\n        values[valuesById[4] = \"OS_CANCELED\"] = 4;\n        values[valuesById[5] = \"OS_PARTIAL_FILL\"] = 5;\n        values[valuesById[6] = \"OS_FILLED\"] = 6;\n        return values;\n    })();\n\n    markets.Fill = (function() {\n\n        /**\n         * Properties of a Fill.\n         * @memberof markets\n         * @interface IFill\n         * @property {markets.Side|null} [side] Fill side\n         * @property {number|Long|null} [price] Fill price\n         * @property {number|Long|null} [size] Fill size\n         * @property {boolean|null} [took] Fill took\n         */\n\n        /**\n         * Constructs a new Fill.\n         * @memberof markets\n         * @classdesc Represents a Fill.\n         * @implements IFill\n         * @constructor\n         * @param {markets.IFill=} [properties] Properties to set\n         */\n        function Fill(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Fill side.\n         * @member {markets.Side} side\n         * @memberof markets.Fill\n         * @instance\n         */\n        Fill.prototype.side = 0;\n\n        /**\n         * Fill price.\n         * @member {number|Long} price\n         * @memberof markets.Fill\n         * @instance\n         */\n        Fill.prototype.price = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Fill size.\n         * @member {number|Long} size\n         * @memberof markets.Fill\n         * @instance\n         */\n        Fill.prototype.size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Fill took.\n         * @member {boolean} took\n         * @memberof markets.Fill\n         * @instance\n         */\n        Fill.prototype.took = false;\n\n        /**\n         * Creates a new Fill instance using the specified properties.\n         * @function create\n         * @memberof markets.Fill\n         * @static\n         * @param {markets.IFill=} [properties] Properties to set\n         * @returns {markets.Fill} Fill instance\n         */\n        Fill.create = function create(properties) {\n            return new Fill(properties);\n        };\n\n        /**\n         * Encodes the specified Fill message. Does not implicitly {@link markets.Fill.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Fill\n         * @static\n         * @param {markets.IFill} message Fill message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Fill.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.side != null && message.hasOwnProperty(\"side\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.side);\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.price);\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.size);\n            if (message.took != null && message.hasOwnProperty(\"took\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.took);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Fill message, length delimited. Does not implicitly {@link markets.Fill.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Fill\n         * @static\n         * @param {markets.IFill} message Fill message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Fill.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Fill message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Fill\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Fill} Fill\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Fill.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Fill();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.side = reader.int32();\n                    break;\n                case 2:\n                    message.price = reader.uint64();\n                    break;\n                case 3:\n                    message.size = reader.uint64();\n                    break;\n                case 4:\n                    message.took = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Fill message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Fill\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Fill} Fill\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Fill.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Fill message.\n         * @function verify\n         * @memberof markets.Fill\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Fill.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.side != null && message.hasOwnProperty(\"side\"))\n                switch (message.side) {\n                default:\n                    return \"side: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (!$util.isInteger(message.price) && !(message.price && $util.isInteger(message.price.low) && $util.isInteger(message.price.high)))\n                    return \"price: integer|Long expected\";\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                    return \"size: integer|Long expected\";\n            if (message.took != null && message.hasOwnProperty(\"took\"))\n                if (typeof message.took !== \"boolean\")\n                    return \"took: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Fill message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Fill\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Fill} Fill\n         */\n        Fill.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Fill)\n                return object;\n            let message = new $root.markets.Fill();\n            switch (object.side) {\n            case \"BUY\":\n            case 0:\n                message.side = 0;\n                break;\n            case \"SELL\":\n            case 1:\n                message.side = 1;\n                break;\n            }\n            if (object.price != null)\n                if ($util.Long)\n                    (message.price = $util.Long.fromValue(object.price)).unsigned = true;\n                else if (typeof object.price === \"string\")\n                    message.price = parseInt(object.price, 10);\n                else if (typeof object.price === \"number\")\n                    message.price = object.price;\n                else if (typeof object.price === \"object\")\n                    message.price = new $util.LongBits(object.price.low >>> 0, object.price.high >>> 0).toNumber(true);\n            if (object.size != null)\n                if ($util.Long)\n                    (message.size = $util.Long.fromValue(object.size)).unsigned = true;\n                else if (typeof object.size === \"string\")\n                    message.size = parseInt(object.size, 10);\n                else if (typeof object.size === \"number\")\n                    message.size = object.size;\n                else if (typeof object.size === \"object\")\n                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber(true);\n            if (object.took != null)\n                message.took = Boolean(object.took);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Fill message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Fill\n         * @static\n         * @param {markets.Fill} message Fill\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Fill.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.side = options.enums === String ? \"BUY\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.price = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.price = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.size = options.longs === String ? \"0\" : 0;\n                object.took = false;\n            }\n            if (message.side != null && message.hasOwnProperty(\"side\"))\n                object.side = options.enums === String ? $root.markets.Side[message.side] : message.side;\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (typeof message.price === \"number\")\n                    object.price = options.longs === String ? String(message.price) : message.price;\n                else\n                    object.price = options.longs === String ? $util.Long.prototype.toString.call(message.price) : options.longs === Number ? new $util.LongBits(message.price.low >>> 0, message.price.high >>> 0).toNumber(true) : message.price;\n            if (message.size != null && message.hasOwnProperty(\"size\"))\n                if (typeof message.size === \"number\")\n                    object.size = options.longs === String ? String(message.size) : message.size;\n                else\n                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber(true) : message.size;\n            if (message.took != null && message.hasOwnProperty(\"took\"))\n                object.took = message.took;\n            return object;\n        };\n\n        /**\n         * Converts this Fill to JSON.\n         * @function toJSON\n         * @memberof markets.Fill\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Fill.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Fill;\n    })();\n\n    markets.FillEvent = (function() {\n\n        /**\n         * Properties of a FillEvent.\n         * @memberof markets\n         * @interface IFillEvent\n         * @property {google.protobuf.ITimestamp|null} [timestamp] FillEvent timestamp\n         * @property {string|null} [market] FillEvent market\n         * @property {number|null} [orderID] FillEvent orderID\n         * @property {string|null} [clOrdID] FillEvent clOrdID\n         * @property {markets.IFill|null} [fill] FillEvent fill\n         */\n\n        /**\n         * Constructs a new FillEvent.\n         * @memberof markets\n         * @classdesc Represents a FillEvent.\n         * @implements IFillEvent\n         * @constructor\n         * @param {markets.IFillEvent=} [properties] Properties to set\n         */\n        function FillEvent(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FillEvent timestamp.\n         * @member {google.protobuf.ITimestamp|null|undefined} timestamp\n         * @memberof markets.FillEvent\n         * @instance\n         */\n        FillEvent.prototype.timestamp = null;\n\n        /**\n         * FillEvent market.\n         * @member {string} market\n         * @memberof markets.FillEvent\n         * @instance\n         */\n        FillEvent.prototype.market = \"\";\n\n        /**\n         * FillEvent orderID.\n         * @member {number} orderID\n         * @memberof markets.FillEvent\n         * @instance\n         */\n        FillEvent.prototype.orderID = 0;\n\n        /**\n         * FillEvent clOrdID.\n         * @member {string} clOrdID\n         * @memberof markets.FillEvent\n         * @instance\n         */\n        FillEvent.prototype.clOrdID = \"\";\n\n        /**\n         * FillEvent fill.\n         * @member {markets.IFill|null|undefined} fill\n         * @memberof markets.FillEvent\n         * @instance\n         */\n        FillEvent.prototype.fill = null;\n\n        /**\n         * Creates a new FillEvent instance using the specified properties.\n         * @function create\n         * @memberof markets.FillEvent\n         * @static\n         * @param {markets.IFillEvent=} [properties] Properties to set\n         * @returns {markets.FillEvent} FillEvent instance\n         */\n        FillEvent.create = function create(properties) {\n            return new FillEvent(properties);\n        };\n\n        /**\n         * Encodes the specified FillEvent message. Does not implicitly {@link markets.FillEvent.verify|verify} messages.\n         * @function encode\n         * @memberof markets.FillEvent\n         * @static\n         * @param {markets.IFillEvent} message FillEvent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FillEvent.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.clOrdID);\n            if (message.fill != null && message.hasOwnProperty(\"fill\"))\n                $root.markets.Fill.encode(message.fill, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.orderID);\n            if (message.market != null && message.hasOwnProperty(\"market\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.market);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FillEvent message, length delimited. Does not implicitly {@link markets.FillEvent.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.FillEvent\n         * @static\n         * @param {markets.IFillEvent} message FillEvent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FillEvent.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FillEvent message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.FillEvent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.FillEvent} FillEvent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FillEvent.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.FillEvent();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.market = reader.string();\n                    break;\n                case 4:\n                    message.orderID = reader.uint32();\n                    break;\n                case 2:\n                    message.clOrdID = reader.string();\n                    break;\n                case 3:\n                    message.fill = $root.markets.Fill.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FillEvent message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.FillEvent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.FillEvent} FillEvent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FillEvent.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FillEvent message.\n         * @function verify\n         * @memberof markets.FillEvent\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FillEvent.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.timestamp);\n                if (error)\n                    return \"timestamp.\" + error;\n            }\n            if (message.market != null && message.hasOwnProperty(\"market\"))\n                if (!$util.isString(message.market))\n                    return \"market: string expected\";\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                if (!$util.isInteger(message.orderID))\n                    return \"orderID: integer expected\";\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                if (!$util.isString(message.clOrdID))\n                    return \"clOrdID: string expected\";\n            if (message.fill != null && message.hasOwnProperty(\"fill\")) {\n                let error = $root.markets.Fill.verify(message.fill);\n                if (error)\n                    return \"fill.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a FillEvent message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.FillEvent\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.FillEvent} FillEvent\n         */\n        FillEvent.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.FillEvent)\n                return object;\n            let message = new $root.markets.FillEvent();\n            if (object.timestamp != null) {\n                if (typeof object.timestamp !== \"object\")\n                    throw TypeError(\".markets.FillEvent.timestamp: object expected\");\n                message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);\n            }\n            if (object.market != null)\n                message.market = String(object.market);\n            if (object.orderID != null)\n                message.orderID = object.orderID >>> 0;\n            if (object.clOrdID != null)\n                message.clOrdID = String(object.clOrdID);\n            if (object.fill != null) {\n                if (typeof object.fill !== \"object\")\n                    throw TypeError(\".markets.FillEvent.fill: object expected\");\n                message.fill = $root.markets.Fill.fromObject(object.fill);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FillEvent message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.FillEvent\n         * @static\n         * @param {markets.FillEvent} message FillEvent\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FillEvent.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.timestamp = null;\n                object.clOrdID = \"\";\n                object.fill = null;\n                object.orderID = 0;\n                object.market = \"\";\n            }\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                object.clOrdID = message.clOrdID;\n            if (message.fill != null && message.hasOwnProperty(\"fill\"))\n                object.fill = $root.markets.Fill.toObject(message.fill, options);\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                object.orderID = message.orderID;\n            if (message.market != null && message.hasOwnProperty(\"market\"))\n                object.market = message.market;\n            return object;\n        };\n\n        /**\n         * Converts this FillEvent to JSON.\n         * @function toJSON\n         * @memberof markets.FillEvent\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FillEvent.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return FillEvent;\n    })();\n\n    markets.FillEventList = (function() {\n\n        /**\n         * Properties of a FillEventList.\n         * @memberof markets\n         * @interface IFillEventList\n         * @property {Array.<markets.IFillEvent>|null} [fills] FillEventList fills\n         */\n\n        /**\n         * Constructs a new FillEventList.\n         * @memberof markets\n         * @classdesc Represents a FillEventList.\n         * @implements IFillEventList\n         * @constructor\n         * @param {markets.IFillEventList=} [properties] Properties to set\n         */\n        function FillEventList(properties) {\n            this.fills = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FillEventList fills.\n         * @member {Array.<markets.IFillEvent>} fills\n         * @memberof markets.FillEventList\n         * @instance\n         */\n        FillEventList.prototype.fills = $util.emptyArray;\n\n        /**\n         * Creates a new FillEventList instance using the specified properties.\n         * @function create\n         * @memberof markets.FillEventList\n         * @static\n         * @param {markets.IFillEventList=} [properties] Properties to set\n         * @returns {markets.FillEventList} FillEventList instance\n         */\n        FillEventList.create = function create(properties) {\n            return new FillEventList(properties);\n        };\n\n        /**\n         * Encodes the specified FillEventList message. Does not implicitly {@link markets.FillEventList.verify|verify} messages.\n         * @function encode\n         * @memberof markets.FillEventList\n         * @static\n         * @param {markets.IFillEventList} message FillEventList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FillEventList.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.fills != null && message.fills.length)\n                for (let i = 0; i < message.fills.length; ++i)\n                    $root.markets.FillEvent.encode(message.fills[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FillEventList message, length delimited. Does not implicitly {@link markets.FillEventList.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.FillEventList\n         * @static\n         * @param {markets.IFillEventList} message FillEventList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FillEventList.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FillEventList message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.FillEventList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.FillEventList} FillEventList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FillEventList.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.FillEventList();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.fills && message.fills.length))\n                        message.fills = [];\n                    message.fills.push($root.markets.FillEvent.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FillEventList message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.FillEventList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.FillEventList} FillEventList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FillEventList.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FillEventList message.\n         * @function verify\n         * @memberof markets.FillEventList\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FillEventList.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.fills != null && message.hasOwnProperty(\"fills\")) {\n                if (!Array.isArray(message.fills))\n                    return \"fills: array expected\";\n                for (let i = 0; i < message.fills.length; ++i) {\n                    let error = $root.markets.FillEvent.verify(message.fills[i]);\n                    if (error)\n                        return \"fills.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a FillEventList message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.FillEventList\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.FillEventList} FillEventList\n         */\n        FillEventList.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.FillEventList)\n                return object;\n            let message = new $root.markets.FillEventList();\n            if (object.fills) {\n                if (!Array.isArray(object.fills))\n                    throw TypeError(\".markets.FillEventList.fills: array expected\");\n                message.fills = [];\n                for (let i = 0; i < object.fills.length; ++i) {\n                    if (typeof object.fills[i] !== \"object\")\n                        throw TypeError(\".markets.FillEventList.fills: object expected\");\n                    message.fills[i] = $root.markets.FillEvent.fromObject(object.fills[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FillEventList message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.FillEventList\n         * @static\n         * @param {markets.FillEventList} message FillEventList\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FillEventList.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.fills = [];\n            if (message.fills && message.fills.length) {\n                object.fills = [];\n                for (let j = 0; j < message.fills.length; ++j)\n                    object.fills[j] = $root.markets.FillEvent.toObject(message.fills[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FillEventList to JSON.\n         * @function toJSON\n         * @memberof markets.FillEventList\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FillEventList.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return FillEventList;\n    })();\n\n    markets.OrderStatusEvent = (function() {\n\n        /**\n         * Properties of an OrderStatusEvent.\n         * @memberof markets\n         * @interface IOrderStatusEvent\n         * @property {google.protobuf.ITimestamp|null} [timestamp] OrderStatusEvent timestamp\n         * @property {markets.OrderStatusCode|null} [code] OrderStatusEvent code\n         * @property {string|null} [reason] OrderStatusEvent reason\n         * @property {markets.IFill|null} [fill] OrderStatusEvent fill\n         * @property {string|null} [market] OrderStatusEvent market\n         * @property {markets.Side|null} [side] OrderStatusEvent side\n         * @property {markets.OrderType|null} [orderType] OrderStatusEvent orderType\n         * @property {number|Long|null} [price] OrderStatusEvent price\n         * @property {number|Long|null} [quantity] OrderStatusEvent quantity\n         * @property {number|Long|null} [stopPrice] OrderStatusEvent stopPrice\n         */\n\n        /**\n         * Constructs a new OrderStatusEvent.\n         * @memberof markets\n         * @classdesc Represents an OrderStatusEvent.\n         * @implements IOrderStatusEvent\n         * @constructor\n         * @param {markets.IOrderStatusEvent=} [properties] Properties to set\n         */\n        function OrderStatusEvent(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OrderStatusEvent timestamp.\n         * @member {google.protobuf.ITimestamp|null|undefined} timestamp\n         * @memberof markets.OrderStatusEvent\n         * @instance\n         */\n        OrderStatusEvent.prototype.timestamp = null;\n\n        /**\n         * OrderStatusEvent code.\n         * @member {markets.OrderStatusCode} code\n         * @memberof markets.OrderStatusEvent\n         * @instance\n         */\n        OrderStatusEvent.prototype.code = 0;\n\n        /**\n         * OrderStatusEvent reason.\n         * @member {string} reason\n         * @memberof markets.OrderStatusEvent\n         * @instance\n         */\n        OrderStatusEvent.prototype.reason = \"\";\n\n        /**\n         * OrderStatusEvent fill.\n         * @member {markets.IFill|null|undefined} fill\n         * @memberof markets.OrderStatusEvent\n         * @instance\n         */\n        OrderStatusEvent.prototype.fill = null;\n\n        /**\n         * OrderStatusEvent market.\n         * @member {string} market\n         * @memberof markets.OrderStatusEvent\n         * @instance\n         */\n        OrderStatusEvent.prototype.market = \"\";\n\n        /**\n         * OrderStatusEvent side.\n         * @member {markets.Side} side\n         * @memberof markets.OrderStatusEvent\n         * @instance\n         */\n        OrderStatusEvent.prototype.side = 0;\n\n        /**\n         * OrderStatusEvent orderType.\n         * @member {markets.OrderType} orderType\n         * @memberof markets.OrderStatusEvent\n         * @instance\n         */\n        OrderStatusEvent.prototype.orderType = 0;\n\n        /**\n         * OrderStatusEvent price.\n         * @member {number|Long} price\n         * @memberof markets.OrderStatusEvent\n         * @instance\n         */\n        OrderStatusEvent.prototype.price = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * OrderStatusEvent quantity.\n         * @member {number|Long} quantity\n         * @memberof markets.OrderStatusEvent\n         * @instance\n         */\n        OrderStatusEvent.prototype.quantity = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * OrderStatusEvent stopPrice.\n         * @member {number|Long} stopPrice\n         * @memberof markets.OrderStatusEvent\n         * @instance\n         */\n        OrderStatusEvent.prototype.stopPrice = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * OrderStatusEvent msg.\n         * @member {\"reason\"|\"fill\"|undefined} msg\n         * @memberof markets.OrderStatusEvent\n         * @instance\n         */\n        Object.defineProperty(OrderStatusEvent.prototype, \"msg\", {\n            get: $util.oneOfGetter($oneOfFields = [\"reason\", \"fill\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new OrderStatusEvent instance using the specified properties.\n         * @function create\n         * @memberof markets.OrderStatusEvent\n         * @static\n         * @param {markets.IOrderStatusEvent=} [properties] Properties to set\n         * @returns {markets.OrderStatusEvent} OrderStatusEvent instance\n         */\n        OrderStatusEvent.create = function create(properties) {\n            return new OrderStatusEvent(properties);\n        };\n\n        /**\n         * Encodes the specified OrderStatusEvent message. Does not implicitly {@link markets.OrderStatusEvent.verify|verify} messages.\n         * @function encode\n         * @memberof markets.OrderStatusEvent\n         * @static\n         * @param {markets.IOrderStatusEvent} message OrderStatusEvent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OrderStatusEvent.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.reason);\n            if (message.fill != null && message.hasOwnProperty(\"fill\"))\n                $root.markets.Fill.encode(message.fill, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.market != null && message.hasOwnProperty(\"market\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.market);\n            if (message.side != null && message.hasOwnProperty(\"side\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.side);\n            if (message.orderType != null && message.hasOwnProperty(\"orderType\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.orderType);\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.price);\n            if (message.quantity != null && message.hasOwnProperty(\"quantity\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.quantity);\n            if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.stopPrice);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OrderStatusEvent message, length delimited. Does not implicitly {@link markets.OrderStatusEvent.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.OrderStatusEvent\n         * @static\n         * @param {markets.IOrderStatusEvent} message OrderStatusEvent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OrderStatusEvent.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OrderStatusEvent message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.OrderStatusEvent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.OrderStatusEvent} OrderStatusEvent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OrderStatusEvent.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.OrderStatusEvent();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.code = reader.int32();\n                    break;\n                case 3:\n                    message.reason = reader.string();\n                    break;\n                case 4:\n                    message.fill = $root.markets.Fill.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.market = reader.string();\n                    break;\n                case 6:\n                    message.side = reader.int32();\n                    break;\n                case 7:\n                    message.orderType = reader.int32();\n                    break;\n                case 8:\n                    message.price = reader.uint64();\n                    break;\n                case 9:\n                    message.quantity = reader.uint64();\n                    break;\n                case 10:\n                    message.stopPrice = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OrderStatusEvent message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.OrderStatusEvent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.OrderStatusEvent} OrderStatusEvent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OrderStatusEvent.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OrderStatusEvent message.\n         * @function verify\n         * @memberof markets.OrderStatusEvent\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OrderStatusEvent.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.timestamp);\n                if (error)\n                    return \"timestamp.\" + error;\n            }\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                switch (message.code) {\n                default:\n                    return \"code: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            if (message.reason != null && message.hasOwnProperty(\"reason\")) {\n                properties.msg = 1;\n                if (!$util.isString(message.reason))\n                    return \"reason: string expected\";\n            }\n            if (message.fill != null && message.hasOwnProperty(\"fill\")) {\n                if (properties.msg === 1)\n                    return \"msg: multiple values\";\n                properties.msg = 1;\n                {\n                    let error = $root.markets.Fill.verify(message.fill);\n                    if (error)\n                        return \"fill.\" + error;\n                }\n            }\n            if (message.market != null && message.hasOwnProperty(\"market\"))\n                if (!$util.isString(message.market))\n                    return \"market: string expected\";\n            if (message.side != null && message.hasOwnProperty(\"side\"))\n                switch (message.side) {\n                default:\n                    return \"side: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.orderType != null && message.hasOwnProperty(\"orderType\"))\n                switch (message.orderType) {\n                default:\n                    return \"orderType: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                    break;\n                }\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (!$util.isInteger(message.price) && !(message.price && $util.isInteger(message.price.low) && $util.isInteger(message.price.high)))\n                    return \"price: integer|Long expected\";\n            if (message.quantity != null && message.hasOwnProperty(\"quantity\"))\n                if (!$util.isInteger(message.quantity) && !(message.quantity && $util.isInteger(message.quantity.low) && $util.isInteger(message.quantity.high)))\n                    return \"quantity: integer|Long expected\";\n            if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                if (!$util.isInteger(message.stopPrice) && !(message.stopPrice && $util.isInteger(message.stopPrice.low) && $util.isInteger(message.stopPrice.high)))\n                    return \"stopPrice: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OrderStatusEvent message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.OrderStatusEvent\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.OrderStatusEvent} OrderStatusEvent\n         */\n        OrderStatusEvent.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.OrderStatusEvent)\n                return object;\n            let message = new $root.markets.OrderStatusEvent();\n            if (object.timestamp != null) {\n                if (typeof object.timestamp !== \"object\")\n                    throw TypeError(\".markets.OrderStatusEvent.timestamp: object expected\");\n                message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);\n            }\n            switch (object.code) {\n            case \"OS_NEW\":\n            case 0:\n                message.code = 0;\n                break;\n            case \"OS_PENDING\":\n            case 1:\n                message.code = 1;\n                break;\n            case \"OS_REJECTED\":\n            case 2:\n                message.code = 2;\n                break;\n            case \"OS_OPEN\":\n            case 3:\n                message.code = 3;\n                break;\n            case \"OS_CANCELED\":\n            case 4:\n                message.code = 4;\n                break;\n            case \"OS_PARTIAL_FILL\":\n            case 5:\n                message.code = 5;\n                break;\n            case \"OS_FILLED\":\n            case 6:\n                message.code = 6;\n                break;\n            }\n            if (object.reason != null)\n                message.reason = String(object.reason);\n            if (object.fill != null) {\n                if (typeof object.fill !== \"object\")\n                    throw TypeError(\".markets.OrderStatusEvent.fill: object expected\");\n                message.fill = $root.markets.Fill.fromObject(object.fill);\n            }\n            if (object.market != null)\n                message.market = String(object.market);\n            switch (object.side) {\n            case \"BUY\":\n            case 0:\n                message.side = 0;\n                break;\n            case \"SELL\":\n            case 1:\n                message.side = 1;\n                break;\n            }\n            switch (object.orderType) {\n            case \"GTC\":\n            case 0:\n                message.orderType = 0;\n                break;\n            case \"AON\":\n            case 1:\n                message.orderType = 1;\n                break;\n            case \"IOC\":\n            case 2:\n                message.orderType = 2;\n                break;\n            case \"FOK\":\n            case 3:\n                message.orderType = 3;\n                break;\n            case \"STOP\":\n            case 4:\n                message.orderType = 4;\n                break;\n            }\n            if (object.price != null)\n                if ($util.Long)\n                    (message.price = $util.Long.fromValue(object.price)).unsigned = true;\n                else if (typeof object.price === \"string\")\n                    message.price = parseInt(object.price, 10);\n                else if (typeof object.price === \"number\")\n                    message.price = object.price;\n                else if (typeof object.price === \"object\")\n                    message.price = new $util.LongBits(object.price.low >>> 0, object.price.high >>> 0).toNumber(true);\n            if (object.quantity != null)\n                if ($util.Long)\n                    (message.quantity = $util.Long.fromValue(object.quantity)).unsigned = true;\n                else if (typeof object.quantity === \"string\")\n                    message.quantity = parseInt(object.quantity, 10);\n                else if (typeof object.quantity === \"number\")\n                    message.quantity = object.quantity;\n                else if (typeof object.quantity === \"object\")\n                    message.quantity = new $util.LongBits(object.quantity.low >>> 0, object.quantity.high >>> 0).toNumber(true);\n            if (object.stopPrice != null)\n                if ($util.Long)\n                    (message.stopPrice = $util.Long.fromValue(object.stopPrice)).unsigned = true;\n                else if (typeof object.stopPrice === \"string\")\n                    message.stopPrice = parseInt(object.stopPrice, 10);\n                else if (typeof object.stopPrice === \"number\")\n                    message.stopPrice = object.stopPrice;\n                else if (typeof object.stopPrice === \"object\")\n                    message.stopPrice = new $util.LongBits(object.stopPrice.low >>> 0, object.stopPrice.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OrderStatusEvent message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.OrderStatusEvent\n         * @static\n         * @param {markets.OrderStatusEvent} message OrderStatusEvent\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OrderStatusEvent.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.timestamp = null;\n                object.code = options.enums === String ? \"OS_NEW\" : 0;\n                object.market = \"\";\n                object.side = options.enums === String ? \"BUY\" : 0;\n                object.orderType = options.enums === String ? \"GTC\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.price = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.price = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.quantity = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.quantity = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.stopPrice = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.stopPrice = options.longs === String ? \"0\" : 0;\n            }\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                object.code = options.enums === String ? $root.markets.OrderStatusCode[message.code] : message.code;\n            if (message.reason != null && message.hasOwnProperty(\"reason\")) {\n                object.reason = message.reason;\n                if (options.oneofs)\n                    object.msg = \"reason\";\n            }\n            if (message.fill != null && message.hasOwnProperty(\"fill\")) {\n                object.fill = $root.markets.Fill.toObject(message.fill, options);\n                if (options.oneofs)\n                    object.msg = \"fill\";\n            }\n            if (message.market != null && message.hasOwnProperty(\"market\"))\n                object.market = message.market;\n            if (message.side != null && message.hasOwnProperty(\"side\"))\n                object.side = options.enums === String ? $root.markets.Side[message.side] : message.side;\n            if (message.orderType != null && message.hasOwnProperty(\"orderType\"))\n                object.orderType = options.enums === String ? $root.markets.OrderType[message.orderType] : message.orderType;\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (typeof message.price === \"number\")\n                    object.price = options.longs === String ? String(message.price) : message.price;\n                else\n                    object.price = options.longs === String ? $util.Long.prototype.toString.call(message.price) : options.longs === Number ? new $util.LongBits(message.price.low >>> 0, message.price.high >>> 0).toNumber(true) : message.price;\n            if (message.quantity != null && message.hasOwnProperty(\"quantity\"))\n                if (typeof message.quantity === \"number\")\n                    object.quantity = options.longs === String ? String(message.quantity) : message.quantity;\n                else\n                    object.quantity = options.longs === String ? $util.Long.prototype.toString.call(message.quantity) : options.longs === Number ? new $util.LongBits(message.quantity.low >>> 0, message.quantity.high >>> 0).toNumber(true) : message.quantity;\n            if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                if (typeof message.stopPrice === \"number\")\n                    object.stopPrice = options.longs === String ? String(message.stopPrice) : message.stopPrice;\n                else\n                    object.stopPrice = options.longs === String ? $util.Long.prototype.toString.call(message.stopPrice) : options.longs === Number ? new $util.LongBits(message.stopPrice.low >>> 0, message.stopPrice.high >>> 0).toNumber(true) : message.stopPrice;\n            return object;\n        };\n\n        /**\n         * Converts this OrderStatusEvent to JSON.\n         * @function toJSON\n         * @memberof markets.OrderStatusEvent\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OrderStatusEvent.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OrderStatusEvent;\n    })();\n\n    markets.OrderStatus = (function() {\n\n        /**\n         * Properties of an OrderStatus.\n         * @memberof markets\n         * @interface IOrderStatus\n         * @property {number|null} [orderID] OrderStatus orderID\n         * @property {number|null} [orderIDParent] OrderStatus orderIDParent\n         * @property {string|null} [clOrdID] OrderStatus clOrdID\n         * @property {markets.IOrderStatusEvent|null} [event] OrderStatus event\n         * @property {number|Long|null} [filled] OrderStatus filled\n         * @property {number|Long|null} [filledCost] OrderStatus filledCost\n         */\n\n        /**\n         * Constructs a new OrderStatus.\n         * @memberof markets\n         * @classdesc Represents an OrderStatus.\n         * @implements IOrderStatus\n         * @constructor\n         * @param {markets.IOrderStatus=} [properties] Properties to set\n         */\n        function OrderStatus(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OrderStatus orderID.\n         * @member {number} orderID\n         * @memberof markets.OrderStatus\n         * @instance\n         */\n        OrderStatus.prototype.orderID = 0;\n\n        /**\n         * OrderStatus orderIDParent.\n         * @member {number} orderIDParent\n         * @memberof markets.OrderStatus\n         * @instance\n         */\n        OrderStatus.prototype.orderIDParent = 0;\n\n        /**\n         * OrderStatus clOrdID.\n         * @member {string} clOrdID\n         * @memberof markets.OrderStatus\n         * @instance\n         */\n        OrderStatus.prototype.clOrdID = \"\";\n\n        /**\n         * OrderStatus event.\n         * @member {markets.IOrderStatusEvent|null|undefined} event\n         * @memberof markets.OrderStatus\n         * @instance\n         */\n        OrderStatus.prototype.event = null;\n\n        /**\n         * OrderStatus filled.\n         * @member {number|Long} filled\n         * @memberof markets.OrderStatus\n         * @instance\n         */\n        OrderStatus.prototype.filled = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * OrderStatus filledCost.\n         * @member {number|Long} filledCost\n         * @memberof markets.OrderStatus\n         * @instance\n         */\n        OrderStatus.prototype.filledCost = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new OrderStatus instance using the specified properties.\n         * @function create\n         * @memberof markets.OrderStatus\n         * @static\n         * @param {markets.IOrderStatus=} [properties] Properties to set\n         * @returns {markets.OrderStatus} OrderStatus instance\n         */\n        OrderStatus.create = function create(properties) {\n            return new OrderStatus(properties);\n        };\n\n        /**\n         * Encodes the specified OrderStatus message. Does not implicitly {@link markets.OrderStatus.verify|verify} messages.\n         * @function encode\n         * @memberof markets.OrderStatus\n         * @static\n         * @param {markets.IOrderStatus} message OrderStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OrderStatus.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.orderID);\n            if (message.orderIDParent != null && message.hasOwnProperty(\"orderIDParent\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.orderIDParent);\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.clOrdID);\n            if (message.event != null && message.hasOwnProperty(\"event\"))\n                $root.markets.OrderStatusEvent.encode(message.event, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.filled != null && message.hasOwnProperty(\"filled\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.filled);\n            if (message.filledCost != null && message.hasOwnProperty(\"filledCost\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.filledCost);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OrderStatus message, length delimited. Does not implicitly {@link markets.OrderStatus.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.OrderStatus\n         * @static\n         * @param {markets.IOrderStatus} message OrderStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OrderStatus.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OrderStatus message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.OrderStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.OrderStatus} OrderStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OrderStatus.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.OrderStatus();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.orderID = reader.uint32();\n                    break;\n                case 2:\n                    message.orderIDParent = reader.uint32();\n                    break;\n                case 3:\n                    message.clOrdID = reader.string();\n                    break;\n                case 4:\n                    message.event = $root.markets.OrderStatusEvent.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.filled = reader.uint64();\n                    break;\n                case 6:\n                    message.filledCost = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OrderStatus message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.OrderStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.OrderStatus} OrderStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OrderStatus.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OrderStatus message.\n         * @function verify\n         * @memberof markets.OrderStatus\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OrderStatus.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                if (!$util.isInteger(message.orderID))\n                    return \"orderID: integer expected\";\n            if (message.orderIDParent != null && message.hasOwnProperty(\"orderIDParent\"))\n                if (!$util.isInteger(message.orderIDParent))\n                    return \"orderIDParent: integer expected\";\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                if (!$util.isString(message.clOrdID))\n                    return \"clOrdID: string expected\";\n            if (message.event != null && message.hasOwnProperty(\"event\")) {\n                let error = $root.markets.OrderStatusEvent.verify(message.event);\n                if (error)\n                    return \"event.\" + error;\n            }\n            if (message.filled != null && message.hasOwnProperty(\"filled\"))\n                if (!$util.isInteger(message.filled) && !(message.filled && $util.isInteger(message.filled.low) && $util.isInteger(message.filled.high)))\n                    return \"filled: integer|Long expected\";\n            if (message.filledCost != null && message.hasOwnProperty(\"filledCost\"))\n                if (!$util.isInteger(message.filledCost) && !(message.filledCost && $util.isInteger(message.filledCost.low) && $util.isInteger(message.filledCost.high)))\n                    return \"filledCost: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OrderStatus message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.OrderStatus\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.OrderStatus} OrderStatus\n         */\n        OrderStatus.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.OrderStatus)\n                return object;\n            let message = new $root.markets.OrderStatus();\n            if (object.orderID != null)\n                message.orderID = object.orderID >>> 0;\n            if (object.orderIDParent != null)\n                message.orderIDParent = object.orderIDParent >>> 0;\n            if (object.clOrdID != null)\n                message.clOrdID = String(object.clOrdID);\n            if (object.event != null) {\n                if (typeof object.event !== \"object\")\n                    throw TypeError(\".markets.OrderStatus.event: object expected\");\n                message.event = $root.markets.OrderStatusEvent.fromObject(object.event);\n            }\n            if (object.filled != null)\n                if ($util.Long)\n                    (message.filled = $util.Long.fromValue(object.filled)).unsigned = true;\n                else if (typeof object.filled === \"string\")\n                    message.filled = parseInt(object.filled, 10);\n                else if (typeof object.filled === \"number\")\n                    message.filled = object.filled;\n                else if (typeof object.filled === \"object\")\n                    message.filled = new $util.LongBits(object.filled.low >>> 0, object.filled.high >>> 0).toNumber(true);\n            if (object.filledCost != null)\n                if ($util.Long)\n                    (message.filledCost = $util.Long.fromValue(object.filledCost)).unsigned = true;\n                else if (typeof object.filledCost === \"string\")\n                    message.filledCost = parseInt(object.filledCost, 10);\n                else if (typeof object.filledCost === \"number\")\n                    message.filledCost = object.filledCost;\n                else if (typeof object.filledCost === \"object\")\n                    message.filledCost = new $util.LongBits(object.filledCost.low >>> 0, object.filledCost.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OrderStatus message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.OrderStatus\n         * @static\n         * @param {markets.OrderStatus} message OrderStatus\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OrderStatus.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.orderID = 0;\n                object.orderIDParent = 0;\n                object.clOrdID = \"\";\n                object.event = null;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.filled = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.filled = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.filledCost = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.filledCost = options.longs === String ? \"0\" : 0;\n            }\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                object.orderID = message.orderID;\n            if (message.orderIDParent != null && message.hasOwnProperty(\"orderIDParent\"))\n                object.orderIDParent = message.orderIDParent;\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                object.clOrdID = message.clOrdID;\n            if (message.event != null && message.hasOwnProperty(\"event\"))\n                object.event = $root.markets.OrderStatusEvent.toObject(message.event, options);\n            if (message.filled != null && message.hasOwnProperty(\"filled\"))\n                if (typeof message.filled === \"number\")\n                    object.filled = options.longs === String ? String(message.filled) : message.filled;\n                else\n                    object.filled = options.longs === String ? $util.Long.prototype.toString.call(message.filled) : options.longs === Number ? new $util.LongBits(message.filled.low >>> 0, message.filled.high >>> 0).toNumber(true) : message.filled;\n            if (message.filledCost != null && message.hasOwnProperty(\"filledCost\"))\n                if (typeof message.filledCost === \"number\")\n                    object.filledCost = options.longs === String ? String(message.filledCost) : message.filledCost;\n                else\n                    object.filledCost = options.longs === String ? $util.Long.prototype.toString.call(message.filledCost) : options.longs === Number ? new $util.LongBits(message.filledCost.low >>> 0, message.filledCost.high >>> 0).toNumber(true) : message.filledCost;\n            return object;\n        };\n\n        /**\n         * Converts this OrderStatus to JSON.\n         * @function toJSON\n         * @memberof markets.OrderStatus\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OrderStatus.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OrderStatus;\n    })();\n\n    markets.Order = (function() {\n\n        /**\n         * Properties of an Order.\n         * @memberof markets\n         * @interface IOrder\n         * @property {number|null} [userID] Order userID\n         * @property {number|null} [profileID] Order profileID\n         * @property {number|null} [pocketID] Order pocketID\n         * @property {string|null} [clOrdID] Order clOrdID\n         * @property {number|null} [orderID] Order orderID\n         * @property {number|null} [orderIDParent] Order orderIDParent\n         * @property {string|null} [market] Order market\n         * @property {markets.Side|null} [side] Order side\n         * @property {markets.OrderType|null} [orderType] Order orderType\n         * @property {number|Long|null} [price] Order price\n         * @property {number|Long|null} [quantity] Order quantity\n         * @property {number|Long|null} [stopPrice] Order stopPrice\n         * @property {google.protobuf.ITimestamp|null} [timestamp] Order timestamp\n         * @property {markets.OrderStatusCode|null} [status] Order status\n         * @property {number|Long|null} [filled] Order filled\n         * @property {number|Long|null} [filledCost] Order filledCost\n         * @property {Array.<markets.IOrderStatusEvent>|null} [history] Order history\n         */\n\n        /**\n         * Constructs a new Order.\n         * @memberof markets\n         * @classdesc Represents an Order.\n         * @implements IOrder\n         * @constructor\n         * @param {markets.IOrder=} [properties] Properties to set\n         */\n        function Order(properties) {\n            this.history = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Order userID.\n         * @member {number} userID\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.userID = 0;\n\n        /**\n         * Order profileID.\n         * @member {number} profileID\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.profileID = 0;\n\n        /**\n         * Order pocketID.\n         * @member {number} pocketID\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.pocketID = 0;\n\n        /**\n         * Order clOrdID.\n         * @member {string} clOrdID\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.clOrdID = \"\";\n\n        /**\n         * Order orderID.\n         * @member {number} orderID\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.orderID = 0;\n\n        /**\n         * Order orderIDParent.\n         * @member {number} orderIDParent\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.orderIDParent = 0;\n\n        /**\n         * Order market.\n         * @member {string} market\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.market = \"\";\n\n        /**\n         * Order side.\n         * @member {markets.Side} side\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.side = 0;\n\n        /**\n         * Order orderType.\n         * @member {markets.OrderType} orderType\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.orderType = 0;\n\n        /**\n         * Order price.\n         * @member {number|Long} price\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.price = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Order quantity.\n         * @member {number|Long} quantity\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.quantity = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Order stopPrice.\n         * @member {number|Long} stopPrice\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.stopPrice = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Order timestamp.\n         * @member {google.protobuf.ITimestamp|null|undefined} timestamp\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.timestamp = null;\n\n        /**\n         * Order status.\n         * @member {markets.OrderStatusCode} status\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.status = 0;\n\n        /**\n         * Order filled.\n         * @member {number|Long} filled\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.filled = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Order filledCost.\n         * @member {number|Long} filledCost\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.filledCost = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Order history.\n         * @member {Array.<markets.IOrderStatusEvent>} history\n         * @memberof markets.Order\n         * @instance\n         */\n        Order.prototype.history = $util.emptyArray;\n\n        /**\n         * Creates a new Order instance using the specified properties.\n         * @function create\n         * @memberof markets.Order\n         * @static\n         * @param {markets.IOrder=} [properties] Properties to set\n         * @returns {markets.Order} Order instance\n         */\n        Order.create = function create(properties) {\n            return new Order(properties);\n        };\n\n        /**\n         * Encodes the specified Order message. Does not implicitly {@link markets.Order.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Order\n         * @static\n         * @param {markets.IOrder} message Order message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Order.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userID != null && message.hasOwnProperty(\"userID\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userID);\n            if (message.profileID != null && message.hasOwnProperty(\"profileID\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.profileID);\n            if (message.pocketID != null && message.hasOwnProperty(\"pocketID\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.pocketID);\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.clOrdID);\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.orderID);\n            if (message.orderIDParent != null && message.hasOwnProperty(\"orderIDParent\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.orderIDParent);\n            if (message.market != null && message.hasOwnProperty(\"market\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.market);\n            if (message.side != null && message.hasOwnProperty(\"side\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.side);\n            if (message.orderType != null && message.hasOwnProperty(\"orderType\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.orderType);\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.price);\n            if (message.quantity != null && message.hasOwnProperty(\"quantity\"))\n                writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.quantity);\n            if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.stopPrice);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.status);\n            if (message.filled != null && message.hasOwnProperty(\"filled\"))\n                writer.uint32(/* id 15, wireType 0 =*/120).uint64(message.filled);\n            if (message.filledCost != null && message.hasOwnProperty(\"filledCost\"))\n                writer.uint32(/* id 16, wireType 0 =*/128).uint64(message.filledCost);\n            if (message.history != null && message.history.length)\n                for (let i = 0; i < message.history.length; ++i)\n                    $root.markets.OrderStatusEvent.encode(message.history[i], writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Order message, length delimited. Does not implicitly {@link markets.Order.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Order\n         * @static\n         * @param {markets.IOrder} message Order message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Order.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Order message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Order\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Order} Order\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Order.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Order();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.userID = reader.uint32();\n                    break;\n                case 2:\n                    message.profileID = reader.uint32();\n                    break;\n                case 3:\n                    message.pocketID = reader.uint32();\n                    break;\n                case 4:\n                    message.clOrdID = reader.string();\n                    break;\n                case 5:\n                    message.orderID = reader.uint32();\n                    break;\n                case 6:\n                    message.orderIDParent = reader.uint32();\n                    break;\n                case 7:\n                    message.market = reader.string();\n                    break;\n                case 8:\n                    message.side = reader.int32();\n                    break;\n                case 9:\n                    message.orderType = reader.int32();\n                    break;\n                case 10:\n                    message.price = reader.uint64();\n                    break;\n                case 11:\n                    message.quantity = reader.uint64();\n                    break;\n                case 12:\n                    message.stopPrice = reader.uint64();\n                    break;\n                case 13:\n                    message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    message.status = reader.int32();\n                    break;\n                case 15:\n                    message.filled = reader.uint64();\n                    break;\n                case 16:\n                    message.filledCost = reader.uint64();\n                    break;\n                case 17:\n                    if (!(message.history && message.history.length))\n                        message.history = [];\n                    message.history.push($root.markets.OrderStatusEvent.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Order message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Order\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Order} Order\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Order.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Order message.\n         * @function verify\n         * @memberof markets.Order\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Order.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userID != null && message.hasOwnProperty(\"userID\"))\n                if (!$util.isInteger(message.userID))\n                    return \"userID: integer expected\";\n            if (message.profileID != null && message.hasOwnProperty(\"profileID\"))\n                if (!$util.isInteger(message.profileID))\n                    return \"profileID: integer expected\";\n            if (message.pocketID != null && message.hasOwnProperty(\"pocketID\"))\n                if (!$util.isInteger(message.pocketID))\n                    return \"pocketID: integer expected\";\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                if (!$util.isString(message.clOrdID))\n                    return \"clOrdID: string expected\";\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                if (!$util.isInteger(message.orderID))\n                    return \"orderID: integer expected\";\n            if (message.orderIDParent != null && message.hasOwnProperty(\"orderIDParent\"))\n                if (!$util.isInteger(message.orderIDParent))\n                    return \"orderIDParent: integer expected\";\n            if (message.market != null && message.hasOwnProperty(\"market\"))\n                if (!$util.isString(message.market))\n                    return \"market: string expected\";\n            if (message.side != null && message.hasOwnProperty(\"side\"))\n                switch (message.side) {\n                default:\n                    return \"side: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.orderType != null && message.hasOwnProperty(\"orderType\"))\n                switch (message.orderType) {\n                default:\n                    return \"orderType: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                    break;\n                }\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (!$util.isInteger(message.price) && !(message.price && $util.isInteger(message.price.low) && $util.isInteger(message.price.high)))\n                    return \"price: integer|Long expected\";\n            if (message.quantity != null && message.hasOwnProperty(\"quantity\"))\n                if (!$util.isInteger(message.quantity) && !(message.quantity && $util.isInteger(message.quantity.low) && $util.isInteger(message.quantity.high)))\n                    return \"quantity: integer|Long expected\";\n            if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                if (!$util.isInteger(message.stopPrice) && !(message.stopPrice && $util.isInteger(message.stopPrice.low) && $util.isInteger(message.stopPrice.high)))\n                    return \"stopPrice: integer|Long expected\";\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.timestamp);\n                if (error)\n                    return \"timestamp.\" + error;\n            }\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                switch (message.status) {\n                default:\n                    return \"status: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            if (message.filled != null && message.hasOwnProperty(\"filled\"))\n                if (!$util.isInteger(message.filled) && !(message.filled && $util.isInteger(message.filled.low) && $util.isInteger(message.filled.high)))\n                    return \"filled: integer|Long expected\";\n            if (message.filledCost != null && message.hasOwnProperty(\"filledCost\"))\n                if (!$util.isInteger(message.filledCost) && !(message.filledCost && $util.isInteger(message.filledCost.low) && $util.isInteger(message.filledCost.high)))\n                    return \"filledCost: integer|Long expected\";\n            if (message.history != null && message.hasOwnProperty(\"history\")) {\n                if (!Array.isArray(message.history))\n                    return \"history: array expected\";\n                for (let i = 0; i < message.history.length; ++i) {\n                    let error = $root.markets.OrderStatusEvent.verify(message.history[i]);\n                    if (error)\n                        return \"history.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an Order message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Order\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Order} Order\n         */\n        Order.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Order)\n                return object;\n            let message = new $root.markets.Order();\n            if (object.userID != null)\n                message.userID = object.userID >>> 0;\n            if (object.profileID != null)\n                message.profileID = object.profileID >>> 0;\n            if (object.pocketID != null)\n                message.pocketID = object.pocketID >>> 0;\n            if (object.clOrdID != null)\n                message.clOrdID = String(object.clOrdID);\n            if (object.orderID != null)\n                message.orderID = object.orderID >>> 0;\n            if (object.orderIDParent != null)\n                message.orderIDParent = object.orderIDParent >>> 0;\n            if (object.market != null)\n                message.market = String(object.market);\n            switch (object.side) {\n            case \"BUY\":\n            case 0:\n                message.side = 0;\n                break;\n            case \"SELL\":\n            case 1:\n                message.side = 1;\n                break;\n            }\n            switch (object.orderType) {\n            case \"GTC\":\n            case 0:\n                message.orderType = 0;\n                break;\n            case \"AON\":\n            case 1:\n                message.orderType = 1;\n                break;\n            case \"IOC\":\n            case 2:\n                message.orderType = 2;\n                break;\n            case \"FOK\":\n            case 3:\n                message.orderType = 3;\n                break;\n            case \"STOP\":\n            case 4:\n                message.orderType = 4;\n                break;\n            }\n            if (object.price != null)\n                if ($util.Long)\n                    (message.price = $util.Long.fromValue(object.price)).unsigned = true;\n                else if (typeof object.price === \"string\")\n                    message.price = parseInt(object.price, 10);\n                else if (typeof object.price === \"number\")\n                    message.price = object.price;\n                else if (typeof object.price === \"object\")\n                    message.price = new $util.LongBits(object.price.low >>> 0, object.price.high >>> 0).toNumber(true);\n            if (object.quantity != null)\n                if ($util.Long)\n                    (message.quantity = $util.Long.fromValue(object.quantity)).unsigned = true;\n                else if (typeof object.quantity === \"string\")\n                    message.quantity = parseInt(object.quantity, 10);\n                else if (typeof object.quantity === \"number\")\n                    message.quantity = object.quantity;\n                else if (typeof object.quantity === \"object\")\n                    message.quantity = new $util.LongBits(object.quantity.low >>> 0, object.quantity.high >>> 0).toNumber(true);\n            if (object.stopPrice != null)\n                if ($util.Long)\n                    (message.stopPrice = $util.Long.fromValue(object.stopPrice)).unsigned = true;\n                else if (typeof object.stopPrice === \"string\")\n                    message.stopPrice = parseInt(object.stopPrice, 10);\n                else if (typeof object.stopPrice === \"number\")\n                    message.stopPrice = object.stopPrice;\n                else if (typeof object.stopPrice === \"object\")\n                    message.stopPrice = new $util.LongBits(object.stopPrice.low >>> 0, object.stopPrice.high >>> 0).toNumber(true);\n            if (object.timestamp != null) {\n                if (typeof object.timestamp !== \"object\")\n                    throw TypeError(\".markets.Order.timestamp: object expected\");\n                message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);\n            }\n            switch (object.status) {\n            case \"OS_NEW\":\n            case 0:\n                message.status = 0;\n                break;\n            case \"OS_PENDING\":\n            case 1:\n                message.status = 1;\n                break;\n            case \"OS_REJECTED\":\n            case 2:\n                message.status = 2;\n                break;\n            case \"OS_OPEN\":\n            case 3:\n                message.status = 3;\n                break;\n            case \"OS_CANCELED\":\n            case 4:\n                message.status = 4;\n                break;\n            case \"OS_PARTIAL_FILL\":\n            case 5:\n                message.status = 5;\n                break;\n            case \"OS_FILLED\":\n            case 6:\n                message.status = 6;\n                break;\n            }\n            if (object.filled != null)\n                if ($util.Long)\n                    (message.filled = $util.Long.fromValue(object.filled)).unsigned = true;\n                else if (typeof object.filled === \"string\")\n                    message.filled = parseInt(object.filled, 10);\n                else if (typeof object.filled === \"number\")\n                    message.filled = object.filled;\n                else if (typeof object.filled === \"object\")\n                    message.filled = new $util.LongBits(object.filled.low >>> 0, object.filled.high >>> 0).toNumber(true);\n            if (object.filledCost != null)\n                if ($util.Long)\n                    (message.filledCost = $util.Long.fromValue(object.filledCost)).unsigned = true;\n                else if (typeof object.filledCost === \"string\")\n                    message.filledCost = parseInt(object.filledCost, 10);\n                else if (typeof object.filledCost === \"number\")\n                    message.filledCost = object.filledCost;\n                else if (typeof object.filledCost === \"object\")\n                    message.filledCost = new $util.LongBits(object.filledCost.low >>> 0, object.filledCost.high >>> 0).toNumber(true);\n            if (object.history) {\n                if (!Array.isArray(object.history))\n                    throw TypeError(\".markets.Order.history: array expected\");\n                message.history = [];\n                for (let i = 0; i < object.history.length; ++i) {\n                    if (typeof object.history[i] !== \"object\")\n                        throw TypeError(\".markets.Order.history: object expected\");\n                    message.history[i] = $root.markets.OrderStatusEvent.fromObject(object.history[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Order message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Order\n         * @static\n         * @param {markets.Order} message Order\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Order.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.history = [];\n            if (options.defaults) {\n                object.userID = 0;\n                object.profileID = 0;\n                object.pocketID = 0;\n                object.clOrdID = \"\";\n                object.orderID = 0;\n                object.orderIDParent = 0;\n                object.market = \"\";\n                object.side = options.enums === String ? \"BUY\" : 0;\n                object.orderType = options.enums === String ? \"GTC\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.price = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.price = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.quantity = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.quantity = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.stopPrice = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.stopPrice = options.longs === String ? \"0\" : 0;\n                object.timestamp = null;\n                object.status = options.enums === String ? \"OS_NEW\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.filled = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.filled = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.filledCost = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.filledCost = options.longs === String ? \"0\" : 0;\n            }\n            if (message.userID != null && message.hasOwnProperty(\"userID\"))\n                object.userID = message.userID;\n            if (message.profileID != null && message.hasOwnProperty(\"profileID\"))\n                object.profileID = message.profileID;\n            if (message.pocketID != null && message.hasOwnProperty(\"pocketID\"))\n                object.pocketID = message.pocketID;\n            if (message.clOrdID != null && message.hasOwnProperty(\"clOrdID\"))\n                object.clOrdID = message.clOrdID;\n            if (message.orderID != null && message.hasOwnProperty(\"orderID\"))\n                object.orderID = message.orderID;\n            if (message.orderIDParent != null && message.hasOwnProperty(\"orderIDParent\"))\n                object.orderIDParent = message.orderIDParent;\n            if (message.market != null && message.hasOwnProperty(\"market\"))\n                object.market = message.market;\n            if (message.side != null && message.hasOwnProperty(\"side\"))\n                object.side = options.enums === String ? $root.markets.Side[message.side] : message.side;\n            if (message.orderType != null && message.hasOwnProperty(\"orderType\"))\n                object.orderType = options.enums === String ? $root.markets.OrderType[message.orderType] : message.orderType;\n            if (message.price != null && message.hasOwnProperty(\"price\"))\n                if (typeof message.price === \"number\")\n                    object.price = options.longs === String ? String(message.price) : message.price;\n                else\n                    object.price = options.longs === String ? $util.Long.prototype.toString.call(message.price) : options.longs === Number ? new $util.LongBits(message.price.low >>> 0, message.price.high >>> 0).toNumber(true) : message.price;\n            if (message.quantity != null && message.hasOwnProperty(\"quantity\"))\n                if (typeof message.quantity === \"number\")\n                    object.quantity = options.longs === String ? String(message.quantity) : message.quantity;\n                else\n                    object.quantity = options.longs === String ? $util.Long.prototype.toString.call(message.quantity) : options.longs === Number ? new $util.LongBits(message.quantity.low >>> 0, message.quantity.high >>> 0).toNumber(true) : message.quantity;\n            if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                if (typeof message.stopPrice === \"number\")\n                    object.stopPrice = options.longs === String ? String(message.stopPrice) : message.stopPrice;\n                else\n                    object.stopPrice = options.longs === String ? $util.Long.prototype.toString.call(message.stopPrice) : options.longs === Number ? new $util.LongBits(message.stopPrice.low >>> 0, message.stopPrice.high >>> 0).toNumber(true) : message.stopPrice;\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                object.status = options.enums === String ? $root.markets.OrderStatusCode[message.status] : message.status;\n            if (message.filled != null && message.hasOwnProperty(\"filled\"))\n                if (typeof message.filled === \"number\")\n                    object.filled = options.longs === String ? String(message.filled) : message.filled;\n                else\n                    object.filled = options.longs === String ? $util.Long.prototype.toString.call(message.filled) : options.longs === Number ? new $util.LongBits(message.filled.low >>> 0, message.filled.high >>> 0).toNumber(true) : message.filled;\n            if (message.filledCost != null && message.hasOwnProperty(\"filledCost\"))\n                if (typeof message.filledCost === \"number\")\n                    object.filledCost = options.longs === String ? String(message.filledCost) : message.filledCost;\n                else\n                    object.filledCost = options.longs === String ? $util.Long.prototype.toString.call(message.filledCost) : options.longs === Number ? new $util.LongBits(message.filledCost.low >>> 0, message.filledCost.high >>> 0).toNumber(true) : message.filledCost;\n            if (message.history && message.history.length) {\n                object.history = [];\n                for (let j = 0; j < message.history.length; ++j)\n                    object.history[j] = $root.markets.OrderStatusEvent.toObject(message.history[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Order to JSON.\n         * @function toJSON\n         * @memberof markets.Order\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Order.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Order;\n    })();\n\n    markets.OrderList = (function() {\n\n        /**\n         * Properties of an OrderList.\n         * @memberof markets\n         * @interface IOrderList\n         * @property {Array.<markets.IOrder>|null} [orders] OrderList orders\n         */\n\n        /**\n         * Constructs a new OrderList.\n         * @memberof markets\n         * @classdesc Represents an OrderList.\n         * @implements IOrderList\n         * @constructor\n         * @param {markets.IOrderList=} [properties] Properties to set\n         */\n        function OrderList(properties) {\n            this.orders = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OrderList orders.\n         * @member {Array.<markets.IOrder>} orders\n         * @memberof markets.OrderList\n         * @instance\n         */\n        OrderList.prototype.orders = $util.emptyArray;\n\n        /**\n         * Creates a new OrderList instance using the specified properties.\n         * @function create\n         * @memberof markets.OrderList\n         * @static\n         * @param {markets.IOrderList=} [properties] Properties to set\n         * @returns {markets.OrderList} OrderList instance\n         */\n        OrderList.create = function create(properties) {\n            return new OrderList(properties);\n        };\n\n        /**\n         * Encodes the specified OrderList message. Does not implicitly {@link markets.OrderList.verify|verify} messages.\n         * @function encode\n         * @memberof markets.OrderList\n         * @static\n         * @param {markets.IOrderList} message OrderList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OrderList.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.orders != null && message.orders.length)\n                for (let i = 0; i < message.orders.length; ++i)\n                    $root.markets.Order.encode(message.orders[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OrderList message, length delimited. Does not implicitly {@link markets.OrderList.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.OrderList\n         * @static\n         * @param {markets.IOrderList} message OrderList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OrderList.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OrderList message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.OrderList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.OrderList} OrderList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OrderList.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.OrderList();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.orders && message.orders.length))\n                        message.orders = [];\n                    message.orders.push($root.markets.Order.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OrderList message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.OrderList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.OrderList} OrderList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OrderList.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OrderList message.\n         * @function verify\n         * @memberof markets.OrderList\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OrderList.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.orders != null && message.hasOwnProperty(\"orders\")) {\n                if (!Array.isArray(message.orders))\n                    return \"orders: array expected\";\n                for (let i = 0; i < message.orders.length; ++i) {\n                    let error = $root.markets.Order.verify(message.orders[i]);\n                    if (error)\n                        return \"orders.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an OrderList message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.OrderList\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.OrderList} OrderList\n         */\n        OrderList.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.OrderList)\n                return object;\n            let message = new $root.markets.OrderList();\n            if (object.orders) {\n                if (!Array.isArray(object.orders))\n                    throw TypeError(\".markets.OrderList.orders: array expected\");\n                message.orders = [];\n                for (let i = 0; i < object.orders.length; ++i) {\n                    if (typeof object.orders[i] !== \"object\")\n                        throw TypeError(\".markets.OrderList.orders: object expected\");\n                    message.orders[i] = $root.markets.Order.fromObject(object.orders[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OrderList message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.OrderList\n         * @static\n         * @param {markets.OrderList} message OrderList\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OrderList.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.orders = [];\n            if (message.orders && message.orders.length) {\n                object.orders = [];\n                for (let j = 0; j < message.orders.length; ++j)\n                    object.orders[j] = $root.markets.Order.toObject(message.orders[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this OrderList to JSON.\n         * @function toJSON\n         * @memberof markets.OrderList\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OrderList.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OrderList;\n    })();\n\n    markets.Date = (function() {\n\n        /**\n         * Properties of a Date.\n         * @memberof markets\n         * @interface IDate\n         * @property {number|null} [year] Date year\n         * @property {number|null} [month] Date month\n         * @property {number|null} [day] Date day\n         */\n\n        /**\n         * Constructs a new Date.\n         * @memberof markets\n         * @classdesc Represents a Date.\n         * @implements IDate\n         * @constructor\n         * @param {markets.IDate=} [properties] Properties to set\n         */\n        function Date(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Date year.\n         * @member {number} year\n         * @memberof markets.Date\n         * @instance\n         */\n        Date.prototype.year = 0;\n\n        /**\n         * Date month.\n         * @member {number} month\n         * @memberof markets.Date\n         * @instance\n         */\n        Date.prototype.month = 0;\n\n        /**\n         * Date day.\n         * @member {number} day\n         * @memberof markets.Date\n         * @instance\n         */\n        Date.prototype.day = 0;\n\n        /**\n         * Creates a new Date instance using the specified properties.\n         * @function create\n         * @memberof markets.Date\n         * @static\n         * @param {markets.IDate=} [properties] Properties to set\n         * @returns {markets.Date} Date instance\n         */\n        Date.create = function create(properties) {\n            return new Date(properties);\n        };\n\n        /**\n         * Encodes the specified Date message. Does not implicitly {@link markets.Date.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Date\n         * @static\n         * @param {markets.IDate} message Date message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Date.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.year != null && message.hasOwnProperty(\"year\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.year);\n            if (message.month != null && message.hasOwnProperty(\"month\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.month);\n            if (message.day != null && message.hasOwnProperty(\"day\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.day);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Date message, length delimited. Does not implicitly {@link markets.Date.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Date\n         * @static\n         * @param {markets.IDate} message Date message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Date.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Date message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Date\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Date} Date\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Date.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Date();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.year = reader.uint32();\n                    break;\n                case 2:\n                    message.month = reader.uint32();\n                    break;\n                case 3:\n                    message.day = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Date message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Date\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Date} Date\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Date.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Date message.\n         * @function verify\n         * @memberof markets.Date\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Date.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.year != null && message.hasOwnProperty(\"year\"))\n                if (!$util.isInteger(message.year))\n                    return \"year: integer expected\";\n            if (message.month != null && message.hasOwnProperty(\"month\"))\n                if (!$util.isInteger(message.month))\n                    return \"month: integer expected\";\n            if (message.day != null && message.hasOwnProperty(\"day\"))\n                if (!$util.isInteger(message.day))\n                    return \"day: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Date message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Date\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Date} Date\n         */\n        Date.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Date)\n                return object;\n            let message = new $root.markets.Date();\n            if (object.year != null)\n                message.year = object.year >>> 0;\n            if (object.month != null)\n                message.month = object.month >>> 0;\n            if (object.day != null)\n                message.day = object.day >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Date message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Date\n         * @static\n         * @param {markets.Date} message Date\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Date.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.year = 0;\n                object.month = 0;\n                object.day = 0;\n            }\n            if (message.year != null && message.hasOwnProperty(\"year\"))\n                object.year = message.year;\n            if (message.month != null && message.hasOwnProperty(\"month\"))\n                object.month = message.month;\n            if (message.day != null && message.hasOwnProperty(\"day\"))\n                object.day = message.day;\n            return object;\n        };\n\n        /**\n         * Converts this Date to JSON.\n         * @function toJSON\n         * @memberof markets.Date\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Date.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Date;\n    })();\n\n    markets.px = (function() {\n\n        /**\n         * Properties of a px.\n         * @memberof markets\n         * @interface Ipx\n         * @property {number|Long|null} [val] px val\n         */\n\n        /**\n         * Constructs a new px.\n         * @memberof markets\n         * @classdesc Represents a px.\n         * @implements Ipx\n         * @constructor\n         * @param {markets.Ipx=} [properties] Properties to set\n         */\n        function px(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * px val.\n         * @member {number|Long} val\n         * @memberof markets.px\n         * @instance\n         */\n        px.prototype.val = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new px instance using the specified properties.\n         * @function create\n         * @memberof markets.px\n         * @static\n         * @param {markets.Ipx=} [properties] Properties to set\n         * @returns {markets.px} px instance\n         */\n        px.create = function create(properties) {\n            return new px(properties);\n        };\n\n        /**\n         * Encodes the specified px message. Does not implicitly {@link markets.px.verify|verify} messages.\n         * @function encode\n         * @memberof markets.px\n         * @static\n         * @param {markets.Ipx} message px message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        px.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.val != null && message.hasOwnProperty(\"val\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).sint64(message.val);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified px message, length delimited. Does not implicitly {@link markets.px.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.px\n         * @static\n         * @param {markets.Ipx} message px message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        px.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a px message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.px\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.px} px\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        px.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.px();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.val = reader.sint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a px message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.px\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.px} px\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        px.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a px message.\n         * @function verify\n         * @memberof markets.px\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        px.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.val != null && message.hasOwnProperty(\"val\"))\n                if (!$util.isInteger(message.val) && !(message.val && $util.isInteger(message.val.low) && $util.isInteger(message.val.high)))\n                    return \"val: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a px message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.px\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.px} px\n         */\n        px.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.px)\n                return object;\n            let message = new $root.markets.px();\n            if (object.val != null)\n                if ($util.Long)\n                    (message.val = $util.Long.fromValue(object.val)).unsigned = false;\n                else if (typeof object.val === \"string\")\n                    message.val = parseInt(object.val, 10);\n                else if (typeof object.val === \"number\")\n                    message.val = object.val;\n                else if (typeof object.val === \"object\")\n                    message.val = new $util.LongBits(object.val.low >>> 0, object.val.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a px message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.px\n         * @static\n         * @param {markets.px} message px\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        px.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.val = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.val = options.longs === String ? \"0\" : 0;\n            if (message.val != null && message.hasOwnProperty(\"val\"))\n                if (typeof message.val === \"number\")\n                    object.val = options.longs === String ? String(message.val) : message.val;\n                else\n                    object.val = options.longs === String ? $util.Long.prototype.toString.call(message.val) : options.longs === Number ? new $util.LongBits(message.val.low >>> 0, message.val.high >>> 0).toNumber() : message.val;\n            return object;\n        };\n\n        /**\n         * Converts this px to JSON.\n         * @function toJSON\n         * @memberof markets.px\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        px.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return px;\n    })();\n\n    markets.sz = (function() {\n\n        /**\n         * Properties of a sz.\n         * @memberof markets\n         * @interface Isz\n         * @property {number|Long|null} [val] sz val\n         */\n\n        /**\n         * Constructs a new sz.\n         * @memberof markets\n         * @classdesc Represents a sz.\n         * @implements Isz\n         * @constructor\n         * @param {markets.Isz=} [properties] Properties to set\n         */\n        function sz(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * sz val.\n         * @member {number|Long} val\n         * @memberof markets.sz\n         * @instance\n         */\n        sz.prototype.val = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new sz instance using the specified properties.\n         * @function create\n         * @memberof markets.sz\n         * @static\n         * @param {markets.Isz=} [properties] Properties to set\n         * @returns {markets.sz} sz instance\n         */\n        sz.create = function create(properties) {\n            return new sz(properties);\n        };\n\n        /**\n         * Encodes the specified sz message. Does not implicitly {@link markets.sz.verify|verify} messages.\n         * @function encode\n         * @memberof markets.sz\n         * @static\n         * @param {markets.Isz} message sz message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        sz.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.val != null && message.hasOwnProperty(\"val\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.val);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified sz message, length delimited. Does not implicitly {@link markets.sz.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.sz\n         * @static\n         * @param {markets.Isz} message sz message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        sz.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a sz message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.sz\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.sz} sz\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        sz.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.sz();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.val = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a sz message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.sz\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.sz} sz\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        sz.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a sz message.\n         * @function verify\n         * @memberof markets.sz\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        sz.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.val != null && message.hasOwnProperty(\"val\"))\n                if (!$util.isInteger(message.val) && !(message.val && $util.isInteger(message.val.low) && $util.isInteger(message.val.high)))\n                    return \"val: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a sz message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.sz\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.sz} sz\n         */\n        sz.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.sz)\n                return object;\n            let message = new $root.markets.sz();\n            if (object.val != null)\n                if ($util.Long)\n                    (message.val = $util.Long.fromValue(object.val)).unsigned = true;\n                else if (typeof object.val === \"string\")\n                    message.val = parseInt(object.val, 10);\n                else if (typeof object.val === \"number\")\n                    message.val = object.val;\n                else if (typeof object.val === \"object\")\n                    message.val = new $util.LongBits(object.val.low >>> 0, object.val.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a sz message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.sz\n         * @static\n         * @param {markets.sz} message sz\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        sz.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.val = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.val = options.longs === String ? \"0\" : 0;\n            if (message.val != null && message.hasOwnProperty(\"val\"))\n                if (typeof message.val === \"number\")\n                    object.val = options.longs === String ? String(message.val) : message.val;\n                else\n                    object.val = options.longs === String ? $util.Long.prototype.toString.call(message.val) : options.longs === Number ? new $util.LongBits(message.val.low >>> 0, message.val.high >>> 0).toNumber(true) : message.val;\n            return object;\n        };\n\n        /**\n         * Converts this sz to JSON.\n         * @function toJSON\n         * @memberof markets.sz\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        sz.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return sz;\n    })();\n\n    markets.Summary = (function() {\n\n        /**\n         * Properties of a Summary.\n         * @memberof markets\n         * @interface ISummary\n         * @property {google.protobuf.ITimestamp|null} [timestamp] Summary timestamp\n         * @property {string|null} [symbol] Summary symbol\n         * @property {markets.IDate|null} [day] Summary day\n         * @property {markets.Ipx|null} [closePrior] Summary closePrior\n         * @property {markets.Ipx|null} [closePrior24] Summary closePrior24\n         * @property {markets.Ipx|null} [open] Summary open\n         * @property {markets.Ipx|null} [open24] Summary open24\n         * @property {markets.Ipx|null} [high] Summary high\n         * @property {markets.Ipx|null} [high24] Summary high24\n         * @property {markets.Ipx|null} [low] Summary low\n         * @property {markets.Ipx|null} [low24] Summary low24\n         * @property {markets.Ipx|null} [last] Summary last\n         * @property {markets.Isz|null} [lastQty] Summary lastQty\n         * @property {markets.Isz|null} [lastQtyCum] Summary lastQtyCum\n         * @property {markets.Ipx|null} [lastPrior] Summary lastPrior\n         * @property {google.protobuf.ITimestamp|null} [lastTime] Summary lastTime\n         * @property {markets.Isz|null} [volume] Summary volume\n         * @property {markets.Isz|null} [volume24] Summary volume24\n         * @property {markets.Isz|null} [volumeCum] Summary volumeCum\n         * @property {markets.Ipx|null} [bid] Summary bid\n         * @property {markets.Isz|null} [bidQty] Summary bidQty\n         * @property {markets.Ipx|null} [bidPrior] Summary bidPrior\n         * @property {markets.Ipx|null} [ask] Summary ask\n         * @property {markets.Isz|null} [askQty] Summary askQty\n         * @property {markets.Ipx|null} [askPrior] Summary askPrior\n         * @property {number|null} [flags] Summary flags\n         */\n\n        /**\n         * Constructs a new Summary.\n         * @memberof markets\n         * @classdesc Represents a Summary.\n         * @implements ISummary\n         * @constructor\n         * @param {markets.ISummary=} [properties] Properties to set\n         */\n        function Summary(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Summary timestamp.\n         * @member {google.protobuf.ITimestamp|null|undefined} timestamp\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.timestamp = null;\n\n        /**\n         * Summary symbol.\n         * @member {string} symbol\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.symbol = \"\";\n\n        /**\n         * Summary day.\n         * @member {markets.IDate|null|undefined} day\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.day = null;\n\n        /**\n         * Summary closePrior.\n         * @member {markets.Ipx|null|undefined} closePrior\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.closePrior = null;\n\n        /**\n         * Summary closePrior24.\n         * @member {markets.Ipx|null|undefined} closePrior24\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.closePrior24 = null;\n\n        /**\n         * Summary open.\n         * @member {markets.Ipx|null|undefined} open\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.open = null;\n\n        /**\n         * Summary open24.\n         * @member {markets.Ipx|null|undefined} open24\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.open24 = null;\n\n        /**\n         * Summary high.\n         * @member {markets.Ipx|null|undefined} high\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.high = null;\n\n        /**\n         * Summary high24.\n         * @member {markets.Ipx|null|undefined} high24\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.high24 = null;\n\n        /**\n         * Summary low.\n         * @member {markets.Ipx|null|undefined} low\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.low = null;\n\n        /**\n         * Summary low24.\n         * @member {markets.Ipx|null|undefined} low24\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.low24 = null;\n\n        /**\n         * Summary last.\n         * @member {markets.Ipx|null|undefined} last\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.last = null;\n\n        /**\n         * Summary lastQty.\n         * @member {markets.Isz|null|undefined} lastQty\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.lastQty = null;\n\n        /**\n         * Summary lastQtyCum.\n         * @member {markets.Isz|null|undefined} lastQtyCum\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.lastQtyCum = null;\n\n        /**\n         * Summary lastPrior.\n         * @member {markets.Ipx|null|undefined} lastPrior\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.lastPrior = null;\n\n        /**\n         * Summary lastTime.\n         * @member {google.protobuf.ITimestamp|null|undefined} lastTime\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.lastTime = null;\n\n        /**\n         * Summary volume.\n         * @member {markets.Isz|null|undefined} volume\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.volume = null;\n\n        /**\n         * Summary volume24.\n         * @member {markets.Isz|null|undefined} volume24\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.volume24 = null;\n\n        /**\n         * Summary volumeCum.\n         * @member {markets.Isz|null|undefined} volumeCum\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.volumeCum = null;\n\n        /**\n         * Summary bid.\n         * @member {markets.Ipx|null|undefined} bid\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.bid = null;\n\n        /**\n         * Summary bidQty.\n         * @member {markets.Isz|null|undefined} bidQty\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.bidQty = null;\n\n        /**\n         * Summary bidPrior.\n         * @member {markets.Ipx|null|undefined} bidPrior\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.bidPrior = null;\n\n        /**\n         * Summary ask.\n         * @member {markets.Ipx|null|undefined} ask\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.ask = null;\n\n        /**\n         * Summary askQty.\n         * @member {markets.Isz|null|undefined} askQty\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.askQty = null;\n\n        /**\n         * Summary askPrior.\n         * @member {markets.Ipx|null|undefined} askPrior\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.askPrior = null;\n\n        /**\n         * Summary flags.\n         * @member {number} flags\n         * @memberof markets.Summary\n         * @instance\n         */\n        Summary.prototype.flags = 0;\n\n        /**\n         * Creates a new Summary instance using the specified properties.\n         * @function create\n         * @memberof markets.Summary\n         * @static\n         * @param {markets.ISummary=} [properties] Properties to set\n         * @returns {markets.Summary} Summary instance\n         */\n        Summary.create = function create(properties) {\n            return new Summary(properties);\n        };\n\n        /**\n         * Encodes the specified Summary message. Does not implicitly {@link markets.Summary.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Summary\n         * @static\n         * @param {markets.ISummary} message Summary message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Summary.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.symbol != null && message.hasOwnProperty(\"symbol\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.symbol);\n            if (message.day != null && message.hasOwnProperty(\"day\"))\n                $root.markets.Date.encode(message.day, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.closePrior24 != null && message.hasOwnProperty(\"closePrior24\"))\n                $root.markets.px.encode(message.closePrior24, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.closePrior != null && message.hasOwnProperty(\"closePrior\"))\n                $root.markets.px.encode(message.closePrior, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.open != null && message.hasOwnProperty(\"open\"))\n                $root.markets.px.encode(message.open, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.high != null && message.hasOwnProperty(\"high\"))\n                $root.markets.px.encode(message.high, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.high24 != null && message.hasOwnProperty(\"high24\"))\n                $root.markets.px.encode(message.high24, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.low != null && message.hasOwnProperty(\"low\"))\n                $root.markets.px.encode(message.low, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.low24 != null && message.hasOwnProperty(\"low24\"))\n                $root.markets.px.encode(message.low24, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.last != null && message.hasOwnProperty(\"last\"))\n                $root.markets.px.encode(message.last, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.lastQty != null && message.hasOwnProperty(\"lastQty\"))\n                $root.markets.sz.encode(message.lastQty, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.lastQtyCum != null && message.hasOwnProperty(\"lastQtyCum\"))\n                $root.markets.sz.encode(message.lastQtyCum, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.lastPrior != null && message.hasOwnProperty(\"lastPrior\"))\n                $root.markets.px.encode(message.lastPrior, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.lastTime != null && message.hasOwnProperty(\"lastTime\"))\n                $root.google.protobuf.Timestamp.encode(message.lastTime, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                $root.markets.sz.encode(message.volume, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();\n            if (message.volume24 != null && message.hasOwnProperty(\"volume24\"))\n                $root.markets.sz.encode(message.volume24, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n            if (message.volumeCum != null && message.hasOwnProperty(\"volumeCum\"))\n                $root.markets.sz.encode(message.volumeCum, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n            if (message.bid != null && message.hasOwnProperty(\"bid\"))\n                $root.markets.px.encode(message.bid, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();\n            if (message.bidQty != null && message.hasOwnProperty(\"bidQty\"))\n                $root.markets.sz.encode(message.bidQty, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.bidPrior != null && message.hasOwnProperty(\"bidPrior\"))\n                $root.markets.px.encode(message.bidPrior, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n            if (message.ask != null && message.hasOwnProperty(\"ask\"))\n                $root.markets.px.encode(message.ask, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.askQty != null && message.hasOwnProperty(\"askQty\"))\n                $root.markets.sz.encode(message.askQty, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            if (message.askPrior != null && message.hasOwnProperty(\"askPrior\"))\n                $root.markets.px.encode(message.askPrior, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();\n            if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.flags);\n            if (message.open24 != null && message.hasOwnProperty(\"open24\"))\n                $root.markets.px.encode(message.open24, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Summary message, length delimited. Does not implicitly {@link markets.Summary.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Summary\n         * @static\n         * @param {markets.ISummary} message Summary message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Summary.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Summary message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Summary\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Summary} Summary\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Summary.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Summary();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.symbol = reader.string();\n                    break;\n                case 3:\n                    message.day = $root.markets.Date.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.closePrior = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.closePrior24 = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.open = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 26:\n                    message.open24 = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.high = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.high24 = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.low = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.low24 = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.last = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.lastQty = $root.markets.sz.decode(reader, reader.uint32());\n                    break;\n                case 13:\n                    message.lastQtyCum = $root.markets.sz.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    message.lastPrior = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.lastTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 16:\n                    message.volume = $root.markets.sz.decode(reader, reader.uint32());\n                    break;\n                case 17:\n                    message.volume24 = $root.markets.sz.decode(reader, reader.uint32());\n                    break;\n                case 18:\n                    message.volumeCum = $root.markets.sz.decode(reader, reader.uint32());\n                    break;\n                case 19:\n                    message.bid = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 20:\n                    message.bidQty = $root.markets.sz.decode(reader, reader.uint32());\n                    break;\n                case 21:\n                    message.bidPrior = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 22:\n                    message.ask = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 23:\n                    message.askQty = $root.markets.sz.decode(reader, reader.uint32());\n                    break;\n                case 24:\n                    message.askPrior = $root.markets.px.decode(reader, reader.uint32());\n                    break;\n                case 25:\n                    message.flags = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Summary message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Summary\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Summary} Summary\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Summary.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Summary message.\n         * @function verify\n         * @memberof markets.Summary\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Summary.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.timestamp);\n                if (error)\n                    return \"timestamp.\" + error;\n            }\n            if (message.symbol != null && message.hasOwnProperty(\"symbol\"))\n                if (!$util.isString(message.symbol))\n                    return \"symbol: string expected\";\n            if (message.day != null && message.hasOwnProperty(\"day\")) {\n                let error = $root.markets.Date.verify(message.day);\n                if (error)\n                    return \"day.\" + error;\n            }\n            if (message.closePrior != null && message.hasOwnProperty(\"closePrior\")) {\n                let error = $root.markets.px.verify(message.closePrior);\n                if (error)\n                    return \"closePrior.\" + error;\n            }\n            if (message.closePrior24 != null && message.hasOwnProperty(\"closePrior24\")) {\n                let error = $root.markets.px.verify(message.closePrior24);\n                if (error)\n                    return \"closePrior24.\" + error;\n            }\n            if (message.open != null && message.hasOwnProperty(\"open\")) {\n                let error = $root.markets.px.verify(message.open);\n                if (error)\n                    return \"open.\" + error;\n            }\n            if (message.open24 != null && message.hasOwnProperty(\"open24\")) {\n                let error = $root.markets.px.verify(message.open24);\n                if (error)\n                    return \"open24.\" + error;\n            }\n            if (message.high != null && message.hasOwnProperty(\"high\")) {\n                let error = $root.markets.px.verify(message.high);\n                if (error)\n                    return \"high.\" + error;\n            }\n            if (message.high24 != null && message.hasOwnProperty(\"high24\")) {\n                let error = $root.markets.px.verify(message.high24);\n                if (error)\n                    return \"high24.\" + error;\n            }\n            if (message.low != null && message.hasOwnProperty(\"low\")) {\n                let error = $root.markets.px.verify(message.low);\n                if (error)\n                    return \"low.\" + error;\n            }\n            if (message.low24 != null && message.hasOwnProperty(\"low24\")) {\n                let error = $root.markets.px.verify(message.low24);\n                if (error)\n                    return \"low24.\" + error;\n            }\n            if (message.last != null && message.hasOwnProperty(\"last\")) {\n                let error = $root.markets.px.verify(message.last);\n                if (error)\n                    return \"last.\" + error;\n            }\n            if (message.lastQty != null && message.hasOwnProperty(\"lastQty\")) {\n                let error = $root.markets.sz.verify(message.lastQty);\n                if (error)\n                    return \"lastQty.\" + error;\n            }\n            if (message.lastQtyCum != null && message.hasOwnProperty(\"lastQtyCum\")) {\n                let error = $root.markets.sz.verify(message.lastQtyCum);\n                if (error)\n                    return \"lastQtyCum.\" + error;\n            }\n            if (message.lastPrior != null && message.hasOwnProperty(\"lastPrior\")) {\n                let error = $root.markets.px.verify(message.lastPrior);\n                if (error)\n                    return \"lastPrior.\" + error;\n            }\n            if (message.lastTime != null && message.hasOwnProperty(\"lastTime\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.lastTime);\n                if (error)\n                    return \"lastTime.\" + error;\n            }\n            if (message.volume != null && message.hasOwnProperty(\"volume\")) {\n                let error = $root.markets.sz.verify(message.volume);\n                if (error)\n                    return \"volume.\" + error;\n            }\n            if (message.volume24 != null && message.hasOwnProperty(\"volume24\")) {\n                let error = $root.markets.sz.verify(message.volume24);\n                if (error)\n                    return \"volume24.\" + error;\n            }\n            if (message.volumeCum != null && message.hasOwnProperty(\"volumeCum\")) {\n                let error = $root.markets.sz.verify(message.volumeCum);\n                if (error)\n                    return \"volumeCum.\" + error;\n            }\n            if (message.bid != null && message.hasOwnProperty(\"bid\")) {\n                let error = $root.markets.px.verify(message.bid);\n                if (error)\n                    return \"bid.\" + error;\n            }\n            if (message.bidQty != null && message.hasOwnProperty(\"bidQty\")) {\n                let error = $root.markets.sz.verify(message.bidQty);\n                if (error)\n                    return \"bidQty.\" + error;\n            }\n            if (message.bidPrior != null && message.hasOwnProperty(\"bidPrior\")) {\n                let error = $root.markets.px.verify(message.bidPrior);\n                if (error)\n                    return \"bidPrior.\" + error;\n            }\n            if (message.ask != null && message.hasOwnProperty(\"ask\")) {\n                let error = $root.markets.px.verify(message.ask);\n                if (error)\n                    return \"ask.\" + error;\n            }\n            if (message.askQty != null && message.hasOwnProperty(\"askQty\")) {\n                let error = $root.markets.sz.verify(message.askQty);\n                if (error)\n                    return \"askQty.\" + error;\n            }\n            if (message.askPrior != null && message.hasOwnProperty(\"askPrior\")) {\n                let error = $root.markets.px.verify(message.askPrior);\n                if (error)\n                    return \"askPrior.\" + error;\n            }\n            if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                if (!$util.isInteger(message.flags))\n                    return \"flags: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Summary message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Summary\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Summary} Summary\n         */\n        Summary.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Summary)\n                return object;\n            let message = new $root.markets.Summary();\n            if (object.timestamp != null) {\n                if (typeof object.timestamp !== \"object\")\n                    throw TypeError(\".markets.Summary.timestamp: object expected\");\n                message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);\n            }\n            if (object.symbol != null)\n                message.symbol = String(object.symbol);\n            if (object.day != null) {\n                if (typeof object.day !== \"object\")\n                    throw TypeError(\".markets.Summary.day: object expected\");\n                message.day = $root.markets.Date.fromObject(object.day);\n            }\n            if (object.closePrior != null) {\n                if (typeof object.closePrior !== \"object\")\n                    throw TypeError(\".markets.Summary.closePrior: object expected\");\n                message.closePrior = $root.markets.px.fromObject(object.closePrior);\n            }\n            if (object.closePrior24 != null) {\n                if (typeof object.closePrior24 !== \"object\")\n                    throw TypeError(\".markets.Summary.closePrior24: object expected\");\n                message.closePrior24 = $root.markets.px.fromObject(object.closePrior24);\n            }\n            if (object.open != null) {\n                if (typeof object.open !== \"object\")\n                    throw TypeError(\".markets.Summary.open: object expected\");\n                message.open = $root.markets.px.fromObject(object.open);\n            }\n            if (object.open24 != null) {\n                if (typeof object.open24 !== \"object\")\n                    throw TypeError(\".markets.Summary.open24: object expected\");\n                message.open24 = $root.markets.px.fromObject(object.open24);\n            }\n            if (object.high != null) {\n                if (typeof object.high !== \"object\")\n                    throw TypeError(\".markets.Summary.high: object expected\");\n                message.high = $root.markets.px.fromObject(object.high);\n            }\n            if (object.high24 != null) {\n                if (typeof object.high24 !== \"object\")\n                    throw TypeError(\".markets.Summary.high24: object expected\");\n                message.high24 = $root.markets.px.fromObject(object.high24);\n            }\n            if (object.low != null) {\n                if (typeof object.low !== \"object\")\n                    throw TypeError(\".markets.Summary.low: object expected\");\n                message.low = $root.markets.px.fromObject(object.low);\n            }\n            if (object.low24 != null) {\n                if (typeof object.low24 !== \"object\")\n                    throw TypeError(\".markets.Summary.low24: object expected\");\n                message.low24 = $root.markets.px.fromObject(object.low24);\n            }\n            if (object.last != null) {\n                if (typeof object.last !== \"object\")\n                    throw TypeError(\".markets.Summary.last: object expected\");\n                message.last = $root.markets.px.fromObject(object.last);\n            }\n            if (object.lastQty != null) {\n                if (typeof object.lastQty !== \"object\")\n                    throw TypeError(\".markets.Summary.lastQty: object expected\");\n                message.lastQty = $root.markets.sz.fromObject(object.lastQty);\n            }\n            if (object.lastQtyCum != null) {\n                if (typeof object.lastQtyCum !== \"object\")\n                    throw TypeError(\".markets.Summary.lastQtyCum: object expected\");\n                message.lastQtyCum = $root.markets.sz.fromObject(object.lastQtyCum);\n            }\n            if (object.lastPrior != null) {\n                if (typeof object.lastPrior !== \"object\")\n                    throw TypeError(\".markets.Summary.lastPrior: object expected\");\n                message.lastPrior = $root.markets.px.fromObject(object.lastPrior);\n            }\n            if (object.lastTime != null) {\n                if (typeof object.lastTime !== \"object\")\n                    throw TypeError(\".markets.Summary.lastTime: object expected\");\n                message.lastTime = $root.google.protobuf.Timestamp.fromObject(object.lastTime);\n            }\n            if (object.volume != null) {\n                if (typeof object.volume !== \"object\")\n                    throw TypeError(\".markets.Summary.volume: object expected\");\n                message.volume = $root.markets.sz.fromObject(object.volume);\n            }\n            if (object.volume24 != null) {\n                if (typeof object.volume24 !== \"object\")\n                    throw TypeError(\".markets.Summary.volume24: object expected\");\n                message.volume24 = $root.markets.sz.fromObject(object.volume24);\n            }\n            if (object.volumeCum != null) {\n                if (typeof object.volumeCum !== \"object\")\n                    throw TypeError(\".markets.Summary.volumeCum: object expected\");\n                message.volumeCum = $root.markets.sz.fromObject(object.volumeCum);\n            }\n            if (object.bid != null) {\n                if (typeof object.bid !== \"object\")\n                    throw TypeError(\".markets.Summary.bid: object expected\");\n                message.bid = $root.markets.px.fromObject(object.bid);\n            }\n            if (object.bidQty != null) {\n                if (typeof object.bidQty !== \"object\")\n                    throw TypeError(\".markets.Summary.bidQty: object expected\");\n                message.bidQty = $root.markets.sz.fromObject(object.bidQty);\n            }\n            if (object.bidPrior != null) {\n                if (typeof object.bidPrior !== \"object\")\n                    throw TypeError(\".markets.Summary.bidPrior: object expected\");\n                message.bidPrior = $root.markets.px.fromObject(object.bidPrior);\n            }\n            if (object.ask != null) {\n                if (typeof object.ask !== \"object\")\n                    throw TypeError(\".markets.Summary.ask: object expected\");\n                message.ask = $root.markets.px.fromObject(object.ask);\n            }\n            if (object.askQty != null) {\n                if (typeof object.askQty !== \"object\")\n                    throw TypeError(\".markets.Summary.askQty: object expected\");\n                message.askQty = $root.markets.sz.fromObject(object.askQty);\n            }\n            if (object.askPrior != null) {\n                if (typeof object.askPrior !== \"object\")\n                    throw TypeError(\".markets.Summary.askPrior: object expected\");\n                message.askPrior = $root.markets.px.fromObject(object.askPrior);\n            }\n            if (object.flags != null)\n                message.flags = object.flags >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Summary message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Summary\n         * @static\n         * @param {markets.Summary} message Summary\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Summary.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.timestamp = null;\n                object.symbol = \"\";\n                object.day = null;\n                object.closePrior24 = null;\n                object.closePrior = null;\n                object.open = null;\n                object.high = null;\n                object.high24 = null;\n                object.low = null;\n                object.low24 = null;\n                object.last = null;\n                object.lastQty = null;\n                object.lastQtyCum = null;\n                object.lastPrior = null;\n                object.lastTime = null;\n                object.volume = null;\n                object.volume24 = null;\n                object.volumeCum = null;\n                object.bid = null;\n                object.bidQty = null;\n                object.bidPrior = null;\n                object.ask = null;\n                object.askQty = null;\n                object.askPrior = null;\n                object.flags = 0;\n                object.open24 = null;\n            }\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);\n            if (message.symbol != null && message.hasOwnProperty(\"symbol\"))\n                object.symbol = message.symbol;\n            if (message.day != null && message.hasOwnProperty(\"day\"))\n                object.day = $root.markets.Date.toObject(message.day, options);\n            if (message.closePrior24 != null && message.hasOwnProperty(\"closePrior24\"))\n                object.closePrior24 = $root.markets.px.toObject(message.closePrior24, options);\n            if (message.closePrior != null && message.hasOwnProperty(\"closePrior\"))\n                object.closePrior = $root.markets.px.toObject(message.closePrior, options);\n            if (message.open != null && message.hasOwnProperty(\"open\"))\n                object.open = $root.markets.px.toObject(message.open, options);\n            if (message.high != null && message.hasOwnProperty(\"high\"))\n                object.high = $root.markets.px.toObject(message.high, options);\n            if (message.high24 != null && message.hasOwnProperty(\"high24\"))\n                object.high24 = $root.markets.px.toObject(message.high24, options);\n            if (message.low != null && message.hasOwnProperty(\"low\"))\n                object.low = $root.markets.px.toObject(message.low, options);\n            if (message.low24 != null && message.hasOwnProperty(\"low24\"))\n                object.low24 = $root.markets.px.toObject(message.low24, options);\n            if (message.last != null && message.hasOwnProperty(\"last\"))\n                object.last = $root.markets.px.toObject(message.last, options);\n            if (message.lastQty != null && message.hasOwnProperty(\"lastQty\"))\n                object.lastQty = $root.markets.sz.toObject(message.lastQty, options);\n            if (message.lastQtyCum != null && message.hasOwnProperty(\"lastQtyCum\"))\n                object.lastQtyCum = $root.markets.sz.toObject(message.lastQtyCum, options);\n            if (message.lastPrior != null && message.hasOwnProperty(\"lastPrior\"))\n                object.lastPrior = $root.markets.px.toObject(message.lastPrior, options);\n            if (message.lastTime != null && message.hasOwnProperty(\"lastTime\"))\n                object.lastTime = $root.google.protobuf.Timestamp.toObject(message.lastTime, options);\n            if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                object.volume = $root.markets.sz.toObject(message.volume, options);\n            if (message.volume24 != null && message.hasOwnProperty(\"volume24\"))\n                object.volume24 = $root.markets.sz.toObject(message.volume24, options);\n            if (message.volumeCum != null && message.hasOwnProperty(\"volumeCum\"))\n                object.volumeCum = $root.markets.sz.toObject(message.volumeCum, options);\n            if (message.bid != null && message.hasOwnProperty(\"bid\"))\n                object.bid = $root.markets.px.toObject(message.bid, options);\n            if (message.bidQty != null && message.hasOwnProperty(\"bidQty\"))\n                object.bidQty = $root.markets.sz.toObject(message.bidQty, options);\n            if (message.bidPrior != null && message.hasOwnProperty(\"bidPrior\"))\n                object.bidPrior = $root.markets.px.toObject(message.bidPrior, options);\n            if (message.ask != null && message.hasOwnProperty(\"ask\"))\n                object.ask = $root.markets.px.toObject(message.ask, options);\n            if (message.askQty != null && message.hasOwnProperty(\"askQty\"))\n                object.askQty = $root.markets.sz.toObject(message.askQty, options);\n            if (message.askPrior != null && message.hasOwnProperty(\"askPrior\"))\n                object.askPrior = $root.markets.px.toObject(message.askPrior, options);\n            if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                object.flags = message.flags;\n            if (message.open24 != null && message.hasOwnProperty(\"open24\"))\n                object.open24 = $root.markets.px.toObject(message.open24, options);\n            return object;\n        };\n\n        /**\n         * Converts this Summary to JSON.\n         * @function toJSON\n         * @memberof markets.Summary\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Summary.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Summary;\n    })();\n\n    markets.Position = (function() {\n\n        /**\n         * Properties of a Position.\n         * @memberof markets\n         * @interface IPosition\n         * @property {number|Long|null} [available] Position available\n         * @property {number|Long|null} [open] Position open\n         * @property {number|Long|null} [pending] Position pending\n         */\n\n        /**\n         * Constructs a new Position.\n         * @memberof markets\n         * @classdesc Represents a Position.\n         * @implements IPosition\n         * @constructor\n         * @param {markets.IPosition=} [properties] Properties to set\n         */\n        function Position(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Position available.\n         * @member {number|Long} available\n         * @memberof markets.Position\n         * @instance\n         */\n        Position.prototype.available = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Position open.\n         * @member {number|Long} open\n         * @memberof markets.Position\n         * @instance\n         */\n        Position.prototype.open = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Position pending.\n         * @member {number|Long} pending\n         * @memberof markets.Position\n         * @instance\n         */\n        Position.prototype.pending = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new Position instance using the specified properties.\n         * @function create\n         * @memberof markets.Position\n         * @static\n         * @param {markets.IPosition=} [properties] Properties to set\n         * @returns {markets.Position} Position instance\n         */\n        Position.create = function create(properties) {\n            return new Position(properties);\n        };\n\n        /**\n         * Encodes the specified Position message. Does not implicitly {@link markets.Position.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Position\n         * @static\n         * @param {markets.IPosition} message Position message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Position.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.available != null && message.hasOwnProperty(\"available\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.available);\n            if (message.open != null && message.hasOwnProperty(\"open\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.open);\n            if (message.pending != null && message.hasOwnProperty(\"pending\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.pending);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Position message, length delimited. Does not implicitly {@link markets.Position.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Position\n         * @static\n         * @param {markets.IPosition} message Position message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Position.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Position message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Position\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Position} Position\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Position.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Position();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.available = reader.uint64();\n                    break;\n                case 2:\n                    message.open = reader.uint64();\n                    break;\n                case 3:\n                    message.pending = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Position message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Position\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Position} Position\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Position.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Position message.\n         * @function verify\n         * @memberof markets.Position\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Position.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.available != null && message.hasOwnProperty(\"available\"))\n                if (!$util.isInteger(message.available) && !(message.available && $util.isInteger(message.available.low) && $util.isInteger(message.available.high)))\n                    return \"available: integer|Long expected\";\n            if (message.open != null && message.hasOwnProperty(\"open\"))\n                if (!$util.isInteger(message.open) && !(message.open && $util.isInteger(message.open.low) && $util.isInteger(message.open.high)))\n                    return \"open: integer|Long expected\";\n            if (message.pending != null && message.hasOwnProperty(\"pending\"))\n                if (!$util.isInteger(message.pending) && !(message.pending && $util.isInteger(message.pending.low) && $util.isInteger(message.pending.high)))\n                    return \"pending: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Position message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Position\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Position} Position\n         */\n        Position.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Position)\n                return object;\n            let message = new $root.markets.Position();\n            if (object.available != null)\n                if ($util.Long)\n                    (message.available = $util.Long.fromValue(object.available)).unsigned = true;\n                else if (typeof object.available === \"string\")\n                    message.available = parseInt(object.available, 10);\n                else if (typeof object.available === \"number\")\n                    message.available = object.available;\n                else if (typeof object.available === \"object\")\n                    message.available = new $util.LongBits(object.available.low >>> 0, object.available.high >>> 0).toNumber(true);\n            if (object.open != null)\n                if ($util.Long)\n                    (message.open = $util.Long.fromValue(object.open)).unsigned = true;\n                else if (typeof object.open === \"string\")\n                    message.open = parseInt(object.open, 10);\n                else if (typeof object.open === \"number\")\n                    message.open = object.open;\n                else if (typeof object.open === \"object\")\n                    message.open = new $util.LongBits(object.open.low >>> 0, object.open.high >>> 0).toNumber(true);\n            if (object.pending != null)\n                if ($util.Long)\n                    (message.pending = $util.Long.fromValue(object.pending)).unsigned = true;\n                else if (typeof object.pending === \"string\")\n                    message.pending = parseInt(object.pending, 10);\n                else if (typeof object.pending === \"number\")\n                    message.pending = object.pending;\n                else if (typeof object.pending === \"object\")\n                    message.pending = new $util.LongBits(object.pending.low >>> 0, object.pending.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Position message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Position\n         * @static\n         * @param {markets.Position} message Position\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Position.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.available = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.available = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.open = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.open = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.pending = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.pending = options.longs === String ? \"0\" : 0;\n            }\n            if (message.available != null && message.hasOwnProperty(\"available\"))\n                if (typeof message.available === \"number\")\n                    object.available = options.longs === String ? String(message.available) : message.available;\n                else\n                    object.available = options.longs === String ? $util.Long.prototype.toString.call(message.available) : options.longs === Number ? new $util.LongBits(message.available.low >>> 0, message.available.high >>> 0).toNumber(true) : message.available;\n            if (message.open != null && message.hasOwnProperty(\"open\"))\n                if (typeof message.open === \"number\")\n                    object.open = options.longs === String ? String(message.open) : message.open;\n                else\n                    object.open = options.longs === String ? $util.Long.prototype.toString.call(message.open) : options.longs === Number ? new $util.LongBits(message.open.low >>> 0, message.open.high >>> 0).toNumber(true) : message.open;\n            if (message.pending != null && message.hasOwnProperty(\"pending\"))\n                if (typeof message.pending === \"number\")\n                    object.pending = options.longs === String ? String(message.pending) : message.pending;\n                else\n                    object.pending = options.longs === String ? $util.Long.prototype.toString.call(message.pending) : options.longs === Number ? new $util.LongBits(message.pending.low >>> 0, message.pending.high >>> 0).toNumber(true) : message.pending;\n            return object;\n        };\n\n        /**\n         * Converts this Position to JSON.\n         * @function toJSON\n         * @memberof markets.Position\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Position.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Position;\n    })();\n\n    markets.Wallet = (function() {\n\n        /**\n         * Properties of a Wallet.\n         * @memberof markets\n         * @interface IWallet\n         * @property {string|null} [asset] Wallet asset\n         * @property {markets.IPosition|null} [position] Wallet position\n         */\n\n        /**\n         * Constructs a new Wallet.\n         * @memberof markets\n         * @classdesc Represents a Wallet.\n         * @implements IWallet\n         * @constructor\n         * @param {markets.IWallet=} [properties] Properties to set\n         */\n        function Wallet(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Wallet asset.\n         * @member {string} asset\n         * @memberof markets.Wallet\n         * @instance\n         */\n        Wallet.prototype.asset = \"\";\n\n        /**\n         * Wallet position.\n         * @member {markets.IPosition|null|undefined} position\n         * @memberof markets.Wallet\n         * @instance\n         */\n        Wallet.prototype.position = null;\n\n        /**\n         * Creates a new Wallet instance using the specified properties.\n         * @function create\n         * @memberof markets.Wallet\n         * @static\n         * @param {markets.IWallet=} [properties] Properties to set\n         * @returns {markets.Wallet} Wallet instance\n         */\n        Wallet.create = function create(properties) {\n            return new Wallet(properties);\n        };\n\n        /**\n         * Encodes the specified Wallet message. Does not implicitly {@link markets.Wallet.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Wallet\n         * @static\n         * @param {markets.IWallet} message Wallet message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Wallet.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.asset != null && message.hasOwnProperty(\"asset\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.asset);\n            if (message.position != null && message.hasOwnProperty(\"position\"))\n                $root.markets.Position.encode(message.position, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Wallet message, length delimited. Does not implicitly {@link markets.Wallet.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Wallet\n         * @static\n         * @param {markets.IWallet} message Wallet message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Wallet.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Wallet message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Wallet\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Wallet} Wallet\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Wallet.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Wallet();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.asset = reader.string();\n                    break;\n                case 2:\n                    message.position = $root.markets.Position.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Wallet message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Wallet\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Wallet} Wallet\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Wallet.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Wallet message.\n         * @function verify\n         * @memberof markets.Wallet\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Wallet.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.asset != null && message.hasOwnProperty(\"asset\"))\n                if (!$util.isString(message.asset))\n                    return \"asset: string expected\";\n            if (message.position != null && message.hasOwnProperty(\"position\")) {\n                let error = $root.markets.Position.verify(message.position);\n                if (error)\n                    return \"position.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Wallet message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Wallet\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Wallet} Wallet\n         */\n        Wallet.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Wallet)\n                return object;\n            let message = new $root.markets.Wallet();\n            if (object.asset != null)\n                message.asset = String(object.asset);\n            if (object.position != null) {\n                if (typeof object.position !== \"object\")\n                    throw TypeError(\".markets.Wallet.position: object expected\");\n                message.position = $root.markets.Position.fromObject(object.position);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Wallet message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Wallet\n         * @static\n         * @param {markets.Wallet} message Wallet\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Wallet.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.asset = \"\";\n                object.position = null;\n            }\n            if (message.asset != null && message.hasOwnProperty(\"asset\"))\n                object.asset = message.asset;\n            if (message.position != null && message.hasOwnProperty(\"position\"))\n                object.position = $root.markets.Position.toObject(message.position, options);\n            return object;\n        };\n\n        /**\n         * Converts this Wallet to JSON.\n         * @function toJSON\n         * @memberof markets.Wallet\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Wallet.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Wallet;\n    })();\n\n    markets.Pocket = (function() {\n\n        /**\n         * Properties of a Pocket.\n         * @memberof markets\n         * @interface IPocket\n         * @property {number|null} [profileID] Pocket profileID\n         * @property {string|null} [name] Pocket name\n         * @property {Array.<markets.IWallet>|null} [wallets] Pocket wallets\n         */\n\n        /**\n         * Constructs a new Pocket.\n         * @memberof markets\n         * @classdesc Represents a Pocket.\n         * @implements IPocket\n         * @constructor\n         * @param {markets.IPocket=} [properties] Properties to set\n         */\n        function Pocket(properties) {\n            this.wallets = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Pocket profileID.\n         * @member {number} profileID\n         * @memberof markets.Pocket\n         * @instance\n         */\n        Pocket.prototype.profileID = 0;\n\n        /**\n         * Pocket name.\n         * @member {string} name\n         * @memberof markets.Pocket\n         * @instance\n         */\n        Pocket.prototype.name = \"\";\n\n        /**\n         * Pocket wallets.\n         * @member {Array.<markets.IWallet>} wallets\n         * @memberof markets.Pocket\n         * @instance\n         */\n        Pocket.prototype.wallets = $util.emptyArray;\n\n        /**\n         * Creates a new Pocket instance using the specified properties.\n         * @function create\n         * @memberof markets.Pocket\n         * @static\n         * @param {markets.IPocket=} [properties] Properties to set\n         * @returns {markets.Pocket} Pocket instance\n         */\n        Pocket.create = function create(properties) {\n            return new Pocket(properties);\n        };\n\n        /**\n         * Encodes the specified Pocket message. Does not implicitly {@link markets.Pocket.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Pocket\n         * @static\n         * @param {markets.IPocket} message Pocket message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Pocket.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.profileID != null && message.hasOwnProperty(\"profileID\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.profileID);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.wallets != null && message.wallets.length)\n                for (let i = 0; i < message.wallets.length; ++i)\n                    $root.markets.Wallet.encode(message.wallets[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Pocket message, length delimited. Does not implicitly {@link markets.Pocket.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Pocket\n         * @static\n         * @param {markets.IPocket} message Pocket message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Pocket.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Pocket message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Pocket\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Pocket} Pocket\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Pocket.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Pocket();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.profileID = reader.uint32();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    if (!(message.wallets && message.wallets.length))\n                        message.wallets = [];\n                    message.wallets.push($root.markets.Wallet.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Pocket message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Pocket\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Pocket} Pocket\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Pocket.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Pocket message.\n         * @function verify\n         * @memberof markets.Pocket\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Pocket.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.profileID != null && message.hasOwnProperty(\"profileID\"))\n                if (!$util.isInteger(message.profileID))\n                    return \"profileID: integer expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.wallets != null && message.hasOwnProperty(\"wallets\")) {\n                if (!Array.isArray(message.wallets))\n                    return \"wallets: array expected\";\n                for (let i = 0; i < message.wallets.length; ++i) {\n                    let error = $root.markets.Wallet.verify(message.wallets[i]);\n                    if (error)\n                        return \"wallets.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Pocket message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Pocket\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Pocket} Pocket\n         */\n        Pocket.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Pocket)\n                return object;\n            let message = new $root.markets.Pocket();\n            if (object.profileID != null)\n                message.profileID = object.profileID >>> 0;\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.wallets) {\n                if (!Array.isArray(object.wallets))\n                    throw TypeError(\".markets.Pocket.wallets: array expected\");\n                message.wallets = [];\n                for (let i = 0; i < object.wallets.length; ++i) {\n                    if (typeof object.wallets[i] !== \"object\")\n                        throw TypeError(\".markets.Pocket.wallets: object expected\");\n                    message.wallets[i] = $root.markets.Wallet.fromObject(object.wallets[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Pocket message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Pocket\n         * @static\n         * @param {markets.Pocket} message Pocket\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Pocket.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.wallets = [];\n            if (options.defaults) {\n                object.profileID = 0;\n                object.name = \"\";\n            }\n            if (message.profileID != null && message.hasOwnProperty(\"profileID\"))\n                object.profileID = message.profileID;\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.wallets && message.wallets.length) {\n                object.wallets = [];\n                for (let j = 0; j < message.wallets.length; ++j)\n                    object.wallets[j] = $root.markets.Wallet.toObject(message.wallets[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Pocket to JSON.\n         * @function toJSON\n         * @memberof markets.Pocket\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Pocket.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Pocket;\n    })();\n\n    markets.Interval = (function() {\n\n        /**\n         * Properties of an Interval.\n         * @memberof markets\n         * @interface IInterval\n         * @property {google.protobuf.ITimestamp|null} [begin] Interval begin\n         * @property {google.protobuf.ITimestamp|null} [end] Interval end\n         */\n\n        /**\n         * Constructs a new Interval.\n         * @memberof markets\n         * @classdesc Represents an Interval.\n         * @implements IInterval\n         * @constructor\n         * @param {markets.IInterval=} [properties] Properties to set\n         */\n        function Interval(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Interval begin.\n         * @member {google.protobuf.ITimestamp|null|undefined} begin\n         * @memberof markets.Interval\n         * @instance\n         */\n        Interval.prototype.begin = null;\n\n        /**\n         * Interval end.\n         * @member {google.protobuf.ITimestamp|null|undefined} end\n         * @memberof markets.Interval\n         * @instance\n         */\n        Interval.prototype.end = null;\n\n        /**\n         * Creates a new Interval instance using the specified properties.\n         * @function create\n         * @memberof markets.Interval\n         * @static\n         * @param {markets.IInterval=} [properties] Properties to set\n         * @returns {markets.Interval} Interval instance\n         */\n        Interval.create = function create(properties) {\n            return new Interval(properties);\n        };\n\n        /**\n         * Encodes the specified Interval message. Does not implicitly {@link markets.Interval.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Interval\n         * @static\n         * @param {markets.IInterval} message Interval message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Interval.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                $root.google.protobuf.Timestamp.encode(message.begin, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.end != null && message.hasOwnProperty(\"end\"))\n                $root.google.protobuf.Timestamp.encode(message.end, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Interval message, length delimited. Does not implicitly {@link markets.Interval.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Interval\n         * @static\n         * @param {markets.IInterval} message Interval message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Interval.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Interval message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Interval\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Interval} Interval\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Interval.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Interval();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.begin = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.end = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Interval message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Interval\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Interval} Interval\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Interval.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Interval message.\n         * @function verify\n         * @memberof markets.Interval\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Interval.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.begin != null && message.hasOwnProperty(\"begin\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.begin);\n                if (error)\n                    return \"begin.\" + error;\n            }\n            if (message.end != null && message.hasOwnProperty(\"end\")) {\n                let error = $root.google.protobuf.Timestamp.verify(message.end);\n                if (error)\n                    return \"end.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates an Interval message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Interval\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Interval} Interval\n         */\n        Interval.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Interval)\n                return object;\n            let message = new $root.markets.Interval();\n            if (object.begin != null) {\n                if (typeof object.begin !== \"object\")\n                    throw TypeError(\".markets.Interval.begin: object expected\");\n                message.begin = $root.google.protobuf.Timestamp.fromObject(object.begin);\n            }\n            if (object.end != null) {\n                if (typeof object.end !== \"object\")\n                    throw TypeError(\".markets.Interval.end: object expected\");\n                message.end = $root.google.protobuf.Timestamp.fromObject(object.end);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Interval message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Interval\n         * @static\n         * @param {markets.Interval} message Interval\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Interval.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.begin = null;\n                object.end = null;\n            }\n            if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                object.begin = $root.google.protobuf.Timestamp.toObject(message.begin, options);\n            if (message.end != null && message.hasOwnProperty(\"end\"))\n                object.end = $root.google.protobuf.Timestamp.toObject(message.end, options);\n            return object;\n        };\n\n        /**\n         * Converts this Interval to JSON.\n         * @function toJSON\n         * @memberof markets.Interval\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Interval.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Interval;\n    })();\n\n    markets.Segment = (function() {\n\n        /**\n         * Properties of a Segment.\n         * @memberof markets\n         * @interface ISegment\n         * @property {markets.IInterval|null} [domain] Segment domain\n         * @property {markets.ITrades|null} [trades] Segment trades\n         */\n\n        /**\n         * Constructs a new Segment.\n         * @memberof markets\n         * @classdesc Represents a Segment.\n         * @implements ISegment\n         * @constructor\n         * @param {markets.ISegment=} [properties] Properties to set\n         */\n        function Segment(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Segment domain.\n         * @member {markets.IInterval|null|undefined} domain\n         * @memberof markets.Segment\n         * @instance\n         */\n        Segment.prototype.domain = null;\n\n        /**\n         * Segment trades.\n         * @member {markets.ITrades|null|undefined} trades\n         * @memberof markets.Segment\n         * @instance\n         */\n        Segment.prototype.trades = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Segment series.\n         * @member {\"trades\"|undefined} series\n         * @memberof markets.Segment\n         * @instance\n         */\n        Object.defineProperty(Segment.prototype, \"series\", {\n            get: $util.oneOfGetter($oneOfFields = [\"trades\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Segment instance using the specified properties.\n         * @function create\n         * @memberof markets.Segment\n         * @static\n         * @param {markets.ISegment=} [properties] Properties to set\n         * @returns {markets.Segment} Segment instance\n         */\n        Segment.create = function create(properties) {\n            return new Segment(properties);\n        };\n\n        /**\n         * Encodes the specified Segment message. Does not implicitly {@link markets.Segment.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Segment\n         * @static\n         * @param {markets.ISegment} message Segment message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Segment.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                $root.markets.Interval.encode(message.domain, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.trades != null && message.hasOwnProperty(\"trades\"))\n                $root.markets.Trades.encode(message.trades, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Segment message, length delimited. Does not implicitly {@link markets.Segment.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Segment\n         * @static\n         * @param {markets.ISegment} message Segment message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Segment.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Segment message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Segment\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Segment} Segment\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Segment.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Segment();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = $root.markets.Interval.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.trades = $root.markets.Trades.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Segment message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Segment\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Segment} Segment\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Segment.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Segment message.\n         * @function verify\n         * @memberof markets.Segment\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Segment.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.domain != null && message.hasOwnProperty(\"domain\")) {\n                let error = $root.markets.Interval.verify(message.domain);\n                if (error)\n                    return \"domain.\" + error;\n            }\n            if (message.trades != null && message.hasOwnProperty(\"trades\")) {\n                properties.series = 1;\n                {\n                    let error = $root.markets.Trades.verify(message.trades);\n                    if (error)\n                        return \"trades.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Segment\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Segment} Segment\n         */\n        Segment.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Segment)\n                return object;\n            let message = new $root.markets.Segment();\n            if (object.domain != null) {\n                if (typeof object.domain !== \"object\")\n                    throw TypeError(\".markets.Segment.domain: object expected\");\n                message.domain = $root.markets.Interval.fromObject(object.domain);\n            }\n            if (object.trades != null) {\n                if (typeof object.trades !== \"object\")\n                    throw TypeError(\".markets.Segment.trades: object expected\");\n                message.trades = $root.markets.Trades.fromObject(object.trades);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Segment message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Segment\n         * @static\n         * @param {markets.Segment} message Segment\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Segment.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.domain = null;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = $root.markets.Interval.toObject(message.domain, options);\n            if (message.trades != null && message.hasOwnProperty(\"trades\")) {\n                object.trades = $root.markets.Trades.toObject(message.trades, options);\n                if (options.oneofs)\n                    object.series = \"trades\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Segment to JSON.\n         * @function toJSON\n         * @memberof markets.Segment\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Segment.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Segment;\n    })();\n\n    markets.Continuum = (function() {\n\n        /**\n         * Properties of a Continuum.\n         * @memberof markets\n         * @interface IContinuum\n         * @property {string|null} [topic] Continuum topic\n         * @property {markets.ISegment|null} [segment] Continuum segment\n         * @property {markets.ITrade|null} [trade] Continuum trade\n         */\n\n        /**\n         * Constructs a new Continuum.\n         * @memberof markets\n         * @classdesc Represents a Continuum.\n         * @implements IContinuum\n         * @constructor\n         * @param {markets.IContinuum=} [properties] Properties to set\n         */\n        function Continuum(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Continuum topic.\n         * @member {string} topic\n         * @memberof markets.Continuum\n         * @instance\n         */\n        Continuum.prototype.topic = \"\";\n\n        /**\n         * Continuum segment.\n         * @member {markets.ISegment|null|undefined} segment\n         * @memberof markets.Continuum\n         * @instance\n         */\n        Continuum.prototype.segment = null;\n\n        /**\n         * Continuum trade.\n         * @member {markets.ITrade|null|undefined} trade\n         * @memberof markets.Continuum\n         * @instance\n         */\n        Continuum.prototype.trade = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Continuum data.\n         * @member {\"segment\"|\"trade\"|undefined} data\n         * @memberof markets.Continuum\n         * @instance\n         */\n        Object.defineProperty(Continuum.prototype, \"data\", {\n            get: $util.oneOfGetter($oneOfFields = [\"segment\", \"trade\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Continuum instance using the specified properties.\n         * @function create\n         * @memberof markets.Continuum\n         * @static\n         * @param {markets.IContinuum=} [properties] Properties to set\n         * @returns {markets.Continuum} Continuum instance\n         */\n        Continuum.create = function create(properties) {\n            return new Continuum(properties);\n        };\n\n        /**\n         * Encodes the specified Continuum message. Does not implicitly {@link markets.Continuum.verify|verify} messages.\n         * @function encode\n         * @memberof markets.Continuum\n         * @static\n         * @param {markets.IContinuum} message Continuum message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Continuum.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.topic != null && message.hasOwnProperty(\"topic\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.topic);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.markets.Segment.encode(message.segment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.trade != null && message.hasOwnProperty(\"trade\"))\n                $root.markets.Trade.encode(message.trade, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Continuum message, length delimited. Does not implicitly {@link markets.Continuum.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.Continuum\n         * @static\n         * @param {markets.IContinuum} message Continuum message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Continuum.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Continuum message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.Continuum\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.Continuum} Continuum\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Continuum.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.Continuum();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.topic = reader.string();\n                    break;\n                case 2:\n                    message.segment = $root.markets.Segment.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.trade = $root.markets.Trade.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Continuum message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.Continuum\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.Continuum} Continuum\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Continuum.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Continuum message.\n         * @function verify\n         * @memberof markets.Continuum\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Continuum.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.topic != null && message.hasOwnProperty(\"topic\"))\n                if (!$util.isString(message.topic))\n                    return \"topic: string expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                properties.data = 1;\n                {\n                    let error = $root.markets.Segment.verify(message.segment);\n                    if (error)\n                        return \"segment.\" + error;\n                }\n            }\n            if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                if (properties.data === 1)\n                    return \"data: multiple values\";\n                properties.data = 1;\n                {\n                    let error = $root.markets.Trade.verify(message.trade);\n                    if (error)\n                        return \"trade.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Continuum message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.Continuum\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.Continuum} Continuum\n         */\n        Continuum.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.Continuum)\n                return object;\n            let message = new $root.markets.Continuum();\n            if (object.topic != null)\n                message.topic = String(object.topic);\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".markets.Continuum.segment: object expected\");\n                message.segment = $root.markets.Segment.fromObject(object.segment);\n            }\n            if (object.trade != null) {\n                if (typeof object.trade !== \"object\")\n                    throw TypeError(\".markets.Continuum.trade: object expected\");\n                message.trade = $root.markets.Trade.fromObject(object.trade);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Continuum message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.Continuum\n         * @static\n         * @param {markets.Continuum} message Continuum\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Continuum.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.topic = \"\";\n            if (message.topic != null && message.hasOwnProperty(\"topic\"))\n                object.topic = message.topic;\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                object.segment = $root.markets.Segment.toObject(message.segment, options);\n                if (options.oneofs)\n                    object.data = \"segment\";\n            }\n            if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                object.trade = $root.markets.Trade.toObject(message.trade, options);\n                if (options.oneofs)\n                    object.data = \"trade\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Continuum to JSON.\n         * @function toJSON\n         * @memberof markets.Continuum\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Continuum.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Continuum;\n    })();\n\n    markets.AuthInfo = (function() {\n\n        /**\n         * Properties of an AuthInfo.\n         * @memberof markets\n         * @interface IAuthInfo\n         * @property {boolean|null} [isAuthorized] AuthInfo isAuthorized\n         * @property {string|null} [sessionKey] AuthInfo sessionKey\n         * @property {number|null} [userID] AuthInfo userID\n         * @property {number|null} [profileID] AuthInfo profileID\n         * @property {number|null} [pocketID] AuthInfo pocketID\n         * @property {string|null} [jwt] AuthInfo jwt\n         * @property {string|null} [mqttHost] AuthInfo mqttHost\n         * @property {string|null} [mqttPort] AuthInfo mqttPort\n         * @property {string|null} [mdsHost] AuthInfo mdsHost\n         * @property {string|null} [mdsPort] AuthInfo mdsPort\n         */\n\n        /**\n         * Constructs a new AuthInfo.\n         * @memberof markets\n         * @classdesc Represents an AuthInfo.\n         * @implements IAuthInfo\n         * @constructor\n         * @param {markets.IAuthInfo=} [properties] Properties to set\n         */\n        function AuthInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AuthInfo isAuthorized.\n         * @member {boolean} isAuthorized\n         * @memberof markets.AuthInfo\n         * @instance\n         */\n        AuthInfo.prototype.isAuthorized = false;\n\n        /**\n         * AuthInfo sessionKey.\n         * @member {string} sessionKey\n         * @memberof markets.AuthInfo\n         * @instance\n         */\n        AuthInfo.prototype.sessionKey = \"\";\n\n        /**\n         * AuthInfo userID.\n         * @member {number} userID\n         * @memberof markets.AuthInfo\n         * @instance\n         */\n        AuthInfo.prototype.userID = 0;\n\n        /**\n         * AuthInfo profileID.\n         * @member {number} profileID\n         * @memberof markets.AuthInfo\n         * @instance\n         */\n        AuthInfo.prototype.profileID = 0;\n\n        /**\n         * AuthInfo pocketID.\n         * @member {number} pocketID\n         * @memberof markets.AuthInfo\n         * @instance\n         */\n        AuthInfo.prototype.pocketID = 0;\n\n        /**\n         * AuthInfo jwt.\n         * @member {string} jwt\n         * @memberof markets.AuthInfo\n         * @instance\n         */\n        AuthInfo.prototype.jwt = \"\";\n\n        /**\n         * AuthInfo mqttHost.\n         * @member {string} mqttHost\n         * @memberof markets.AuthInfo\n         * @instance\n         */\n        AuthInfo.prototype.mqttHost = \"\";\n\n        /**\n         * AuthInfo mqttPort.\n         * @member {string} mqttPort\n         * @memberof markets.AuthInfo\n         * @instance\n         */\n        AuthInfo.prototype.mqttPort = \"\";\n\n        /**\n         * AuthInfo mdsHost.\n         * @member {string} mdsHost\n         * @memberof markets.AuthInfo\n         * @instance\n         */\n        AuthInfo.prototype.mdsHost = \"\";\n\n        /**\n         * AuthInfo mdsPort.\n         * @member {string} mdsPort\n         * @memberof markets.AuthInfo\n         * @instance\n         */\n        AuthInfo.prototype.mdsPort = \"\";\n\n        /**\n         * Creates a new AuthInfo instance using the specified properties.\n         * @function create\n         * @memberof markets.AuthInfo\n         * @static\n         * @param {markets.IAuthInfo=} [properties] Properties to set\n         * @returns {markets.AuthInfo} AuthInfo instance\n         */\n        AuthInfo.create = function create(properties) {\n            return new AuthInfo(properties);\n        };\n\n        /**\n         * Encodes the specified AuthInfo message. Does not implicitly {@link markets.AuthInfo.verify|verify} messages.\n         * @function encode\n         * @memberof markets.AuthInfo\n         * @static\n         * @param {markets.IAuthInfo} message AuthInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AuthInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.sessionKey != null && message.hasOwnProperty(\"sessionKey\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.sessionKey);\n            if (message.userID != null && message.hasOwnProperty(\"userID\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.userID);\n            if (message.profileID != null && message.hasOwnProperty(\"profileID\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.profileID);\n            if (message.pocketID != null && message.hasOwnProperty(\"pocketID\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.pocketID);\n            if (message.jwt != null && message.hasOwnProperty(\"jwt\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.jwt);\n            if (message.mqttHost != null && message.hasOwnProperty(\"mqttHost\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.mqttHost);\n            if (message.mqttPort != null && message.hasOwnProperty(\"mqttPort\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.mqttPort);\n            if (message.mdsHost != null && message.hasOwnProperty(\"mdsHost\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.mdsHost);\n            if (message.mdsPort != null && message.hasOwnProperty(\"mdsPort\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).string(message.mdsPort);\n            if (message.isAuthorized != null && message.hasOwnProperty(\"isAuthorized\"))\n                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.isAuthorized);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AuthInfo message, length delimited. Does not implicitly {@link markets.AuthInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof markets.AuthInfo\n         * @static\n         * @param {markets.IAuthInfo} message AuthInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AuthInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AuthInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof markets.AuthInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {markets.AuthInfo} AuthInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AuthInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.markets.AuthInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 10:\n                    message.isAuthorized = reader.bool();\n                    break;\n                case 1:\n                    message.sessionKey = reader.string();\n                    break;\n                case 2:\n                    message.userID = reader.uint32();\n                    break;\n                case 3:\n                    message.profileID = reader.uint32();\n                    break;\n                case 4:\n                    message.pocketID = reader.uint32();\n                    break;\n                case 5:\n                    message.jwt = reader.string();\n                    break;\n                case 6:\n                    message.mqttHost = reader.string();\n                    break;\n                case 7:\n                    message.mqttPort = reader.string();\n                    break;\n                case 8:\n                    message.mdsHost = reader.string();\n                    break;\n                case 9:\n                    message.mdsPort = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AuthInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof markets.AuthInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {markets.AuthInfo} AuthInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AuthInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AuthInfo message.\n         * @function verify\n         * @memberof markets.AuthInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AuthInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.isAuthorized != null && message.hasOwnProperty(\"isAuthorized\"))\n                if (typeof message.isAuthorized !== \"boolean\")\n                    return \"isAuthorized: boolean expected\";\n            if (message.sessionKey != null && message.hasOwnProperty(\"sessionKey\"))\n                if (!$util.isString(message.sessionKey))\n                    return \"sessionKey: string expected\";\n            if (message.userID != null && message.hasOwnProperty(\"userID\"))\n                if (!$util.isInteger(message.userID))\n                    return \"userID: integer expected\";\n            if (message.profileID != null && message.hasOwnProperty(\"profileID\"))\n                if (!$util.isInteger(message.profileID))\n                    return \"profileID: integer expected\";\n            if (message.pocketID != null && message.hasOwnProperty(\"pocketID\"))\n                if (!$util.isInteger(message.pocketID))\n                    return \"pocketID: integer expected\";\n            if (message.jwt != null && message.hasOwnProperty(\"jwt\"))\n                if (!$util.isString(message.jwt))\n                    return \"jwt: string expected\";\n            if (message.mqttHost != null && message.hasOwnProperty(\"mqttHost\"))\n                if (!$util.isString(message.mqttHost))\n                    return \"mqttHost: string expected\";\n            if (message.mqttPort != null && message.hasOwnProperty(\"mqttPort\"))\n                if (!$util.isString(message.mqttPort))\n                    return \"mqttPort: string expected\";\n            if (message.mdsHost != null && message.hasOwnProperty(\"mdsHost\"))\n                if (!$util.isString(message.mdsHost))\n                    return \"mdsHost: string expected\";\n            if (message.mdsPort != null && message.hasOwnProperty(\"mdsPort\"))\n                if (!$util.isString(message.mdsPort))\n                    return \"mdsPort: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an AuthInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof markets.AuthInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {markets.AuthInfo} AuthInfo\n         */\n        AuthInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.markets.AuthInfo)\n                return object;\n            let message = new $root.markets.AuthInfo();\n            if (object.isAuthorized != null)\n                message.isAuthorized = Boolean(object.isAuthorized);\n            if (object.sessionKey != null)\n                message.sessionKey = String(object.sessionKey);\n            if (object.userID != null)\n                message.userID = object.userID >>> 0;\n            if (object.profileID != null)\n                message.profileID = object.profileID >>> 0;\n            if (object.pocketID != null)\n                message.pocketID = object.pocketID >>> 0;\n            if (object.jwt != null)\n                message.jwt = String(object.jwt);\n            if (object.mqttHost != null)\n                message.mqttHost = String(object.mqttHost);\n            if (object.mqttPort != null)\n                message.mqttPort = String(object.mqttPort);\n            if (object.mdsHost != null)\n                message.mdsHost = String(object.mdsHost);\n            if (object.mdsPort != null)\n                message.mdsPort = String(object.mdsPort);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AuthInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof markets.AuthInfo\n         * @static\n         * @param {markets.AuthInfo} message AuthInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AuthInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.sessionKey = \"\";\n                object.userID = 0;\n                object.profileID = 0;\n                object.pocketID = 0;\n                object.jwt = \"\";\n                object.mqttHost = \"\";\n                object.mqttPort = \"\";\n                object.mdsHost = \"\";\n                object.mdsPort = \"\";\n                object.isAuthorized = false;\n            }\n            if (message.sessionKey != null && message.hasOwnProperty(\"sessionKey\"))\n                object.sessionKey = message.sessionKey;\n            if (message.userID != null && message.hasOwnProperty(\"userID\"))\n                object.userID = message.userID;\n            if (message.profileID != null && message.hasOwnProperty(\"profileID\"))\n                object.profileID = message.profileID;\n            if (message.pocketID != null && message.hasOwnProperty(\"pocketID\"))\n                object.pocketID = message.pocketID;\n            if (message.jwt != null && message.hasOwnProperty(\"jwt\"))\n                object.jwt = message.jwt;\n            if (message.mqttHost != null && message.hasOwnProperty(\"mqttHost\"))\n                object.mqttHost = message.mqttHost;\n            if (message.mqttPort != null && message.hasOwnProperty(\"mqttPort\"))\n                object.mqttPort = message.mqttPort;\n            if (message.mdsHost != null && message.hasOwnProperty(\"mdsHost\"))\n                object.mdsHost = message.mdsHost;\n            if (message.mdsPort != null && message.hasOwnProperty(\"mdsPort\"))\n                object.mdsPort = message.mdsPort;\n            if (message.isAuthorized != null && message.hasOwnProperty(\"isAuthorized\"))\n                object.isAuthorized = message.isAuthorized;\n            return object;\n        };\n\n        /**\n         * Converts this AuthInfo to JSON.\n         * @function toJSON\n         * @memberof markets.AuthInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AuthInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AuthInfo;\n    })();\n\n    return markets;\n})();\n\nexport const google = $root.google = (() => {\n\n    /**\n     * Namespace google.\n     * @exports google\n     * @namespace\n     */\n    const google = {};\n\n    google.protobuf = (function() {\n\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        const protobuf = {};\n\n        protobuf.Timestamp = (function() {\n\n            /**\n             * Properties of a Timestamp.\n             * @memberof google.protobuf\n             * @interface ITimestamp\n             * @property {number|Long|null} [seconds] Timestamp seconds\n             * @property {number|null} [nanos] Timestamp nanos\n             */\n\n            /**\n             * Constructs a new Timestamp.\n             * @memberof google.protobuf\n             * @classdesc Represents a Timestamp.\n             * @implements ITimestamp\n             * @constructor\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             */\n            function Timestamp(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Timestamp seconds.\n             * @member {number|Long} seconds\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Timestamp nanos.\n             * @member {number} nanos\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.nanos = 0;\n\n            /**\n             * Creates a new Timestamp instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             * @returns {google.protobuf.Timestamp} Timestamp instance\n             */\n            Timestamp.create = function create(properties) {\n                return new Timestamp(properties);\n            };\n\n            /**\n             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.seconds = reader.int64();\n                        break;\n                    case 2:\n                        message.nanos = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Timestamp message.\n             * @function verify\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Timestamp.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))\n                        return \"seconds: integer|Long expected\";\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    if (!$util.isInteger(message.nanos))\n                        return \"nanos: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.Timestamp} Timestamp\n             */\n            Timestamp.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.Timestamp)\n                    return object;\n                let message = new $root.google.protobuf.Timestamp();\n                if (object.seconds != null)\n                    if ($util.Long)\n                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;\n                    else if (typeof object.seconds === \"string\")\n                        message.seconds = parseInt(object.seconds, 10);\n                    else if (typeof object.seconds === \"number\")\n                        message.seconds = object.seconds;\n                    else if (typeof object.seconds === \"object\")\n                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();\n                if (object.nanos != null)\n                    message.nanos = object.nanos | 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.Timestamp} message Timestamp\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Timestamp.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        let long = new $util.Long(0, 0, false);\n                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.seconds = options.longs === String ? \"0\" : 0;\n                    object.nanos = 0;\n                }\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (typeof message.seconds === \"number\")\n                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;\n                    else\n                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    object.nanos = message.nanos;\n                return object;\n            };\n\n            /**\n             * Converts this Timestamp to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Timestamp.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Timestamp;\n        })();\n\n        return protobuf;\n    })();\n\n    return google;\n})();\n\nexport { $root as default };\n","import { ofType } from 'redux-observable'\nimport { tap, ignoreElements, filter, delay, take } from 'rxjs/operators'\nimport { store } from '../index'\nimport mqtt from 'mqtt'\nimport { SESSION_FETCHED } from './session'\n\n// action types\n//\nexport const MQTT_CONNECT_FAILED = 'MQTT:CONNECT_FAILED'\nexport const MQTT_CONNECTED = 'MQTT:CONNECTED'\nexport const MQTT_RECONNECT = 'MQTT:RECONNECT'\nexport const MQTT_CONNECTION_ENDED = 'MQTT:CONNECTION_ENDED'\nexport const MQTT_RX = 'MQTT:RX'\nexport const MQTT_SUBSCRIBE = 'MQTT:SUBSCRIBE'\nexport const MQTT_SEND = 'MQTT:SEND'\nexport const MQTT_SEND_FAILED = 'MQTT:SEND_FAILED'\n\n// action creators\n//\nexport const MQTT_CONNECT_FAILED_ = error =>\n  ({ type: MQTT_CONNECT_FAILED, error })\nexport const MQTT_CONNECTED_ = client =>\n  ({ type: MQTT_CONNECTED, client })\nexport const MQTT_RECONNECT_ = client =>\n  ({ type: MQTT_RECONNECT, client })\nexport const MQTT_CONNECTION_ENDED_ = () =>\n  ({ type: MQTT_CONNECTION_ENDED })\nexport const MQTT_SUBSCRIBE_ = topic =>\n  ({ type: MQTT_SUBSCRIBE, topic })\nexport const MQTT_RX_ = (topic, message) =>\n  ({ type: MQTT_RX, topic, message })\nexport const MQTT_SEND_ = (topic, message) =>\n  ({ type: MQTT_SEND, topic, message })\n\n// initial state\n//\nconst MQTT_INITIAL_STATE = {\n  client: null,\n  isConnected: false,\n  messagesReceived: 0,\n  messagesSent: 0\n}\n\nexport const reduce = (state = MQTT_INITIAL_STATE, action) => {\n  switch (action.type) {\n  default:\n    return state\n  case MQTT_CONNECTED:\n    return {\n      ...state,\n      client: action.client,\n      isConnected: true,\n    }\n  case MQTT_RECONNECT:\n    return {\n      ...state,\n      isConnected: false,\n    }\n  case MQTT_CONNECTION_ENDED:\n    return {\n      ...state,\n      client: null,\n      isConnected: false,\n    }\n  case MQTT_RX:\n    return {\n      ...state,\n      messagesReceived: 1 + state.messagesReceived\n    }\n  case MQTT_SEND:\n    return {\n      ...state,\n      messagesSent: 1 + state.messagesSent\n    }\n  }\n}\n\n// epics\n//\nexport const epics = [\n\n  // create mqtt client and try to connect\n  //\n  action$ => action$.pipe(\n    ofType(SESSION_FETCHED),\n    filter(action => action.session.isAuthorized),\n    take(1),\n    tap(action => connect(action.session)),\n    ignoreElements()),\n\n  // retry creating mqtt and connecting if it failed\n  //\n  (action$, state$) => action$.pipe(\n    ofType(MQTT_CONNECT_FAILED),\n    delay(5000),\n    tap(action => connect(state$.value.session)),\n    ignoreElements()),\n\n  // subscription\n  //\n  (action$, state$) => action$.pipe(\n    ofType(MQTT_SUBSCRIBE),\n    // TBD: handle !isConnected\n    tap(action => state$.value.mqtt.client.subscribe(action.topic)),\n    // TBD: handle error\n    ignoreElements()\n  ),\n\n  // send\n  //\n  (action$, state$) => action$.pipe(\n    ofType(MQTT_SEND),\n    // TBD: handle !isConnected\n    tap(action => state$.value.mqtt.client.publish(action.topic, action.message)),\n    // TBD: handle error\n    ignoreElements()\n  )\n]\n\nconst connect = session => {\n  console.log('creating new mqtt client')\n  const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws'\n  const client = mqtt.connect(\n    `${protocol}://${session.mqttHost}:${session.mqttPort}/ws`, {\n    username: String(session.userID),\n    password: session.jwt,\n    queueQoSZero: false, // important to avoid placing stale order on slow reconnect\n    keepalive: 30, // important\n  })\n  client.on('connect', () => {\n    store.dispatch(MQTT_CONNECTED_(client))\n  })\n  client.on('message', (topic, message) => {\n    store.dispatch(MQTT_RX_(topic.split('/'), message))\n  })\n  client.on('reconnect', () => {\n    store.dispatch(MQTT_RECONNECT_())\n  })\n  client.on('error', error => {\n    store.dispatch(MQTT_CONNECT_FAILED_(error))\n  })\n}\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./Root.prod')\n}\nelse {\n  module.exports = require('./Root.dev')\n}\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.prod')\n}\nelse {\n  module.exports = require('./configureStore.dev')\n}\n","import { markets } from '../protobufs'\nimport { ofType } from 'redux-observable'\nimport { map, filter, ignoreElements, switchMap, take } from 'rxjs/operators'\nimport { ajax } from 'rxjs/ajax'\nimport { MQTT_CONNECTED, MQTT_RX, MQTT_SEND_, MQTT_SUBSCRIBE_ } from './mqtt'\nimport { List } from 'immutable'\nimport { decodeProtobuf } from '../utils/utils'\nimport uuidv4 from 'uuid/v4'\nimport { SESSION_FETCHED } from './session'\n\n// action types generated by client\n//\nexport const ORDERS_NEW = 'ORDERS:NEW'\nexport const ORDERS_CANCEL = 'ORDERS:CANCEL'\nexport const ORDERS_MODIFY = 'ORDERS:MODIFY'\nexport const ORDERS_FETCHED = 'ORDERS:FETCHED'\n\n// action types received from system\n//\nexport const ORDERS_RX_NEW = 'ORDERS:RX_NEW'\nexport const ORDERS_RX_CANCEL = 'ORDERS:RX_CANCEL'\n\n// order status events\n//\nexport const ORDERS_RX_STATUS = 'ORDERS:RX_STATUS'\nexport const ORDERS_RX_FILL = 'ORDERS:RX_FILL'\n\n// cancel status events\n//\nexport const ORDERS_RX_CANCEL_STATUS = 'ORDERS:RX_CANCEL_STATUS'\n\n\n// order status codes\n//\nexport const OS_NEW          = markets.OrderStatusCode.OS_NEW\nexport const OS_PENDING      = markets.OrderStatusCode.OS_PENDING\nexport const OS_REJECTED     = markets.OrderStatusCode.OS_REJECTED\nexport const OS_OPEN         = markets.OrderStatusCode.OS_OPEN\nexport const OS_CANCELED     = markets.OrderStatusCode.OS_CANCELED\nexport const OS_PARTIAL_FILL = markets.OrderStatusCode.OS_PARTIAL_FILL\nexport const OS_FILLED       = markets.OrderStatusCode.OS_FILLED\n\n// action constructors\n//\nexport const ORDERS_NEW_ = (userID, profileID, pocketID, symbol, side, orderType, price, quantity, stopPrice) => ({\n  type: ORDERS_NEW,\n  userID,\n  profileID,\n  pocketID,\n  clOrdID: uuidv4(),\n  symbol,\n  side,\n  orderType,\n  price: price == null ? 0 : price,\n  quantity,\n  stopPrice: stopPrice == null ? 0 : stopPrice\n})\n\nexport const ORDERS_FETCHED_ = orders =>\n  ({ type: ORDERS_FETCHED, orders })\nexport const ORDERS_CANCEL_ = order =>\n  ({ type: ORDERS_CANCEL, order, requestID: uuidv4() })\nexport const ORDERS_MODIFY_ = (clOrdID, quantity) =>\n  ({ type: ORDERS_MODIFY, clOrdID, quantity })\n\nexport const ORDERS_RX_NEW_ = (symbol, newOrder) =>\n  ({ type: ORDERS_RX_NEW, symbol, newOrder })\nexport const ORDERS_RX_CANCEL_ = cancel =>\n  ({ type: ORDERS_RX_CANCEL, cancel })\nexport const ORDERS_RX_STATUS_ = status =>\n  ({ type: ORDERS_RX_STATUS, status })\n\nexport const ORDERS_RX_FILL_ = fill =>\n  ({ type: ORDERS_RX_FILL, fill })\n\nexport const ORDERS_RX_CANCEL_STATUS_ = status =>\n  ({ type: ORDERS_RX_CANCEL_STATUS, status })\n\n\n// Lookup clOrdID by orderID.\n//\nlet CLIENT_ID = {}\n\n// reducer\n//\nexport const orders = (state = {}, action) => {\n  switch (action.type) {\n  default:\n    return state\n\n  case ORDERS_FETCHED:\n    //\n    // TBD: Do we need to worry about overwriting an order\n    //      submitted before the load response arrives?\n    //\n    //      If so then this will overwrite it and lose information.\n    //\n    var newState = {...state}\n    action.orders.map(order => {\n      CLIENT_ID[order.orderID] = order.clOrdID\n      newState[order.clOrdID] = {\n      \torder: order,\n        history: new List() // TBD: include in load\n      }\n      return null\n    })\n    return newState\n\n  case ORDERS_NEW:\n    const { userID, profileID, pocketID, clOrdID, symbol, side, orderType, price, quantity, stopPrice } = action\n    return {\n      ...state,\n      [action.clOrdID]: {\n        order: new markets.Order({\n          userID,\n          profileID,\n          pocketID,\n          clOrdID,\n          side,\n          orderType,\n          price,\n          quantity,\n          stopPrice,\n          market: symbol,\n          status: markets.OrderStatusCode.OS_NEW,\n          filled: 0,\n          filledCost: 0\n        }),\n        history: List.of(actionEvent(null)) // NEW before server tells us.\n                                            // not sure what to put here\n      }\n    }\n\n  case ORDERS_RX_NEW:\n    CLIENT_ID[action.newOrder.orderID] = action.newOrder.clOrdID\n    var existing = state[action.newOrder.clOrdID]\n    var history\n    var order\n    if (existing) {\n      order = new markets.Order(existing.order)\n      //\n      // In either case this is the first time we learn the\n      // system's official orderID.\n      //\n      order.orderID = action.newOrder.orderID\n      order.timestamp = action.newOrder.timestamp\n      history = existing.history\n    }\n    else {\n      existing = {}\n      order = new markets.Order({\n        ...action.newOrder,\n        market: action.symbol,\n        status: markets.OrderStatusCode.OS_NEW,\n        filled: 0,\n        filledCost: 0\n      })\n      history = new List()\n    }\n    return {\n      ...state,\n      [order.clOrdID]: {\n        ...existing,\n        order: order,\n        history: history.push(actionEvent(markets.OrderStatusCode.NEW))\n      }\n    }\n\n  case ORDERS_RX_STATUS:\n    var existing = state[action.status.clOrdID]\n    if (existing) {\n      let order = new markets.Order(existing.order)\n      if (!is_sequential_status(order.status, action.status.event.code)) {\n        if (is_old_status(action.status.event.code, order.status)) {\n          console.warn('IGNORED OLD STATUS ' + action.status.clOrdID + ' ' + action.status.event.code + ' current=' + order.status)\n          // prevent earlier status from overwriting later status\n          return state\n        }\n        else if (is_invalid_transition(order.status, action.status.event.code)) {\n          console.error('INVALID STATUS CHANGE ' + action.status.clOrdID + ' ' + order.status + '->' + action.status.event.code)\n          // in this case we use the last one received.\n          // Maybe it was because of a corrected status although no such status correction\n          // features existed at the time this code was written.\n        }\n        else {\n          // Assume status received earlier than expected.\n          console.warn('EARLY STATUS ' + action.status.clOrdID + ' ' + order.status + '->' + action.status.event.code)\n        }\n      }\n      order.status = action.status.event.code\n      order.filled = action.status.filled;\n      order.filledCost = action.status.filledCost;\n      return {\n        ...state,\n        [action.status.clOrdID]: {\n          ...existing,\n          order: order,\n          history: existing.history.push(actionEvent(action.status.event.code))\n        }\n      }\n    }\n    else {\n      //\n      // This should ideally never happen.  It means that the order was in flight\n      // when this page loaded and was missed by both the ORDERS_FETCHED and ORDERS_RX_NEW.\n      //\n      console.log('in-flight order missed by ORDERS_RX_NEW')\n      return state\n    }\n\n  case ORDERS_CANCEL:\n    var existing = state[action.order.clOrdID]\n    return {\n      ...state,\n      [action.order.clOrdID]: {\n      \t...existing,\n        history: existing.history.push(actionEvent(action.type)),\n        cancelStatus: new markets.CancelStatus({\n          requestID: action.requestID,\n          orderID: action.order.orderID, // may be (null or 0) = unknown\n          clientKey: markets.ClientKey({\n            pocketID: action.order.pocketID,\n            clOrdID: action.order.clOrdID\n          }),\n          code: markets.CancelStatusCode.CS_NEW\n        })\n      }\n    }\n\n  case ORDERS_RX_CANCEL_STATUS:\n    var clOrdID = CLIENT_ID[action.status.orderID]\n    if (!clOrdID) {\n      return state\n    }\n    var existing = state[clOrdID]\n    return {\n      ...state,\n      [clOrdID]: {\n      \t...existing,\n      \thistory: existing.history.push(actionEvent(action.type)),\n      \tcancelStatus: action.status\n      }\n    }\n  }\n}\n\nconst actionEvent = action_type => ({\n  action: action_type,\n  time: Date.now() // millis since January 1, 1970\n})\n\nexport const epics = [\n\n  // fetch orders\n  //\n  action$ => action$.pipe(\n    ofType(SESSION_FETCHED),\n    filter(action => action.session.isAuthorized),\n    take(1),\n    switchMap(() =>\n      ajax.getJSON('/api/orders/').pipe(\n        map(response => {\n          let orders = decodeProtobuf(markets.OrderList, response)\n          return ORDERS_FETCHED_(orders.orders)\n        })))),\n\n  // new order\n  //\n  (action$, state$) => action$.pipe(\n    ofType(ORDERS_NEW),\n    map(action => {\n      let newOrder = new markets.NewOrder(action)\n      let session = state$.value.session\n      // topic order/<market_symbol>/<user_id>/<profile_id>/<pocket_id>\n      return MQTT_SEND_(`order/${action.symbol}/${action.userID}/${action.profileID}/${action.pocketID}`,\n\t\t      markets.NewOrder.encode(newOrder).finish())\n    })),\n\n  // cancel order\n  //\n  action$ => action$.pipe(\n    ofType(ORDERS_CANCEL),\n    map(action => {\n      let cancel = new markets.CancelOrder()\n      cancel.requestID = action.requestID\n      if (action.order.orderID && action.order.orderID != 0) {\n      \tcancel.orderID = action.order.orderID\n      }\n      else {\n      \tcancel.clientKey = markets.ClientKey({\n          clOrdID: action.order.clOrdID,\n          pocketID: action.order.pocketID\n        })\n      }\n      return MQTT_SEND_(`cancel/${action.order.market}/${action.order.userID}`,\n        markets.CancelOrder.encode(cancel).finish())})),\n\n  // subscribe to order actions\n  //\n  (action$, state$) => action$.pipe(\n    ofType(MQTT_CONNECTED),\n    map(() =>\n      // topic action/<market_symbol>/<user_id>/<profile_id>/<pocket_id>\n      MQTT_SUBSCRIBE_(`action/+/+/+/${state$.value.session.pocketID}`))),\n\n  // subscribe to order statuses\n  //\n  (action$, state$) => action$.pipe(\n    ofType(MQTT_CONNECTED),\n    map(() =>\n    \t// topic order_status/<market_symbol>/<user_id>/<profile_id>/<pocket_id>\n\t    MQTT_SUBSCRIBE_(`order_status/+/+/+/${state$.value.session.pocketID}`))),\n\n  // subscribe to cancel statuses\n  //\n  (action$, state$) => action$.pipe(\n    ofType(MQTT_CONNECTED),\n    map(() =>\n    \t// Subscribe to cancel status for current user.\n    \t//\n    \t// topic cancel_status/<market_symbol>/<user_id>/<profile_id>/<pocket_id>\n    \tMQTT_SUBSCRIBE_(`cancel_status/+/${state$.value.session.userID}/+/+`))),\n\n  // receive order action\n  //\n  action$ => action$.pipe(\n    ofType(MQTT_RX),\n    filter(action =>\n      action.topic[0] == 'action'),\n    map(action => {\n      let rxAction = markets.Action.decode(action.message)\n      switch(rxAction.msg) {\n      default:\n        return ignoreElements()\n      case \"newOrder\":\n        return ORDERS_RX_NEW_(action.topic[1], rxAction.newOrder)\n      case \"cancelOrder\":\n        return ORDERS_RX_CANCEL_(rxAction.cancelOrder)\n      }\n    })),\n\n  // receive order status\n  //\n  action$ => action$.pipe(\n    ofType(MQTT_RX),\n    filter(action =>\n\t   action.topic[0] == 'order_status'),\n    map(action =>\n      ORDERS_RX_STATUS_(markets.OrderStatus.decode(action.message)))),\n\n  // receive order status\n  //\n  action$ => action$.pipe(\n    ofType(MQTT_RX),\n    filter(action =>\n      action.topic[0] == 'cancel_status'),\n    map(action =>\n      ORDERS_RX_CANCEL_STATUS_(markets.CancelStatus.decode(action.message)))),\n\n  // detect fills\n  //\n  action$ => action$.pipe(\n    ofType(ORDERS_RX_STATUS),\n    filter(action =>\n      action.status.event.code == markets.OrderStatusCode.OS_PARTIAL_FILL ||\n      action.status.event.code == markets.OrderStatusCode.OS_FILLED),\n    map(action =>\n      ORDERS_RX_FILL_(action.status)))\n]\n\n// Valid Order Status Finite State Machine Transitions\n// \n// Although these transitions represent the actual sequence of events\n// in the distributed order management system, it is possible that some\n// statuses may be received earlier than statuses that will be received\n// from events that had already occured.  This may either be due to\n// latency optimizations or partial order management system failures.\n//\nconst TRANSITIONS = {\n    [OS_NEW]:          [OS_REJECTED, OS_PENDING],\n    [OS_PENDING]:      [OS_REJECTED, OS_OPEN],\n    [OS_REJECTED]:     [],\n    [OS_OPEN]:         [OS_CANCELED, OS_PARTIAL_FILL, OS_FILLED],\n    [OS_CANCELED]:     [],\n    [OS_PARTIAL_FILL]: [OS_PARTIAL_FILL, OS_FILLED],\n    [OS_FILLED]:       []\n}\n\nfunction is_sequential_status(lastKnown, status) {\n  return -1 != TRANSITIONS[lastKnown].indexOf(status)\n}\n\nconst PRIORS = {\n    [OS_NEW]:          [],\n    [OS_PENDING]:      [OS_NEW],\n    [OS_REJECTED]:     [OS_PENDING, OS_NEW],\n    [OS_OPEN]:         [OS_PENDING, OS_NEW],\n    [OS_CANCELED]:     [OS_OPEN, OS_PENDING, OS_NEW],\n    [OS_PARTIAL_FILL]: [OS_OPEN, OS_PENDING, OS_NEW],\n    [OS_FILLED]:       [OS_PARTIAL_FILL, OS_OPEN, OS_PENDING, OS_NEW]\n}\n\nfunction is_old_status(status, lastKnown) {\n  return -1 != PRIORS[lastKnown].indexOf(status)\n}\n\n// Invalid Future Transitions\n//\n// Given a starting status, ignoring early statuses,\n// what transitions are invalid regardless of any intermediate statuses.\n// \nconst INVALID_TRANSITIONS = {\n  [OS_NEW]: [],\n  [OS_PENDING]: [],\n  [OS_REJECTED]: [OS_CANCELED, OS_FILLED],\n  [OS_OPEN]: [OS_REJECTED],\n  [OS_CANCELED]: [OS_REJECTED, OS_FILLED],\n  [OS_PARTIAL_FILL]: [OS_REJECTED],\n  [OS_FILLED]: [OS_REJECTED, OS_CANCELED]\n}\n\nfunction is_invalid_transition(lastKnown, status) {\n  return -1 != INVALID_TRANSITIONS[lastKnown].indexOf(status)\n}\n\n","import { ofType } from 'redux-observable'\nimport { map, mapTo, merge, switchMap, catchError } from 'rxjs/operators'\nimport { interval, of } from 'rxjs'\nimport { ajax } from 'rxjs/ajax'\nimport { decodeProtobuf } from '../utils/utils'\nimport { markets } from '../protobufs'\n\n// action types\n//\nexport const SESSION_FETCH = 'SESSION:FETCH'\nexport const SESSION_FETCHED = 'SESSION:FETCHED'\n\n// action creators\n//\nexport const SESSION_FETCH_ = () =>\n  ({ type: SESSION_FETCH })\nexport const SESSION_FETCHED_ = session =>\n  ({ type: SESSION_FETCHED, session })\n\nexport const reduce = (state = new markets.AuthInfo({isAuthorized: false}), action) => {\n  switch (action.type) {\n  default:\n    return state\n  case SESSION_FETCHED:\n    return action.session\n  }\n}\n\nfunction determine_host(host) {\n  if (host == 'ORIGIN') {\n    return window.location.hostname;\n  }\n  else {\n    return host;\n  }\n}\n\nfunction determine_port(port, local_default) {\n  if (port == 'ORIGIN') {\n    if (window.location.hostname == 'localhost') {\n      return local_default;\n    }\n    else if (window.location.port == '') {\n      return window.location.protocol == 'https:' ? '443' : '80';\n    }\n    else {\n      return window.location.port;\n    }\n  }\n  else {\n    return port;\n  }\n}\n\nconst bake = info => {\n  info.mqttHost = determine_host(info.mqttHost)\n  info.mqttPort = determine_port(info.mqttPort, 15675)\n  info.mdsHost = determine_host(info.mdsHost)\n  info.mdsPort = determine_port(info.mdsPort, 8765)\n  return info\n}\n\nexport const epics = [\n\n  // ignition...\n  //\n  () =>\n    of(SESSION_FETCH_()).pipe(\n      merge(\n        interval(5 * 60 * 1000).pipe(\n          mapTo(SESSION_FETCH_())))),\n\n  action$ => action$.pipe(\n    ofType(SESSION_FETCH),\n    switchMap(() =>\n\t    ajax.getJSON('/api/auth-info/').pipe(\n        map(response => SESSION_FETCHED_(bake(decodeProtobuf(markets.AuthInfo, response)))),\n        catchError(() => of(SESSION_FETCHED_(new markets.AuthInfo({isAuthorized: false}))))))),\n]\n","import { decode } from 'base64-arraybuffer'\nimport { Big } from 'big.js'\nimport { markets } from '../protobufs'\n\nexport const decodeProtobuf = (protobuf_obj, protobuf_base64) => {\n  let b = decode(protobuf_base64)\n  let u8 = new Uint8Array(b)\n  return protobuf_obj.decode(u8)\n}\n\n// Strip away the Protobuf settable-null px or sz structure\n// returning its numeric value or null so that other nullable operators\n// may be used with less code girth.\n// \nexport const v_ = val =>\n  val ? ('number' == typeof val ? val : (val.hasOwnProperty('val') ? val.val : null)) : null\n\nexport const pv2f = (val, market) =>\n  val / 10 ** market.quote_asset.decimals\n\nexport const sv2f = (val, market) =>\n  val / 10 ** market.base_asset.decimals\n\n// format a nullable value\n//\nexport const formatAsset = (val, asset, truncate=false) =>\nval == null ? '' : (truncate ? Big(val) / Big(10**(asset.decimals - asset.decimals_min)) : Big(val) / Big(10**asset.decimals))\n\n// add nullable values\n//\nexport const add = (v1, v2) =>\n  (v1 == null || v2 == null) ? null : v1 + v2\n\n// subtract nullable values\n//\nexport const sub = (v1, v2) =>\n  (v1 == null || v2 == null) ? null : v1 - v2\n\n// divide nullable values\n//\nexport const div = (v1, v2) =>\n  (v1 == null || v2 == null) ? null : v1 / v2\n\n// given market fields, subtract field2 from field1\n//\nexport const mfsub = (market, field1, field2) => {\n  if (!market) {\n    return null\n  }\n  let f1 = market.quote[field1]\n  let f2 = market.quote[field2]\n  if (f1 &&\n      f2 &&\n      f1.hasOwnProperty('val') &&\n      f2.hasOwnProperty('val')) {\n    return f1.val - f2.val\n  }\n  else {\n    return null\n  }\n}\n\n// given market field, return its value\n//\nexport const mfv = (market, field) => {\n  if (!market) {\n    return null\n  }\n  let f = market.quote[field]\n  return f && f.hasOwnProperty('val') ? f.val : null\n}\n\n// given market value, format price\n//\nexport const mvpx = (market, val) =>\n  market ? formatAsset(val, market.quote_asset) : ''\n\n// given market field, format price\n//\nexport const mfpx = (market, field) => {\n  if (!market) {\n    return ''\n  }\n  let f = market.quote[field]\n  return f && f.hasOwnProperty('val') ? formatAsset(f.val, market.quote_asset) : ''\n}\n\n// given market value, format size\n//\nexport const mvsz = (market, val) =>\n  market ? formatAsset(val, market.base_asset) : ''\n\n// given market field, format size\n//\nexport const mfsz = (market, field) => {\n  if (!market) {\n    return ''\n  }\n  let f = market.quote[field]\n  return f && f.hasOwnProperty('val') ? formatAsset(f.val, market.base_asset) : ''\n}\n\nexport const orderStatusCodeLabel = code => {\n  switch (code) {\n  default:\n    return 'UNKNOWN'\n  case markets.OrderStatusCode.OS_NEW:\n    return 'NEW'\n  case markets.OrderStatusCode.OS_PENDING:\n    return 'PENDING'\n  case markets.OrderStatusCode.OS_REJECTED:\n    return 'REJECTED'\n  case markets.OrderStatusCode.OS_OPEN:\n    return 'OPEN'\n  case markets.OrderStatusCode.OS_PARTIAL_FILL:\n    return 'PARTIAL_FILL'\n  case markets.OrderStatusCode.OS_FILLED:\n    return 'FILLED'\n  case markets.OrderStatusCode.OS_CANCELED:\n    return 'CANCELED'\n  }\n}\n\nexport const orderStatusCodeShortLabel = code => {\n  switch (code) {\n  default:\n    return '?'\n  case markets.OrderStatusCode.OS_NEW:\n    return 'N'\n  case markets.OrderStatusCode.OS_PENDING:\n    return 'P'\n  case markets.OrderStatusCode.OS_REJECTED:\n    return 'R'\n  case markets.OrderStatusCode.OS_OPEN:\n    return 'O'\n  case markets.OrderStatusCode.OS_PARTIAL_FILL:\n    return 'PF'\n  case markets.OrderStatusCode.OS_FILLED:\n    return 'F'\n  case markets.OrderStatusCode.OS_CANCELED:\n    return 'X'\n  }\n}\n\nexport const cancelStatusCodeLabel = code => {\n  switch (code) {\n  default:\n    return 'UNKNOWN'\n  case markets.CancelStatusCode.CS_NEW:\n    return 'SENT'\n  case markets.CancelStatusCode.CS_PENDING:\n    return 'PENDING'\n  case markets.CancelStatusCode.CS_ACCEPTED:\n    return 'ACCEPTED'\n  case markets.CancelStatusCode.CS_REJECTED:\n    return 'REJECTED'\n  }\n}","/*\n * view.py\n *\n * A store for user-driven state used by views.\n *\n */\n\nimport { distinctUntilChanged, map, pairwise, pluck, switchMap, take, mapTo, filter } from 'rxjs/operators'\nimport { ofType } from 'redux-observable'\nimport { MD_SUBSCRIBE_, MD_UNSUBSCRIBE_ } from './md'\nimport { SESSION_FETCHED } from './session';\n\n// action types\nexport const VIEW_SET_MARKET = 'VIEW:SET_MARKET'\nexport const VIEW_POPULATE_TICKET = 'VIEW:POPULATE_TICKET'\nexport const VIEW_CLEAR_TICKET = 'VIEW:CLEAR_TICKET'\n\n// action creators\n\nexport const VIEW_SET_MARKET_ = market =>\n  ({ type: VIEW_SET_MARKET, market })\nexport const VIEW_POPULATE_TICKET_ = pick =>\n  ({ type: VIEW_POPULATE_TICKET, pick })\nexport const VIEW_CLEAR_TICKET_ = () =>\n  ({ type: VIEW_CLEAR_TICKET })\n\nconst INITIAL_STATE = {\n  market: null,\n  pick: null,\n}\n\n// reducer\nexport const view = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  default:\n    return state\n  case VIEW_SET_MARKET:\n    return {\n      ...state,\n      market: action.market,\n      old_market: state.market,\n      pick: null\n    }\n  case VIEW_POPULATE_TICKET:\n    return { ...state, pick: action.pick }\n  case VIEW_CLEAR_TICKET:\n    return { ...state, pick: null }\n  }\n}\n\nexport const epics = [\n\n  // set active market\n  //\n  action$ => action$.pipe(\n    ofType(SESSION_FETCHED),\n    filter(action => action.session.isAuthorized),\n    take(1),\n    mapTo(VIEW_SET_MARKET_(\"LUS|LAR\"))),\n\n  // sub/unsubscribe when view changes the active market\n  //\n  (action$, state$) => action$.pipe(\n    ofType(VIEW_SET_MARKET),\n    take(1),\n    map(action =>\n      MD_SUBSCRIBE_('trades', action.market))),\n\n  (action$, state$) => action$.pipe(\n    ofType(VIEW_SET_MARKET),\n    pluck('market'),\n    distinctUntilChanged(),\n    pairwise(),\n    switchMap(markets => [\n      MD_UNSUBSCRIBE_('trades', markets[0]),\n      MD_SUBSCRIBE_('trades', markets[1])])),\n\n]\n"],"sourceRoot":""}